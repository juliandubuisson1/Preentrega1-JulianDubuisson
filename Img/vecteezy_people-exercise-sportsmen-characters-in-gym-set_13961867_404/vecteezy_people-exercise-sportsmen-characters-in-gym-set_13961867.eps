%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/17/2021
%%BoundingBox: 0 0 2692 1487
%%HiResBoundingBox: 0 0 2692 1486.5544
%%CropBox: 0 0 2692 1486.5544
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 72 8%%BeginData: 20531 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACAFFCACFCA
%CFCACACACFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCFFFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACA9AC3C9CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFFD04CACF
%CACACACFCACACACFCACACACFCACACACFCAA87DA2A1CFCACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFC99A6FC3C2C9CACFCACACACFCACACACFCACACACF
%CACACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFA821282177CA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC9C3C3C2C9CAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCACACACFCACACA
%FF762121764BA7CACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCAFFA8769A
%C3C2C9CACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCF7D214C999ACAFFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFF7DF8F8A1C3C3C2CACACFCAFFCACFCAFFCACFCAFFCACFCACACFCA
%CACACFCACACACFCACACACFCACACACFCAFF774B7576A0C9C9CACACFCACFCA
%FFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACA7D4A2052C9C2C3A1FFCACACACFCACACACFCA
%CACACFCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC9C2C8C8C9
%C7C9C9FFCAFFC9A1A1FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAA2A1FFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA7A0A0C9C3C3C2CACAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFA1CACA
%FFCAC8C1C8C1C8C1C8C8C8C3C9C29944A1CACACACFCACACACFCACACACFCA
%CACACFCACFA277A8CFCAFFCACACACFCACACAFFCACACACFCACFCACF7777A8
%FFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACAFFA0
%A0C3C3C2C3C3FFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACF
%CAFFCAFFA7756FC2C2C9C1C8C1C8C8C8C1C9C8C2BBC275A1A1FFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCAA24DCACACFCACACACFCAFFCACA7DA8CAFF
%CACAC9CFCAA277CACAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFC3C29AC2C2C9C2CACAFFCACFCAFFCACFCAFFCACFCAFFFD04
%CACFCACACACFCACACACFCACA767699BC99C2C2C8C1C8C1C8C2C299BCA0CF
%CAA8CACFCACACACFCACACACFCACACACFCACACACF7777A1FFCAA16FC9CAFF
%CACAF8F8F8CFCACA7575CAFFA177A1CFCACFCACACACFCACACACFCACACACF
%CACACACFCACACACFFD04CAC2C299C2BBC2A0C9CACACACFCACACACFCACACA
%CFCACACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCACACFCAC3C2BCC2C2C8C8C8
%C1C9C2C3C9FFCAFFA1FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFA24DCA
%CFFFA19A9AFFCAFFA1F82076CAFFA199A0FFCAA271CACAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFC3C3BCC2BCC2BBC2C3FFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCACAA1FFCACF
%CACAC9C8C1C8C1C8C1CACACFCACFCAA8A8CFCACACACFCACACACFCACACACF
%CACACAFFA177A1FFCACABCC2CACFCAFF9A999AFFCAC999C9CACFA1A2CACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACFC3C3C2C299C2
%BBC299C3CACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCA
%CFCAFFCAA8CAFFCAFFCAFFC8C8C7C8C7C8CAFFCACFCAFFA8CACAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFA1CACAFFCAC2BCC9A8A87DC999A1A8A8C2
%C2C3FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCAC9C2C3C2C2BBC2BCC2C2FFCACFCAFFCACFCAFFCACFCAFFCACFCACACF
%CACACACFCACACACFFD04CAA1CFCACFCACACAA1A0A19AA176CACACFCACACA
%A8A8CACACFCACACACFCACACACFCACACACFCACACACFFD04CABCC22E2F0C0C
%2E7D2E2E0676BBC3CACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACAFFC3C3A0C299BC99C2BBC2CACFCACACACFCACACACFCACA
%CACFCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCAFFCAFFA2A2779C77
%9CA2FFCAFFCAFFA2CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAC376352E2F2E350C2F2E352EC2C9FFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACAC2C9C2C2BBC2BCA076FFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFFD04CAA1CFCACFCA
%CACAA2777777A277A2CACFCACACAA8A8CACACFCACACACFCACACACFCACACA
%CFCACACACFCACACAFFCA2E062F2E2F0C2F0C2F0C0C7DCFCACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACAC2C3767652
%532E2EA1FFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACFCAFF
%CAFFA8CACACFCAFFCACF779C777777A277CFCAFFCAFFA1CACACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFA87D2E592E2F2E2F2E597DFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCAFFC3590C2F0C592E7DCAFFCACFCAFFCACFCAFFCACFCAFFFD04CACF
%CACACACFCACACACFCACAA1FD04CACFCAFD0477A27777A8CFCACFCAA8A8CF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA2E2F0C2E
%0C2FA1FFCACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCAA10658522E0C2F2ECACACFCACACACFCACACACFCACA
%CACFFFCAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCAFFCAFF77A2779C7DA277
%CACAFFCAFFA1FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCA590C2F0C2F0CA8CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA8350C592E352E2F7DFFCAFFCA
%FFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCACFA1FD04CACFCA77
%777877A27777A1CFCACFCAA8CACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACA5258527C7C7CA0C9C8C9C9CACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA2E2F2E580C2F
%0C2FA8FFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCACFCAFFCA
%CAA1FFCACFCAFF7778779C7EA277A2CACFCACAA2FFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAC9C2C8C7C8C7C8C1C8C1C8CA
%FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCA2F0C2F522F2E350C84CAFFCACFCAFFCACFCAFFCACFCACACFCACACACF
%CACACACFCACACACFA8A2CACFCACFA1FD0477A2777777CFCACAA7A8CACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFA0C8C1C8C1
%C8C1C8C1C8C1C9CACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACAA80C2E0C582E2E0C2E2ECACACFCACACACFCACACACFCA
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA1FFCAA27DA277A277A277A277A8
%CFFFCACACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAC9C2C8C8C8C2C8C8C8C2C8C9FFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA8352E352E590C352E2F7DFFCAFF
%CAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFCAA8A1CA4C4C77
%78777777A27777A8FFCACAA1FD04CACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFC2C2A0C8C2C89FC2A0C8C1C9CACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFFD04CA2E2E0C2F2E2E0C
%2F0C2FA8FFCACACACFCACACACFCACACFCAFFCACFCAFFCACFCAFFCACFCAFF
%2726C7A14C7777A2779C77A2CAFFCAFFCAA8CAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAC9C2C8A0C8C2C9A0FD04C8FFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFA1
%2F2E2F0C592E2F2E350C7ECAFFCACFCAFFCACFCAFFFD04CACFCACACACFCA
%CACACFCACACA5226C8A04C4CFD0577A2CFCACACAA2A8CACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACBC9C2C1C8C1C8C9C29F
%C8C1C8CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCAA80C2F0C2E537D0C2E0C2F0CA8CACFCACACACFCACACACFFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFF7D75C8514C4C7778777777CACAFFCACAA2FF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFCACF
%C2C8C2C8C8C9C2FD04C8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFA8352E2F0C7DCA350C352E2F59FFCAFFCAFFCA
%FFCAFFFD04CACFCACACACFCACACACFFD04CA269F207D4C4C224C224C77FF
%CAA8A1CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCAFF
%A883A0C8A0C3A0C8C1C8C8C29FC8C1C8CAFFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCAA80C2F2E2E53FF7D0C0C2F0C2E
%A1FFCACACACFCACACACFFFCACFCAFFCACFCAFFCACFCAFFCAFFCA515052A8
%A8A1A1A0A127A1CACAA1CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCAFFCAFFAF5F58C8C2C8A0C8C8C8C1C8C2C8C1C8C8FFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF7D2F0C350C
%59CAFF2E2F2E7DA1CFCAFFCACFCAFFCACFCACACFCACACACFCACACACFCACA
%CACFCAFF4B74A1FFA8CAA0C8C775204BA1FFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACAA8590C59C1C8C1C8C1C8C1C8C2C9A0A6
%7CA7CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACA840C2E0C0C2ECACA7D53779B9BA1CFCACFCACACACFCACAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAA151FFCAFFCF27F89F9F7B4AA0CAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFAF60356058C8C7C8C1
%C8C8C8C1C9843535355984A8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCA7E77A17DA8CAFFCACA779C77A2CAFFCAFFCA
%FFCAFFCACACFCACACACFCACACACFCACACACFFD07CACF765252524B5227A1
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACAFFAF5934A8A8CA
%C9C9C8C8C2C8C8C9CAA8355F356035597DFFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACFA2A2779B9BA2FD04CA777777A2A2CACA
%CFCACACACFCACACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCACFCAFF
%FFFFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CACFA8CFCAFFCAFFCAFFCACFCAFFCAFFA8FFFFFFA8FFFFFFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFA27777A27777A1FFCAFF
%7D7877A2A2FFCACFCAFFCACFCAFFFD04CACFCACACACFCACACACFCACACACF
%CACACACFCACACAFFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACAA8CACACAA7FD
%04CACFCACACACFCACACACFCACACACFCACACACFCACFCACFCACFA17877A277
%A277A2CACFA87777A8CACFCACFCACACACFCACACACFFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCA7D7DCACAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA8A2A2FF
%CAFFCAFFA8CACACBCACACAFFCACAA2CBCAFFCAFFCAFFCAFFCAFFCAFFFD04
%CACFCACACACFCACACACFCACACACFCACACAFFCA4B2075A1CFCACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACAA1A27778A1FFCACACACFCACFCACFCACACACFCACFCACFCACACACFCACA
%CACFCACACACFFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACA4BA075
%CACACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFFD04A29CA2CAFFCFFFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCACACFCACACACFCACACACFCACACACFCACACA
%CFCACACAC99A9AC3CFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACAA277A277A2A1CFA17DA1CFCACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFA8A884C2A0FFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFFD05A2CFCFA1
%21287DFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACFCA
%CACACFCACACACFCACACACFCACACAA859351235585935A8CACFCACFCACFCA
%FFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACFCA
%A277A277CACAFFA0752177CACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACFCAFFCACFCAFFCACFCAFFCACFCAFFCA84FD093560A8FFCAFF
%CACACAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CAA070A2A8CFCAFFCFC999A0A8FFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFFD04CACFCACACACFCACACACFCACACA841235343535353435
%35351235A1C3C3A04BC3CACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACAA1206FC3FFCACACACFC9999AC9C9CACAFFCACACACFCACA
%CACFCACACACFCACACACFCACACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF59
%35355F3559355F3559355F59C3C2C39A4B76FFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA17699C2C3CFCAC9C8C8A0C8C7C8C1
%C8C9FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCA
%CACACFCACFC3C3A07DFD0835137DBCC2C2CAA1CACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACAFFCACFCACFCACA
%CACFCACACACFCACACACFCACACACFFD05CAC399C2BCC2C1C8C1C8C1C8C1C8
%C1C2C2CACACFCACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCA
%FFCACFCAFFCAC3C2C3C25935593535355F5935A1C9C9CFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCAFF7D
%7DCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAC2BBC2C2
%C8C1C8C8C8C1C8C8C8BCC2C3FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%CACFCACACACFCACACACFFD04CABCC2BCCAFD0735CFA8CACAFFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCAA859
%5FA14BF84B7D597DFD04CACFCACACACFCACACACFCACACACFCACACAFFCAC2
%99C2C1C2C1C8C1C8C1C8C2C299C2C9CFCACFCACACACFCACACACFCACACACF
%CACAFFCAFFCAFFCAFFCAFFCAFFCAFFC3C3C2CACAA17C7D59593560CAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFA860353535C376A14A7D353535A8CAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCACAC9C9A0C8C8C8C2C8C8FFC9C2BCC9CAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCACACFCACACACFCACACAFFA8C9A0C3C27C59C9BCC2
%BBC29A7C7DFFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACA5F12595959C3A1A0C37D35593535CACACFCACA
%CACFCACACACFCACACACFCACACACFCACACAFFCAC8C1C8C1C8C1C8CAFFC3C2
%BCC3CACFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACAC8C89F
%C3C2C32E0D7DC2BCC2BBC2BCC2CAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF3535355F59A8A0C9A88459
%603559A8FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFC8C8C1
%C8C7C8C2FFCAFFC3BC75C9CAFFCACFCAFFCACFCAFFCACFCAFFFD04CACFCA
%CACAFFA77B2D2E2EA0520D2E9ABBC299BC9AC399C9CACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA5F0C3535
%35127D593512FD0435FD04CACFCACACACFCACACACFCACACACFCACACACFCA
%CACAC99FA07C83587DCACFCACA759AC3CFCACFCACACACFCACACACFCACACA
%CFFFCAFFCAFFCAFFCACF7D5A5959523576C2C2C3BCC2BBC3C2C2C2FFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCA60355F355F3535355F353535A8CAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFF83FD04356059FFCAFFCACFC3CFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFFD04CACFCACACACFCACFCAFFC8C9A1FD05C2BBC299C3BB
%BCC3FFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACAFFCACFCA8459FD083584CACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACFA8FD0435595984CAFFCACACAFFCACACACFCACACACFCA
%CACACFCACACACFFFCACFCAFFCACFCAFFCAFFCACFCAFFC2C2BBC2BCC2BCC2
%C2C2BBC3CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCACFC8C8C2C9CAFFCA8435353559355959A8CAFFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCA843559353559845F6083FFCAFFCAFF
%CAFFCAFFCACFCAFFCACFCAFFCACFCACACFCACACACFCACACACFCACACAFFCA
%C999C299BC99C299C299C299CACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACA9FC19FC19FC8C9A8FD0435343559CFCACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFFD04CA353534353584FD0459
%7DFD04CACFCACAA1CFCACACACFCACACACFCACAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAC9BBC2BCC2BCC2C2C2BCC2C3FFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFC9C8C1C2C1C8C7C8A05F3535355F35A8
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF8335355F
%35845F5F355935A1C2C3C2CACA27F853FFFFCAFFCAFFCAFFCAFFCACACFCA
%CACACFCACACACFCACACACFCACFCAC2BBC299C2BBC29AC2BBC2CAFFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCAC9C1C7C1C8C1C8C1
%C8C1A658351335A8CFCACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACAA859353534605959343535359AC29ABCC2A8F8F827FFCACACACFCA
%CACACFCACACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAC2BBC2BBC2C2C2
%BBC2BBCACAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CAC8C1C8C8C8C1C8C8C8C1C8A07D35CFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACA9A7D355959845935353559C2BBC2BBC9A8F8
%F827A8FFCACFCAFFCACFCAFFFD04CACFCACACACFCACACACFCACACACFCACF
%CAC3C2C2A1C299BC99BCC2CACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFFD04CAC1C8C1C8C1C8C1C8C1C8C1C8C1A6A8CFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACAFFC3BCBBA0595FCACA59351259C3
%C3A1C9C9CA27F8F8A8FD05CACFCACACACFFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFC9C2BCC2BCC2C9FFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFC9C8C2C8C8C89FC8C8C8C2FD04C8FFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC2BCC2C2FFCAFFCA
%FFCAA8A8FFCAFFCAFFCAFF52F87DFFCAFFCAFFCAFFCAFFFD04CACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFBCBC99C2C2C3CACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACBC9C8C1C8C1C8C1A09FC8C1C8C1
%C8C1C9A8CAA8CACACFCACACACFCACACACFCACACACFCACACACFFD04CA99C2
%99FD04CACFCACACAFFCACACACFCACACF7DF87DFFCFCACACACFCACACACFFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAC9BCC3C2C2C2CF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCAC8C1C8C8C8C1C8
%C1C277C3A0C8C1C37778779C77CACAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCAFFC2C2BCC3CAFFCACFCAFFCACFCAFFCACFCAFFCAFFCA272EFFCAFF
%CACFCAFFCACFCACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACAC2BCC29AA8C9C9CACFCACACACFCACACACFCACACACFFD04CA597D7EA7
%9FC8C1C8C1C2517CC3CAA2CAA2CAA2CAA2CAA1FD04CACFCACACACFCACACA
%CFCACACACFCACACAFFCACFC3C2C9CFCACFCACACACFCACACACFCACACACFCA
%CFA17DCACACACFCACACACFCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAA152350DA1C8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFA8840C355959C2C8C8C82E0D0DCACAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA85252FFCFCFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCFCFCAFFCAFFCAFFCAFFCACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACF2E0C0C2F2E2F59FD04CACFCACA
%CACFCACACACFCACACACFCFAF2F2E0C2E9FC8520D0C2F7DCFCACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACAA827272752F8F8F87DCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCA592E2F2E352E
%2F2ECACACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFF84350C83C9A9A8FFAF
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFF7D5227
%05FD04F852FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFFD04CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%A0A09FA09FA09F9FA0CFCACACACFCACACACFCACACACFFD05CAFFA87EA8CB
%A8CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CAFFFFFFA8A8525227A8CACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCACFC9C9C9CAC9C9C9CFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCFFFFFFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACAFFCACACAFFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.2-c000 79.1b65a79, 2022/06/13-17:46:14        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-17T16:44:21+03:00"
   xmp:ModifyDate="2021-12-17T16:44:21+03:00"
   xmp:MetadataDate="2021-12-17T16:44:21+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:ffe1ea72-12d3-504a-9c74-1f2c94873555"
   xmpMM:InstanceID="xmp.iid:ffe1ea72-12d3-504a-9c74-1f2c94873555"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">People exercise, sportsmen characters in gym set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">People exercise, sportsmen and sportswomen characters in gym jump with rope, workout with barbel, doing gymnastics, jogging, pumping press and playing tennis, Line art flat vector illustration, set</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>people</rdf:li>
     <rdf:li>exercise</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>set</rdf:li>
     <rdf:li>workout</rdf:li>
     <rdf:li>gym</rdf:li>
     <rdf:li>flat</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>stretch</rdf:li>
     <rdf:li>sportsman</rdf:li>
     <rdf:li>training</rdf:li>
     <rdf:li>character</rdf:li>
     <rdf:li>man</rdf:li>
     <rdf:li>woman</rdf:li>
     <rdf:li>lifestyle</rdf:li>
     <rdf:li>game</rdf:li>
     <rdf:li>runner</rdf:li>
     <rdf:li>badminton</rdf:li>
     <rdf:li>girl</rdf:li>
     <rdf:li>gymnastics</rdf:li>
     <rdf:li>play</rdf:li>
     <rdf:li>athletics</rdf:li>
     <rdf:li>activity</rdf:li>
     <rdf:li>sportswoman</rdf:li>
     <rdf:li>tennis</rdf:li>
     <rdf:li>collection</rdf:li>
     <rdf:li>physical</rdf:li>
     <rdf:li>athlete</rdf:li>
     <rdf:li>sport</rdf:li>
     <rdf:li>person</rdf:li>
     <rdf:li>playing</rdf:li>
     <rdf:li>run</rdf:li>
     <rdf:li>health</rdf:li>
     <rdf:li>healthy</rdf:li>
     <rdf:li>gymnast</rdf:li>
     <rdf:li>jogging</rdf:li>
     <rdf:li>adult</rdf:li>
     <rdf:li>player</rdf:li>
     <rdf:li>fitness</rdf:li>
     <rdf:li>element</rdf:li>
     <rdf:li>male</rdf:li>
     <rdf:li>female</rdf:li>
     <rdf:li>jog</rdf:li>
     <rdf:li>marathon</rdf:li>
     <rdf:li>pilates</rdf:li>
     <rdf:li>group</rdf:li>
     <rdf:li>isolated</rdf:li>
     <rdf:li>human</rdf:li>
     <rdf:li>design</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="144"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9E5iu0dirsVdirsVQ1xq&#xA;mmW0npXN5BBLTlwkkRG4+NGI2wiJKq8UsU0ayxOskbjkjqQykHuCOuBV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KseufOtja67+h7m2nhlKF4p5E4xygGjekx2crUEgdj88pllrmH&#xA;Jhp+Lkd08tru2uU5QSBwOtOo+YO+WRmJcmmeOUDRCrkmDsVdirsVdirsVdirsVdir5H17S5NZ/M/&#xA;zNNqTS/VbW/u+dw6FolSGRliR2PFQvFVG7KOP7QpmZqM/h4hw1ZHx+Dfp8YlLfk+jvyysryw8n2N&#xA;ldyo7RBmgVSSyQyMXRHr/LyKrQU40Ga+Gbj6jiRnhwy25MqyxpdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVeOfnx+Z+qeWCNM0fQTqN+1tHcHUmNUtvWeZY6RKGeT/edy24C7eOA44y+&#xA;pRnyQ+hkWi6lO1nY6lH+7e5t4bkKK04zxrIBuAaUbvmuNwlt0d5EjNjBI5s+hlWWFJV+zIoYfSK5&#xA;sQbFuklGiR3L8KHYq7FXYq7FXYqw/wA++ctY8tzWcllpc2o2jJLJe+hC00gVCir6YRwa1fccTUZX&#xA;kmRy/Y3YsYlz+Q5r089xXEKj6u1s8gHxMeXGviKDfNdqNbLgIgPU7CPZhBu7DSsRSVG+3V1dT1qT&#xA;U1Hia5zhlMSsk8X2tvCOSpFcGGOaYvxZF5h+9QwB/AnLME5Akg+r9rGULICU6h5k846pbS2ugwwi&#xA;+ZT6RkLogP8ANJIoYqPkBnRY8851H7k5NHjxR4jufPknnkWx1uwsb201u8a91AXbytKZHkHpyqrI&#xA;F5k8FG/wigBrTbNhEGhbqMnDfp5MkyTB2KuxV2KsS8o+Z9S1fzNrNhKOUFszC1jRfsLFJ6ZqRuS1&#xA;QTU/LMrNgEYRI5rKgE8u/MGl2mrxaRcSMl/ModISj7qxIG9KbkdswpTANM4YzKPEKr3po0UiKWde&#xA;KgVJOwAHzyzhLTxh595c/PH8vvMfmuPyxpF3Lc6lNLPFAwiIhf6tGZXdZK04FUbie9PlU8BYjLEs&#xA;r8weY9J0AW51GYI1y/pxIpVnOxJbiDyIFOwyuchHm344GfJjv5o3Oo2mm2F5ZziExymQFZED8gBx&#xA;+AmrdTXb55n6OIN2iJFkMu0+5N1YW1ydjPEkhH+uob+OYchRIQr4FdirsVdirsVcSACSaAbknArz&#xA;/wA7X1hd3sDWgK3cCmN7oryUxPuycarXcVBOw8D0ODm1ECadxpNFkEb2WWk0dxFGIYkiVFSKO3iH&#xA;FEVFCIqqOgoBQZRx8Zty/C8MUz6zhMNrDEeqIqn5gb5tICgA8/klxSJ81XJMHYq7FXYq7FXYqgJ/&#xA;+O/Z/wDMLdf8nLfJDkqy/wDLmkXrF5YAsp6yRnix+dNj9IzGnp4S5hycWsyQ2B2SHUTpWmXH1NZ4&#xA;4VjVaLI4DfEK1PI980Ou0OU5PRCUo+QJc3Fn4xcjup2V/o91eRWck8cy3J9MxK9eVdwPhPiMOh7P&#xA;zjIDKEhHrYIXLmERcTuy61s7W0i9K2iWJO4UUr8/HOijARFB1mTJKZuRtDwkfpu8AJ/3mtiV7bvO&#xA;K/PbJ9GCOwK7FXYq7FWLaB5TuNK81apqPNWs7wM8Q6MGlkDstPBeOZOXMJQA6hJOyX/mJp2ny31h&#xA;dyW8Zu0UhbriPU4xyJKqc+vEOtadM0+skQRTtezICQlfko3P5w+RJrOaG4aaQSBoprcRE8lYcWoa&#xA;hSp+ebeGkyEA1TzGTtTBEkXdHu5vPvI9v5A8k6vBqNsHTTyjvbzLwlmlkdWSsyxv8DJG9OPAAe56&#xA;Y8NLmlkN9Pxs5uXtLSQwjh5y+/z/ALGY3GuaF5u1mwv4IPWtoHS3EdworX1VkbklWHVVI+WYerjK&#xA;GYRPk7XszJjzaaU478/h+NizbzR5Yg8wWsFtNM0KxSiRmUAkpQhlFTsT47/LNlhzHGSXXg0m0EMc&#xA;EEcEQ4xxKERfBVFBlJNm0L8VdirsVdirsVSrzLLIlgFXYSOFc+1CafhmPqDUXM0MQZ+4PPdU/wB6&#xA;a0Iqo6+xIzUZeb0eD6VumymLULWQGhSVG+5gcGM1IHzTnjcJDyL1nOgePdirsVdirsVdirsVQM5I&#xA;1uzJNFa3uV+bF4WA+5WwjkqOwK8k/MG6lbzJeW9aRIYmp4n0VoT8uRp4VPjm30g/dhsiEps7lbKK&#xA;0u0iHrJclvWqeVIvTYKBWnU+GXSF2E9XuCOrorqaqwBU+IOaJqQUKn9O3jbUNrbDqK7SXHbr3w9F&#xA;R2BXYq7FXYq7FUk83+Xn13RprOCYW94VIt7hgSFJ2YGm9GG3t1wCMTIGQuiic8gxyjA0ZCnz55o8&#xA;la15ZMY1URoZ2K2pjYOsoQfGwpuvHkv2gK1275vMWaM+Txuo0k8P1dUhy1xnuP5Z/lzf6PdyalfX&#xA;EclrIA1nbrUk71jlc9FPH9kV6+2afWShkI23i9X2Viy4Iy39M+j0vMd2LsVdirsVdirsVdiqld2s&#xA;N1A0Moqrdx1B8RkZREhRZ48hgbDyX8zLqbQLyytrdopZ7lXYeqQlEUjc/Evf3yrD2dHJI8RNDu/B&#xA;bNd27k08I8AjxSJ+ryr3d7z648x6y8xjublrWgBX0VHU0Kmta8SPA5s8XZ2GI4ox4vefxv8AB5vU&#xA;9v6vITGc+Af0R+DXxfRXlTXYtd8v2WpoQWmSkwHaVPhkFP8AWBp7ZjZYcMiHbabMMmMSTbIN7sVd&#xA;irsVdirsVQGr/AbK6O6210hYeImVrf8A4Uzcj7DJRVH5FXjnnqWOXzVfPG6ulYxyUgiqxICKjwIp&#xA;m40orGG2PJKn306KgPwzScj2+JUp/wAROX9V6vaPL0xm0HTpG+01tFy+YQA5pMwqZ97Uea6x/eah&#xA;qMp6o8dup/yUiWT/AIlM2QPIKjsCuxV2KuxV2KuxVhP5meWbbXYtOSeSRBC8vBY+IJLKp6sCOiZT&#xA;l7QlphYrfv8Ah+tqydnR1NCRI4e5iMP5UeXlAMk907U+Ic0419qRg5rJ+02cnYRr3H9aY+zWnHMz&#xA;+Y/U9As9TubW1gto+LRwIsaF6liEAUcjXrtmEe2cxN+n5ftdrHRQAA32Tywu/rVv6hHFgSrAdKjN&#xA;3otT42Piqi4ebFwSpEZltTsVdirsVdirsVdirx38/wD0vX0Si/veNzyam5WsfEV9jXNhoBz+DoO2&#xA;z9A9/wCh5dP+8tIJu6Vhf/YnkpP+xag/1cyobTI+P4+/4unnvEH4fj8dHpf5GeZPQvrny/O1I7oG&#xA;4tAf9+oKSKP9ZBX/AGOY+tx2OJ2vY+oqRxnruHtGa16J2KuxV2KuxV2KpF581Y6R5M1vVPqjXy2d&#xA;nNNJao4iZ0RCXo5V+NFqa8TiDuxkaFvKfNXnTzXrP5eeX/NcfraU6hZtS0+KVgssE5CK704clPw0&#xA;FP28HZurjPUTxEDbkfdz/Hk5Ax1ASPVL4pUliSWM8kkUMjeIIqM6FKf+WdBm1wy2UcgiEbpK8jbh&#xA;UoytQd2J40yjNlEBbCRp6yos9J0oAkpaWMO56nhGvt1NBmoJMjfe1taRbzQ2EYnHG4lLzzr14yTM&#xA;ZGWvcKW4j2GCR3VGYFdirsVdirsVdiqT+Z4q2cctSDE4ow3pXufbbfNX2nC4xPPmPmP2beblaSW5&#xA;CSL9YB+LgR7VH9c5w8HS/wAfJ2W7il1HePDMVHBFPFd6l60NfkMuz4Y441Xqv9AP22whLi3T/QD+&#xA;4lH+UP1Zt+xT6Je9wtbzCaZunDdirsVdirsVdirsVeMfn7JXUdIjp9mGVq/6zKP+Nc2Oh5F57to+&#xA;qPuLzjTLO6vYbyC3T1DFCbplHUCDdmHjRGbbMuYAIPw+f4DqsQMhIDuv5fstR06/utPvoL60f07m&#xA;2dZIn8GU139vHJyiCKLXjmYSEhzD6g8s6/a6/olrqltss6/vI61KSDZ0PyOaPJjMJUXs9PnGWAkO&#xA;qaZBvdirsVdirsVUry0gvLOe0uF529zG8UyHujqVYfSDgQ+dfKPlXXfM7aBodyoNr5VtdZ0y9kkr&#xA;6f1uBlsIkaleLC3kDxtQ0NTRqUzF0YGPUTl1NH4Hn9rIyJjDujY/HwTa5/KvzJZmC0tNZa1iRBGI&#xA;7qChLCpYo8fqRsvcAPyp1GbbUdr48MeKYO56fgNuOJmaDXkvzJF5E86Xdl5x1WW2tbi39KyuZrZl&#xA;tbmUsjgxTxh91UMCr8euUntDFqYDg/sa8txNS2ezRJcanLFcTp6WnRlZbaAkM8rj4kkk4kqFU/Ei&#xA;160JoRTIWANmKaZFXYq7FXYq7FVssqRIXc0UfeT4D3OIDEkAWWKebfOQ0q4TTrQLJq7uonJ+KOBO&#xA;ZITY/E7qRy8PnmSMQECT3Oj1faZGWMIc7Dry+1S7tnt5Xj4SChoucdLtEyriJIsHp0ezjpxHcKaF&#xA;yilwFenxAGoB+e2a2YFmuTeGrq4RbvlK6oGhi48iBXjVT1+WZeWMpxiQCT+yI/Q0DJCGxICdeW5Y&#xA;pYJnikWROQFVIYVp7Zt+yMU4RlxAj3uHqc0J0YkS926cZuHGdirsVdirsVdirsVeI/n1Ix1/TY/2&#xA;VtSw+bSMD/xHNnofpPvec7aP7yPuSv8AJhVbztGrAMrW8wIO4IKjJ6z6Gjsn+++BQHnbyVe6R5nu&#xA;7K0gZ7Nv9ItWH2RDITQFjsOLVXfwyeDLxxB6oz9nz8YwgL6j3PQvybsZNMa9s5tQSVplScWUY5Ip&#xA;6FxJXdqUDADw3OYeqkZAHhId5odBPTj1EG+g6PT8wnPdirsVdirsVdiqXaV5f0nSbnUbiwg9GXVb&#xA;k3t8eTEPOUWMuASQtVjFaZHhF2hIPzG/LDQ/Ptvp8OqXd7ZHTJjcWs1hJHFIHIpUs8cvSm1KZJjK&#xA;NpNc/k1dSj0186a08OzGO6Fjc/Gp2YcrYAfdmL+Sw9IgfP8AW2eJP+cfs/UzDypoF7oemmyutXud&#xA;ZIctFNdpAjRpQD019COIcQQTvl+PGIChyQSTzNpzk1dirsVdirsVQ+oi/axkTTmjhvm2hupKn0qg&#xA;qWCjqaE0rlmOQB3cTVYpzjUDRY7p35eaTDBS9dry6aT1ZLg/Axbr13ald+uTyZzIEcgXC0/Y+OFG&#xA;R4pXabtoFufsyOPnQ/wGc/LsbH0kXoxrJdwWroEVfilYj2AH9cjHsWPWRSdae5LPMHkOy1q8hme6&#xA;ktRDEkChI1kBXk7cjV1O1d9s6HSzjihwjkHm+0+zjqcnHfT9aFsvIL6fwFprd5BX4gEgQ0PKlDSQ&#xA;j332+nbLpZ4nmHExdk5cZ9MyPx72YQxyRRLHLL68iDi0wXjzI25ce1fDMSVXs7/FxcI4ua7A2OxV&#xA;2KuxV2KoDW9Zt9JsjczI8pJ4RxRirMx3p4DplmLEZmgoFvMfMWu6lrrKZrJYliasQUAnj4OWFW/A&#xA;e2bTFpxAM/DDKPy3tIzBd3UtpBFcCXjG8cSIyqUFQCorQ/PMHUw4KiCfmwnjgJWIgHyFITzxqeoa&#xA;hqQ0WxTlDFtPVA/ORhWighj8I8N65fpMYjHjLOI6ozyl5Hm065jv7mT05krxjXdjUUoxGwHtvkNR&#xA;qhIcIRKTNMwWLsVdirsVdirsVdirxr8xm88P5yvJTfajZ6JZwQx6ZaaVP9U9cXCUnmllKyc5RJVI&#xA;0C7bNVa1OPnySFCNDzO/2NmHTmdneh3PX7EMtlbh2ZnESBmc8mJ4ipY7VPvl4NtZFGlbCrsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVYn5v8wXUNwNOs5DCQoa4mXZ/i6Ip/Z23JGZ2lwCQ4iyiE&#xA;L5Jvr9tUktnmkmt2haRhK7PxdWUAgsSRXkdslrMcREEDdMgyhNR0LULmfT0urW7ubZqXNoJI5HjY&#xA;fzxgkqfmMwakN+TBE/U7P/fEf/AL/TBxHvVekcca8Y1CL1ooAH4YCbVZHaWsczzRxIk0n95IqgM3&#xA;zOEyJFWqrgV2KuxV2KuxV2KrLi4ht4JJ53EcMSlpHbYADcnEC2E5iIJOwDy7zF+ZOpXczQ6UxtLQ&#xA;bCSg9V/eprx+jfM/HpgOe5eU1nbWSZrH6Y/b+xjUmu6rMytcXMlw8bc4Xld3aNvFCTtXuOh6HbDk&#xA;0sJEEjk0aftnUYoyAlfF32SPd3My8v8A5oyIFg1qP1B0F3EAG/2abA/NfuyGTS/zXO0nbpG2UX5j&#xA;9IZvL5g0iO2a4+sKyKhfiD8RAFaAGm/zzXHLHvetjp8h6F2ha9pmu6emoadIZbWT7DkFSfoOSjIF&#xA;hPGY1fVMMkwdirsVdirsVdirsVdirsVdirsVdirsVUb28trK0mu7qQRW8CGSWQ9AqipOAmkxFmnl&#xA;+jarJ561q+udOiFrBGQkn1hxy5xqqsAqcmrTiSCBT57ZmafWwjERP1N8sZiL6XXxeh6FoNvpMDBW&#xA;9W4lp60xFK06ADeiiuVZsxmWgm3j0nkMXX5r/pCC6FpeWmqm+uHRwnK3Z/VoSOXxsCF4mlVJ675i&#xA;Q15iTGVcPLdzZ6ePhiQ5vc1dHFVYMPEGuTjIS5G3BII5t5JXYq7FXYq7FXYq7FXYqxzznPE9munu&#xA;odZ/ilU/yqaj/hh+GUZsxhXDzcrT6KGeJGQXDueZa9o8NgkMsZYLcFuCNvslKkHwqc2Oh1E8gPEO&#xA;Tx/tD2Xg0ko+GTcv4edfFJ8znm2RaR5K1u+SxvI4leyumJMnIfCFYg8x1349q5j5swAIH1O30HZs&#xA;5zxzkP3ZO/uBZ5F5JW4Ro9SZXgb7UKjkGoa78hT8M0cNMepfR8vaAIqIv3pj5X8p6R5asntNMEgi&#xA;kYO5lcuagcRToAABTYZlCNOtnPiTnJMXYq7FXYq7FXYqtllihjaSV1jjQVZ3IVQPcnEBjKQAs7BI&#xA;dU8++V9O0y81B7o3EVivKWO1RppGJ2VUVAeRY7eHjhlExIB2trw54ZRIwPFw8680s8q/m75F8zaW&#xA;2oWN60KRS/V54LmNopo5KcgrL8XbuCRhECTQY5NTCEeKRoXXxZda3lpdxCa1mSeI9HjYMv3jAQRz&#xA;bMeSMxcSCPJVwNjsVdiqje2kV5aTWspYRTqUfiaHi2xocQVBo2GEav5OtdC4XehQfVrdFVGWKvKP&#xA;hXieX2iPiO57/PNdqcRB4g7nQ6iMhwSq/vRNprN7dWQN3PUBuFTRQa0Cg0pUkmmabW6jJI8NmqbJ&#xA;6eEJbBwtbYTm4ESCdtmlCjmRSm7de2YHiSrhs13Ksv7q4tbYzQOY5Ay8XXqN8yNGSMgIZY4CRo7h&#xA;PPLOvtqcLxzgC6hpypsGU/tU/XnUafPxjfm63W6TwjY+kp3mS4TsVdirsVdirsVYt5i8/aRo7PHP&#xA;PHDIhKlXPKQkEj4Ykq1D2Y5hnNlySMcMDIjqdooyZMWIXkkI+XX5MG8x+eIZNKbVbedbiaTjFACA&#xA;aNStGUceNBuff55PDpMk8ohkvzcvN2jixaQ5MUhvyvv93e6z8wSa5oenyX1uGuIIWt2Mi0UkNtKg&#xA;FAapT2rXIdoT8LJw4zsB0PJs7FwjVafizwsk/wAURv8AMcvcoro0FwxEaBSo5M3IIAK0qSx4jc5T&#xA;i7SzjrfvbNV7M6Ce/Bwn+iT924+x6f5PkgPl+1ii/wCPcGFxWvxKfEeNa5nYs/ijiPNwMmiGmrHG&#xA;+EDa+ac5YwdirsVdirsVdirsVdiryj8yr6+fzEbS4L/UYljaGIHiGDCrN3FeVVrTtmw00Rw31eP7&#xA;byzObhP0iqSfT20V7e8tW9b1LgxNbRuYwgaJhJSSRpIAfiHitR4VyrWYZTAI6fpcnsHX4sEpQlsJ&#xA;18OG+thfqll5SguLqS3kmS/v7iO41B4RHNAOEKxKkRDRg8VUfTXBpMMo7nube3O0cOb93A8pXY3H&#xA;Ku9HeQrqWLzbDDYvJ9Un5rKj0+JFQsC4G1QRl+oA4N3W9kTkNQBH6Tz+T17Nc9o7FXYq7FXYql+p&#xA;adZPZzN6CcgA4PEdUIYH6KZga3TxOOUgPVTkYcsuIAnZjDahYKQrXMQYmgBdakntSuc1HSZpcoSP&#xA;wLly12CPOcB/nBOfLN3Y30F1HE6XEQKiQCjL8QOx+7N92ZpsmOMhOJF97hZNXjym8chKu5jWvve+&#xA;VNViubCISx3cgigR24x0c1ZHejceNNvHYdcslA4p2OTtYZRqMXDL6vxuz60lkmtopZE9N3UMyb7E&#xA;itNwD+GbCJsW6bJECRAVckxdirsVdirsVSnUvKXlnU5jPf6Zb3E7UDTNGOZp0qwoxyccso8i4+TT&#xA;Y5m5RBLHNV/LPy2kBvLfT19e1q0UURIDR7sV4tyXkCSQaE/hTElPOISuRNm9u6uTlaXS6YZYngjs&#xA;K33A866/juY+92jwPCYURdjDwFOLA71Y1YggnqfDNOZ2Kp64YyCDbVhvdLGek1Yj4fvBxBPyJrjD&#xA;nXenN9N92/yT7yNqXoag9m5/d3Iqn/GRdx94rmVoclS4e91/auHihxDnH7meZtnnnYq7FXYq7FXY&#xA;q7AqSzeabRJiiRNIo/bqBWncDNJk7cxiVCJI73PjoJEbmlHUtP8AL3ma2CXNVliBKSAhJYx33NQR&#xA;94zaaLtKGT6Dv3H8fc6rtDsuMx+8HLqPx97x27eB7hzbrxhFFjB6lVAUMfdqVPvnQB8+nV7ckTou&#xA;iX+s3v1SyVTKFLsXPFVUEAkn5sMjOYiLLdptLPPLhhzereUfJttoMbTSOJ7+UcXlAoqr14pX8Tmv&#xA;zZjP3PW9ndmx04s7zP42ZHlLtHYq7FXYq7FWI/mTrv1HR/qMTUub+qGnURD7Z/2X2fvzI02O5X3O&#xA;l7a1Xh4uAfVP7uryyyt2uLlI1bgPtPIN+CqKs1PYDpmwLyUI2XoPl3zLbaZc3ED2xlWZ+dw9sA0k&#xA;Ug2KPEArMF2q4rVq+NBi5sRluHf9n6+OEmJHPu6fD9LOUazv7SOTiJreZVkTkvUHcGjCoOYEo9C9&#xA;Piy7CUTzH3q3wqtTRVUfIADClqKWKVA8TrIh6MpBH3jFFrsUuxV2KuxV2KuxVg/mjyrPFcNeWERk&#xA;gk+KSJBUo3chR+yfwzV6nSkHiiNnf6DXgjhmdx1SKysrpLhJ5IZFhgIklfg1Aqb9ad6UGYsIG7rY&#xA;OflyxMaBFnZCwTSQTRzRmkkbB0PgVNRlcTRsNs4iQIPIvWLC8jvLOG6j+xKoange4+g7Zv4TEogh&#xA;4/LjMJGJ6K+TYOxV2KuxV2KrZV5ROvTkpFfmMhkFxI8kxNEMJjsoiySyoGljJMZIBKkgqSPoOcJA&#xA;EfF30pWiGUMCCKggg/I7ZZGRiQRsQ1yiJAg8ix3UPJdjNV7Rzbv/ACH4kP37jN/pfaHLDbIOMfIv&#xA;M6z2Xwz3xHgPdzH6x+Nkz/LfQLyw1K/mulAKxJHGykEMHYk0PX9gZvRr8eohcD7/ACdf2b2Xl02W&#xA;XiDpt5/imf5F3bsVdirsVdirsVeR+ekub/Xrm4if1YoqRRp0KhBQgePxVOT0/aGMHgO3m6ntb2e1&#xA;OT99D1ivp6j9f3+SzQ9A1hra5axg53kUYklLGnEmjRxrt/eD+8Ir1C9xQ7CeWIq3ntPosshLhHqj&#xA;z/V7+vyY41pdJdC2eJ0uCwT0mUq3ImgFDvlnEKtwBilx8JFSumaw6Vr0TUitrlGH7QVx0985AwyE&#xA;k0X2qGTDGAjcaAro8t/5y0tdYbSvJSCO4eFIL03YAdlEy+nITJSo5CNWap/ZB7A5u9N9Avm8pr98&#xA;siPpvZ7N+Q+rNqv5M+Vbg8ibe1azYnjxBtppIANt68Ygd+1PfJZQw0x5hnOVOU7FXYq7FXYq7FXY&#xA;qtkjSWN43HJHBVlPcEUIwEWKTEkGw8xvNI+qX09tKZKxuQnCPlyXqpqSoFQc0c8XDIgvVY9RxwEh&#xA;W/myzybPw0+WIjhBHLxQtIkjBm+0pCgcfHfxzYaY8EPVsOjpe0DGeT0kGXWmSZmuudirsVdiqEvN&#xA;X0mykSO9vYLaSQVRJpUjLAdwGIrkhAnkGueWMdiQEDqes2sitbWk8cr/AO7vTdWKjwNCaVzT9r55&#xA;44iABHF1czRCEySCDSUO6opdyFRQSzE0AA6knOaAJNB2hIAspRYXUc817PoxOqrJIjzxQSLII2K8&#xA;KilQoYJ0PvmzwaDLlkITicdA1IxPv3ccanEQTGUZe4gpxDHeutXsriI/yvGSf+F5YcnY2eJ24Ze4&#xA;j9NJGqh3tQ6x5lsy8VvoMksfKolZ+Jb6KGmdH2doIYsVSkOI7lws8xOVp3oWpatfLMdQ042BQj06&#xA;uG51rXagIpmTlhGPI20EJrlSHYq7FXYqpXpuktJmt4mkuAjGKNQSS1NtsjO6Nc2WPhMhxGhbA/Le&#xA;iyXerFbmMrHbfHOjgg1/ZUg+JzV6fDxT36O/1mpEMfpP1cnoNB9+bZ51Tlt7eUqZYkkKEFCyhqEG&#xA;oIriCWMoRPMWqYs0B5g0e31rRLvSpzwW5Wkc1AxikG6SKp2JU9jsRsdicMZU1zgJPP8A/nHbQPMH&#xA;lryZqnljXbdoLnSdVuBbSOGVJraVIiksBO0iM4fft061yyZBDRhiYyovT8qct2KuxV2KuxV2KuxV&#xA;2KvPfzh03Xb6w09NI9RnDyCeOJwnJCFpyqVqARk8efDiPFlod1uDrsefJERw350aeaaLoX5haLct&#xA;cadaPFI4CuCYnVgGDbqzFT08MOo7Q0OYATkCAb6/qdbptBrsJMoRIJ9z2LyX5o17Ua2mu6Z9Ru1W&#xA;qTxsGikp1HEFih7+GUfmMEzWOXF83cYPHr97Dh82V5NyHYq7FUu1vy7ouuWbWeqWiXMDHkCfhlja&#xA;gHKKQfEp2Hse4y7FmMHD1OkjlG7ynzJ5C85+Wmhv9Au5dU0ux5MkdK3ECPx5JLEN3j+AbpVdifhz&#xA;KyRxaiBhMc/x83TeHn00xKBO34+IZdrHk/XNb0mK0OoRaWZlH14LHPMxqu8aninw12Pj8uui7O7N&#xA;hgymcjxV9P6z5u91+oy6jEIRHBf1fq9yv5E/LY+ULm4nXV/r63cYSSBYDEqsjVVuRkauxI+z3zca&#xA;jOJgOFoNFLDIknYhmWYjtXYq7FXYq7FXYqwn8xYvzmdEPkFdJWAI3rG+d/rTMKGsQIFuqKP52qT7&#xA;ZZCILj5csgaD5/8AzHm/5yiml0+81DT9Xs305CfrWjyPLA5ND6pFizRLt3Pid6UAtAcUyJe4fkJ5&#xA;k87+YvIKal5wcy6l9Zmgt55IhDK9vDxVTKoCgsJPUWtOg8cpyc3L0/0vRsg3uxV2KuxV2KuxV2Ko&#xA;r9G3PgPvyfhlo8eLv0bc+A+/Hwyvjxd+jbnwH34+GV8eLv0bc+A+/Hwyvjxd+jbnwH34+GV8eLv0&#xA;bc+A+/HwyvjxWS6O8y8JokkWteL0YV+RyMsNiiLT+Yipf4bt/wDlkg/4BP6ZD8pH+aPkn8yO8r4d&#xA;CELFoYIo2IoWQKpp4bDJR04jyACDqIqv6NufAffk/DKPHi79G3PgPvx8Mr48Xfo258B9+PhlfHi7&#xA;9G3PgPvx8Mr48XHTLg9VU06b4iBQc0Dzd+jbnwH34+GU+PF36NufAffj4ZXx4u/Rtz4D78fDK+PF&#xA;36NufAffj4ZXx4u/Rtz4D78fDK+PF36NufAffj4ZXx4u/Rtz4D78fDK+PF36NufAffj4ZXx4u/R1&#xA;14D78fDK+PFcLG9BrtU8epr9g8l6+B6YRGTE5MZabTrosWIFWJY79yanEwJSM0AKDX6NufAffg8M&#xA;p8eLv0bc+A+/Hwyvjxd+jbnwH34+GV8eLv0bc+A+/Hwyvjxd+jbnwH34+GV8eLv0bc+A+/Hwyvjx&#xA;d+jbnwH34+GV8eL/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:abd098fd-ddd4-4241-a6bf-5c6120de9d34"
    stRef:documentID="xmp.did:abd098fd-ddd4-4241-a6bf-5c6120de9d34"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:abd098fd-ddd4-4241-a6bf-5c6120de9d34"
      stEvt:when="2021-12-17T16:44:17+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:ffe1ea72-12d3-504a-9c74-1f2c94873555"
      stEvt:when="2021-12-17T16:44:21+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="2692.000000"
    stDim:h="1486.554301"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -1486.55 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1486.55 li
2692 1486.55 li
2692 0 li
cp
clp
2692 1486.55 mo
-2.73009e-05 1486.55 li
-2.73009e-05 0 li
2692 0 li
2692 1486.55 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .870588 .843137 rgb
f
1466.42 267.773 mo
1466.42 267.773 1460.13 245.098 1464.09 238.483 cv
1468.04 231.868 1477.69 225.125 1485.99 227.008 cv
1494.3 228.89 1480.26 240.295 1480.26 240.295 cv
1480.26 240.295 1488.95 259.612 1483.24 268.718 cv
1477.52 277.822 1466.42 267.773 1466.42 267.773 cv
cp
.956863 .517647 .384314 rgb
f
1257.52 269.876 mo
1257.52 269.876 1263.81 247.2 1259.86 240.586 cv
1255.9 233.971 1246.25 227.228 1237.95 229.11 cv
1229.65 230.993 1243.68 242.397 1243.68 242.397 cv
1243.68 242.397 1234.99 261.715 1240.71 270.82 cv
1246.42 279.925 1257.52 269.876 1257.52 269.876 cv
cp
f
1592.04 188.641 mo
1578.67 188.641 li
1586.35 278.869 li
1596.66 278.869 li
1592.04 188.641 li
cp
.576471 .368627 .588235 rgb
f
1584.34 234.268 mo
1585.62 259.184 1591.13 279.152 1596.66 278.869 cv
1602.19 278.586 1605.64 258.159 1604.36 233.243 cv
1603.08 208.327 1597.57 188.358 1592.04 188.641 cv
1586.51 188.924 1583.07 209.352 1584.34 234.268 cv
cp
f
1577.96 174.811 mo
1568.2 175.776 li
1574.16 292.146 li
1583.92 291.18 li
1577.96 174.811 li
cp
f
1570.6 233.524 mo
1572.25 265.659 1578.21 291.473 1583.92 291.18 cv
1589.63 290.888 1592.92 264.601 1591.27 232.466 cv
1589.63 200.332 1583.67 174.519 1577.96 174.811 cv
1572.25 175.103 1568.96 201.39 1570.6 233.524 cv
cp
f
1560.84 234.489 mo
1562.49 266.624 1568.45 292.438 1574.16 292.146 cv
1579.86 291.853 1583.16 265.565 1581.51 233.432 cv
1579.87 201.297 1573.91 175.484 1568.2 175.776 cv
1562.49 176.068 1559.2 202.354 1560.84 234.489 cv
cp
.654902 .435294 .658824 rgb
f
1504.35 230.893 mo
1505.56 233.063 1512.3 251.349 1504.03 269.745 cv
1495.76 288.142 1475.43 275.256 1475.43 275.256 cv
1475.54 241.268 li
1504.35 230.893 li
cp
.956863 .517647 .384314 rgb
f
1219.59 232.995 mo
1218.39 235.167 1211.64 253.451 1219.91 271.848 cv
1228.18 290.244 1248.51 277.359 1248.51 277.359 cv
1248.41 243.37 li
1219.59 232.995 li
cp
f
1134.06 252.053 mo
1134.16 252.053 1568.71 239.417 1568.71 239.417 cv
1570.61 239.359 1572.1 237.781 1572.05 235.884 cv
1571.99 234.023 1570.46 232.553 1568.62 232.553 cv
1568.51 232.553 1133.96 245.188 1133.96 245.188 cv
1132.07 245.245 1130.58 246.824 1130.63 248.721 cv
1130.69 250.581 1132.21 252.053 1134.06 252.053 cv
cp
1 1 1 rgb
f
1408.8 327.249 mo
1379.71 315.595 li
1367.43 310.902 li
1346.17 318.803 li
1357.3 456.497 li
1357.3 456.497 1390.8 465.636 1412.92 453.972 cv
1435.03 442.309 1408.8 327.249 1408.8 327.249 cv
cp
.156863 .423529 .486275 rgb
f
1316.67 316.702 mo
1323.25 312.651 1342.62 311.24 1360.47 311.819 cv
1360.47 311.819 1357.38 376.365 1361.2 416.494 cv
1363.36 439.177 1364.67 454.96 1365.4 464.408 cv
1338.86 464.999 1309.21 464.254 1309.21 464.254 cv
1309.21 464.254 1297.73 328.367 1316.67 316.702 cv
cp
f
1437.79 456.97 mo
1437.79 456.97 1422.42 461.39 1406.04 464.254 cv
1405.98 446.404 1402.06 404.122 1399.21 377.65 cv
1395.54 343.796 1388.67 316.702 1388.67 316.702 cv
1360.62 311.178 li
1363.64 310.958 1366.04 310.902 1367.43 310.902 cv
1368.26 310.902 1368.74 310.931 1368.74 310.931 cv
1368.74 310.931 1402.46 312.308 1418.41 320.819 cv
1418.41 320.819 1418.81 321.04 1419.53 321.426 cv
1422.25 323.051 1424.39 324.924 1425.57 327.045 cv
1430.22 335.392 1437.79 456.97 1437.79 456.97 cv
cp
f
1401.57 255.633 mo
1401.57 255.633 1415.64 233.118 1404.52 227.958 cv
1393.39 222.798 1379.71 235.018 1379.71 235.018 cv
1379.71 235.018 1354.54 236.672 1344.7 249.904 cv
1334.85 263.137 1357.77 287.229 1357.77 287.229 cv
1401.57 255.633 li
cp
0 0 0 rgb
f
1362.11 292.435 mo
1360.15 315.537 li
1359.13 313.918 1363.53 322.174 1377.18 324.776 cv
1387.14 326.675 1390.91 324.472 1390.91 324.472 cv
1390.5 312.651 li
1390.08 301.123 li
1366.13 293.687 li
1362.11 292.435 li
cp
.956863 .517647 .384314 rgb
f
1366.13 293.687 mo
1366.13 294.322 1366.31 295.087 1366.61 295.973 cv
1370.8 307.951 1384.73 311.638 1390.5 312.651 cv
1390.08 301.123 li
1366.13 293.687 li
cp
0 0 0 rgb
f
1399.7 248.898 mo
1399.7 248.898 1409.37 278.894 1403.22 294.582 cv
1397.08 310.271 1382.63 306.254 1374.14 302.25 cv
1365.65 298.245 1362.11 292.439 1362.11 292.439 cv
1362.11 292.439 1353.61 294.401 1348.88 286.205 cv
1344.15 278.009 1348.41 269.57 1353.31 268.03 cv
1358.21 266.49 1363.45 270.439 1363.45 270.439 cv
1359.91 261.649 li
1359.91 261.649 1382.58 221.06 1399.7 248.898 cv
cp
.956863 .517647 .384314 rgb
f
1361.61 282.849 mo
1361.4 282.849 1361.18 282.775 1361.01 282.625 cv
1351.24 274.258 li
1350.84 273.924 1350.8 273.338 1351.13 272.947 cv
1351.47 272.558 1352.06 272.514 1352.44 272.846 cv
1362.22 281.213 li
1362.61 281.547 1362.65 282.133 1362.32 282.523 cv
1362.14 282.737 1361.87 282.849 1361.61 282.849 cv
cp
0 0 0 rgb
f
1352.14 281.915 mo
1351.69 281.915 1351.3 281.595 1351.22 281.141 cv
1351.13 280.635 1351.48 280.155 1351.98 280.069 cv
1358.99 278.887 li
1359.52 278.798 1359.97 279.143 1360.06 279.649 cv
1360.14 280.155 1359.8 280.635 1359.3 280.72 cv
1352.29 281.902 li
1352.24 281.912 1352.19 281.915 1352.14 281.915 cv
cp
f
1396.14 281.915 mo
1396.07 281.915 1395.99 281.906 1395.92 281.89 cv
1395.42 281.771 1395.12 281.268 1395.24 280.769 cv
1396.87 273.973 1392.79 269.904 1392.62 269.733 cv
1392.25 269.376 1392.24 268.788 1392.6 268.42 cv
1392.96 268.054 1393.55 268.048 1393.91 268.396 cv
1394.11 268.594 1398.93 273.341 1397.04 281.204 cv
1396.94 281.629 1396.56 281.915 1396.14 281.915 cv
cp
f
1400.85 271.357 mo
1400.41 271.357 1400.01 271.044 1399.93 270.598 cv
1398.93 265.177 li
1398.84 264.673 1399.18 264.188 1399.68 264.094 cv
1400.16 264.003 1400.67 264.337 1400.76 264.84 cv
1401.76 270.26 li
1401.85 270.765 1401.52 271.249 1401.01 271.344 cv
1400.96 271.353 1400.9 271.357 1400.85 271.357 cv
cp
f
1386.2 270.405 mo
1385.76 270.405 1385.37 270.091 1385.29 269.645 cv
1384.29 264.223 li
1384.2 263.718 1384.53 263.233 1385.04 263.14 cv
1385.52 263.049 1386.02 263.383 1386.12 263.886 cv
1387.12 269.308 li
1387.21 269.812 1386.87 270.297 1386.37 270.391 cv
1386.31 270.399 1386.26 270.405 1386.2 270.405 cv
cp
f
1401.57 255.633 mo
1401.57 255.633 1399.46 250.775 1393.7 250.248 cv
1387.94 249.72 1384.23 253.493 1384.23 253.493 cv
1384.23 253.493 1385.94 263.412 1377.66 267.904 cv
1369.39 272.396 1363.45 270.439 1363.45 270.439 cv
1357.93 267.932 li
1354.47 259.271 li
1372.41 242.943 li
1394.65 233.513 li
1404.66 244.278 li
1401.57 255.633 li
cp
f
1383.46 286.622 mo
1383.68 287.864 1384.15 288.715 1384.87 289.158 cv
1385.65 289.637 1386.68 289.607 1387.57 289.421 cv
1383.46 286.622 li
cp
1386.43 291.406 mo
1385.59 291.406 1384.71 291.235 1383.9 290.743 cv
1382.28 289.747 1381.46 287.734 1381.46 284.767 cv
1381.46 284.421 1381.65 284.105 1381.95 283.944 cv
1382.26 283.786 1382.62 283.801 1382.91 283.999 cv
1390.15 288.933 li
1390.43 289.118 1390.58 289.432 1390.56 289.761 cv
1390.54 290.089 1390.35 290.381 1390.05 290.529 cv
1389.95 290.58 1388.29 291.406 1386.43 291.406 cv
cp
f
1379.71 235.018 mo
1379.71 235.018 1380.04 222.169 1366.13 226.687 cv
1352.22 231.205 1351.84 248.739 1351.84 248.739 cv
1379.71 235.018 li
cp
f
1398.06 260.093 mo
1397.65 260.093 1397.28 259.82 1397.17 259.406 cv
1397.03 258.911 1397.32 258.401 1397.82 258.267 cv
1402.09 257.107 li
1402.57 256.977 1403.09 257.268 1403.23 257.761 cv
1403.36 258.256 1403.07 258.766 1402.57 258.9 cv
1398.3 260.06 li
1398.23 260.082 1398.14 260.093 1398.06 260.093 cv
cp
f
1388.68 260.556 mo
1388.57 260.548 1382.13 259.782 1382.13 259.782 cv
1381.62 259.723 1381.25 259.26 1381.32 258.752 cv
1381.38 258.241 1381.85 257.871 1382.35 257.938 cv
1388.79 258.704 li
1389.3 258.764 1389.66 259.227 1389.6 259.735 cv
1389.54 260.209 1389.14 260.556 1388.68 260.556 cv
cp
f
1444.88 314.011 mo
1444.88 314.011 1455.91 305.898 1460.32 297.298 cv
1464.73 288.698 1466.42 267.773 1466.42 267.773 cv
1500.1 272.504 li
1500.1 272.504 1517.44 323.531 1492.86 354.688 cv
1469.46 384.346 1440.14 385.685 1440.14 385.685 cv
1444.88 314.011 li
cp
.956863 .517647 .384314 rgb
f
1390.5 312.651 mo
1390.5 312.651 1410.97 313.594 1425.11 311.558 cv
1439.25 309.521 1447.81 307.852 1447.81 307.852 cv
1447.81 307.852 1457.83 324.734 1468.37 346.01 cv
1476.68 362.786 1483 372.482 1483 372.482 cv
1483 372.482 1451.23 398.837 1424.98 396.336 cv
1407.25 394.647 1390.5 312.651 1390.5 312.651 cv
cp
.156863 .423529 .486275 rgb
f
1279.06 315.547 mo
1279.06 315.547 1268.04 307.435 1263.63 298.835 cv
1259.21 290.234 1257.52 269.876 1257.52 269.876 cv
1222.99 276.764 li
1222.99 276.764 1206.5 325.067 1231.08 356.225 cv
1254.48 385.882 1283.81 387.221 1283.81 387.221 cv
1279.06 315.547 li
cp
.956863 .517647 .384314 rgb
f
1352.14 311.697 mo
1352.14 311.697 1314.3 313.69 1298.83 313.093 cv
1284.56 312.542 1276.13 309.388 1276.13 309.388 cv
1276.13 309.388 1266.11 326.271 1255.57 347.546 cv
1247.26 364.323 1240.94 374.019 1240.94 374.019 cv
1240.94 374.019 1301.21 414.426 1327.14 391.545 cv
1351.78 369.801 1352.14 311.697 1352.14 311.697 cv
cp
.156863 .423529 .486275 rgb
f
1493.72 231.589 mo
1493.72 231.589 1491.64 216.656 1484.86 221.425 cv
1478.09 226.195 1475.43 253.361 1483.59 256.058 cv
1491.74 258.755 1493.72 231.589 1493.72 231.589 cv
cp
.956863 .517647 .384314 rgb
f
1506.12 232.917 mo
1506.12 232.917 1504.05 217.984 1497.27 222.754 cv
1490.49 227.523 1487.84 254.689 1495.99 257.386 cv
1504.15 260.082 1506.12 232.917 1506.12 232.917 cv
cp
f
1516.67 241.331 mo
1517.66 238.09 1517.92 234.636 1517.11 231.343 cv
1516.39 228.401 1514.85 225.852 1511.53 227.42 cv
1504.9 230.557 1498.5 253.847 1505.2 257.427 cv
1510.2 260.097 1514.7 247.775 1516.67 241.331 cv
cp
f
1228.7 234.817 mo
1228.7 234.817 1230.77 219.885 1237.55 224.653 cv
1244.33 229.423 1246.98 256.59 1238.82 259.286 cv
1230.67 261.982 1228.7 234.817 1228.7 234.817 cv
cp
f
1216.29 236.146 mo
1216.29 236.146 1218.37 221.212 1225.15 225.981 cv
1231.92 230.751 1234.58 257.918 1226.42 260.614 cv
1218.27 263.311 1216.29 236.146 1216.29 236.146 cv
cp
f
1205.74 244.56 mo
1204.75 241.318 1204.5 237.863 1205.3 234.57 cv
1206.02 231.629 1207.57 229.08 1210.88 230.648 cv
1217.51 233.785 1223.92 257.074 1217.21 260.655 cv
1212.22 263.324 1207.71 251.004 1205.74 244.56 cv
cp
f
1531.11 726.503 mo
1531.07 736.01 li
1548.26 736.08 li
1548.3 726.573 li
1531.11 726.503 li
cp
0 0 0 rgb
f
1563.27 726.635 mo
1563.23 736.142 li
1580.42 736.212 li
1580.46 726.705 li
1563.27 726.635 li
cp
f
1499.92 726.375 mo
1499.88 735.882 li
1517.06 735.952 li
1517.1 726.445 li
1499.92 726.375 li
cp
f
1467.66 726.243 mo
1467.62 735.75 li
1484.63 735.819 li
1484.66 726.313 li
1467.66 726.243 li
cp
f
1464.05 696.257 mo
1465.8 713.621 li
1467.08 726.241 li
1613.29 726.84 li
1613.29 726.84 1613.52 721.112 1611.9 714.22 cv
1609.97 706.112 1605.45 696.393 1594.92 692.538 cv
1558.78 679.31 1528.8 660.606 1524.36 656.182 cv
1522.35 654.182 1519.36 653.216 1516.39 653.659 cv
1471.11 661.67 li
1467.01 662.281 1463.96 665.387 1463.8 669.101 cv
1463.31 681.214 li
1463.1 686.237 1463.35 691.273 1464.05 696.257 cv
cp
.247059 .619608 .592157 rgb
f
1465.8 713.621 mo
1467.08 726.241 li
1467.66 726.243 li
1467.62 735.75 li
1484.63 735.819 li
1484.66 726.313 li
1499.92 726.375 li
1499.88 735.882 li
1517.06 735.952 li
1517.1 726.445 li
1531.11 726.503 li
1531.07 736.01 li
1548.26 736.08 li
1548.3 726.573 li
1563.27 726.635 li
1563.23 736.142 li
1580.42 736.212 li
1580.46 726.705 li
1596.31 726.771 li
1596.27 736.276 li
1613.25 736.346 li
1613.29 726.84 li
1613.29 726.84 1613.52 721.112 1611.9 714.22 cv
1465.8 713.621 li
cp
1 1 1 rgb
f
1190.36 650.543 mo
1183.44 644.03 li
1171.66 656.555 li
1178.58 663.067 li
1190.36 650.543 li
cp
0 0 0 rgb
f
1168.33 673.97 mo
1161.41 667.457 li
1149.63 679.981 li
1156.55 686.494 li
1168.33 673.97 li
cp
f
1211.73 627.819 mo
1204.81 621.307 li
1193.04 633.822 li
1199.96 640.335 li
1211.73 627.819 li
cp
f
1233.83 604.317 mo
1226.91 597.805 li
1215.26 610.195 li
1222.18 616.708 li
1233.83 604.317 li
cp
f
1258.22 622.132 mo
1244.33 611.571 li
1234.23 603.899 li
1134.06 710.413 li
1134.06 710.413 1138.09 714.488 1144.24 718.002 cv
1151.49 722.12 1161.67 725.447 1171.68 720.375 cv
1206 702.966 1249.07 694.594 1255.33 694.369 cv
1258.17 694.262 1260.91 692.732 1262.62 690.256 cv
1278.7 650.888 li
1281.05 647.473 1280.86 643.121 1278.25 640.477 cv
1269.73 631.85 li
1266.19 628.274 1262.34 625.018 1258.22 622.132 cv
cp
.247059 .619608 .592157 rgb
f
1244.33 611.571 mo
1234.23 603.899 li
1233.83 604.317 li
1226.91 597.805 li
1215.26 610.195 li
1222.18 616.708 li
1211.73 627.819 li
1204.81 621.307 li
1193.04 633.822 li
1199.96 640.335 li
1190.36 650.543 li
1183.44 644.03 li
1171.66 656.555 li
1178.58 663.067 li
1168.33 673.97 li
1161.41 667.457 li
1149.63 679.981 li
1156.55 686.494 li
1145.7 698.04 li
1138.77 691.527 li
1127.13 703.901 li
1134.06 710.413 li
1134.06 710.413 1138.09 714.488 1144.24 718.002 cv
1244.33 611.571 li
cp
1 1 1 rgb
f
1256.96 699.956 mo
1256.96 699.956 1378.86 721.433 1424.87 703.139 cv
1482.38 680.267 1409.41 521.469 1409.41 521.469 cv
1409.41 521.469 1309.74 474.281 1306.86 495.872 cv
1303.98 517.475 1326.25 607.701 1325.77 612.36 cv
1325.41 615.95 1260.02 614.804 1260.02 614.804 cv
1256.96 699.956 li
cp
1 .729412 .341176 rgb
f
1298.12 632.328 mo
1281.45 632.328 1265.33 631.918 1259.42 631.749 cv
1258.91 631.734 1258.5 631.307 1258.52 630.793 cv
1258.53 630.281 1258.94 629.818 1259.47 629.891 cv
1298.33 630.996 1340.91 630.606 1343.31 627.693 cv
1345.38 624.312 1335 576.747 1327.97 547.566 cv
1327.85 547.067 1328.16 546.564 1328.66 546.444 cv
1329.16 546.331 1329.66 546.632 1329.78 547.131 cv
1332.85 559.865 1347.99 623.65 1344.89 628.681 cv
1343.09 631.613 1320.11 632.328 1298.12 632.328 cv
cp
.654902 .435294 .658824 rgb
f
1312.1 528.281 mo
1324.08 564.711 1352.61 566.476 1388.55 564.559 cv
1424.5 562.642 1450.62 562.476 1450.62 562.476 cv
1455.91 668.596 li
1550.54 662.8 li
1550.54 662.8 1556.32 479.717 1532.12 462.472 cv
1501.18 440.434 1389.52 453.467 1389.52 453.467 cv
1312.39 457.53 li
1312.39 457.53 1300.12 491.863 1312.1 528.281 cv
cp
1 .729412 .341176 rgb
f
1471.12 668.387 mo
1470.63 668.387 1470.21 667.997 1470.19 667.5 cv
1464.91 548.292 li
1457 548.423 1399.77 549.336 1381.07 548.275 cv
1379.07 548.163 1377.06 548.072 1375.05 547.981 cv
1356.6 547.15 1337.52 546.292 1327.3 527.97 cv
1316.21 508.083 1324.65 458.749 1325.01 456.658 cv
1325.09 456.153 1325.54 455.794 1326.09 455.903 cv
1326.59 455.99 1326.93 456.472 1326.84 456.978 cv
1326.75 457.483 1318.16 507.753 1328.93 527.066 cv
1338.64 544.481 1357.19 545.318 1375.13 546.125 cv
1377.15 546.216 1379.17 546.307 1381.17 546.421 cv
1401.13 547.554 1465.14 546.434 1465.78 546.42 cv
1466.3 546.42 1466.71 546.81 1466.73 547.307 cv
1472.05 667.416 li
1472.07 667.93 1471.67 668.363 1471.16 668.385 cv
1471.14 668.387 1471.13 668.387 1471.12 668.387 cv
cp
.654902 .435294 .658824 rgb
f
1129.53 190.943 mo
1119.77 191.908 li
1125.73 308.277 li
1135.49 307.313 li
1129.53 190.943 li
cp
.576471 .368627 .588235 rgb
f
1122.18 249.656 mo
1123.82 281.791 1129.78 307.604 1135.49 307.313 cv
1141.2 307.02 1144.49 280.732 1142.85 248.599 cv
1141.2 216.464 1135.24 190.65 1129.53 190.943 cv
1123.83 191.235 1120.53 217.521 1122.18 249.656 cv
cp
f
1112.42 250.621 mo
1114.06 282.756 1120.02 308.569 1125.73 308.277 cv
1131.44 307.985 1134.73 281.698 1133.09 249.563 cv
1131.44 217.429 1125.48 191.616 1119.77 191.908 cv
1114.06 192.2 1110.77 218.487 1112.42 250.621 cv
cp
.654902 .435294 .658824 rgb
f
1107.35 249.64 mo
1108.63 274.556 1114.14 294.524 1119.67 294.241 cv
1125.2 293.958 1128.64 273.531 1127.37 248.615 cv
1126.09 223.699 1120.58 203.73 1115.05 204.014 cv
1109.52 204.297 1106.07 224.724 1107.35 249.64 cv
cp
.576471 .368627 .588235 rgb
f
1103.16 250.049 mo
1104.42 274.645 1109.92 294.354 1115.45 294.071 cv
1120.97 293.788 1124.44 273.62 1123.18 249.024 cv
1121.92 224.429 1116.42 204.719 1110.89 205.002 cv
1105.36 205.285 1101.9 225.453 1103.16 250.049 cv
cp
f
1115.05 204.014 mo
1110.89 205.002 li
1115.45 294.071 li
1119.67 294.241 li
1115.05 204.014 li
cp
f
1496.99 258.416 mo
1496.61 258.416 1496.22 258.378 1495.81 258.3 cv
1490.54 257.271 1489.61 249.559 1489.57 249.232 cv
1489.56 249.154 1489.56 249.076 1489.57 248.998 cv
1492.34 229.111 li
1492.42 228.606 1492.86 228.251 1493.39 228.32 cv
1493.9 228.391 1494.26 228.86 1494.19 229.369 cv
1491.43 249.13 li
1491.56 249.997 1492.51 255.763 1496.17 256.474 cv
1499.93 257.205 1501.09 252.656 1501.14 252.462 cv
1505.21 232.729 li
1505.31 232.229 1505.78 231.896 1506.31 232.007 cv
1506.81 232.111 1507.13 232.603 1507.03 233.104 cv
1502.95 252.874 li
1502.44 254.934 1500.59 258.416 1496.99 258.416 cv
cp
0 0 0 rgb
f
1214.53 261.67 mo
1214.04 261.67 1213.64 261.288 1213.6 260.797 cv
1213.57 260.283 1213.97 259.844 1214.48 259.813 cv
1218.76 259.556 1218.98 254.955 1218.99 254.76 cv
1219 254.304 1219.35 253.927 1219.8 253.87 cv
1220.29 253.819 1220.68 254.096 1220.81 254.529 cv
1220.82 254.589 1222.66 260.518 1226.22 259.708 cv
1229.97 258.866 1230.11 252.734 1230.11 252.673 cv
1227.78 234.939 li
1227.71 234.43 1228.07 233.964 1228.58 233.896 cv
1229.07 233.831 1229.55 234.19 1229.62 234.697 cv
1231.96 252.565 li
1231.97 253.014 1231.79 260.363 1226.62 261.522 cv
1223.41 262.23 1221.33 259.818 1220.17 257.731 cv
1219.35 259.628 1217.67 261.482 1214.59 261.668 cv
1214.57 261.67 1214.55 261.67 1214.53 261.67 cv
cp
f
1219.92 255.72 mo
1219.48 255.72 1219.09 255.411 1219 254.968 cv
1215.38 236.322 li
1215.28 235.818 1215.61 235.33 1216.12 235.232 cv
1216.63 235.131 1217.11 235.466 1217.2 235.967 cv
1220.83 254.612 li
1220.92 255.117 1220.6 255.604 1220.09 255.703 cv
1220.03 255.714 1219.97 255.72 1219.92 255.72 cv
cp
f
1506.13 258.708 mo
1505.19 258.708 1504 258.512 1503 257.733 cv
1501.69 256.716 1501.06 255.01 1501.11 252.665 cv
1501.12 252.151 1501.63 251.798 1502.06 251.758 cv
1502.57 251.771 1502.98 252.197 1502.97 252.709 cv
1502.93 254.433 1503.32 255.631 1504.14 256.268 cv
1505.36 257.218 1507.27 256.721 1507.29 256.717 cv
1507.78 256.589 1508.3 256.868 1508.44 257.361 cv
1508.57 257.855 1508.28 258.369 1507.79 258.507 cv
1507.73 258.522 1507.05 258.708 1506.13 258.708 cv
cp
f
1243.88 274.62 mo
1243.74 274.62 1243.6 274.59 1243.47 274.524 cv
1234.24 269.977 1242.51 249.796 1242.87 248.939 cv
1243.06 248.466 1243.61 248.245 1244.08 248.438 cv
1244.55 248.637 1244.78 249.181 1244.58 249.655 cv
1242.34 255.044 1237.92 269.72 1244.29 272.858 cv
1244.75 273.085 1244.94 273.643 1244.71 274.102 cv
1244.55 274.431 1244.22 274.62 1243.88 274.62 cv
cp
f
1480.06 272.518 mo
1479.78 272.518 1479.51 272.393 1479.33 272.154 cv
1479.01 271.748 1479.09 271.164 1479.5 270.852 cv
1487.35 264.814 1479.31 248.357 1479.23 248.192 cv
1479 247.731 1479.19 247.174 1479.65 246.945 cv
1480.12 246.721 1480.67 246.907 1480.89 247.364 cv
1481.26 248.096 1489.69 265.358 1480.63 272.325 cv
1480.46 272.454 1480.26 272.518 1480.06 272.518 cv
cp
f
1559.06 677.905 mo
1538.27 677.905 li
1537.76 677.905 1537.34 677.489 1537.34 676.976 cv
1537.34 676.462 1537.76 676.047 1538.27 676.047 cv
1559.06 676.047 li
1559.57 676.047 1559.99 676.462 1559.99 676.976 cv
1559.99 677.489 1559.57 677.905 1559.06 677.905 cv
cp
1 1 1 rgb
f
1571.84 685.182 mo
1548.67 685.182 li
1548.15 685.182 1547.74 684.766 1547.74 684.252 cv
1547.74 683.739 1548.15 683.323 1548.67 683.323 cv
1571.84 683.323 li
1572.35 683.323 1572.77 683.739 1572.77 684.252 cv
1572.77 684.766 1572.35 685.182 1571.84 685.182 cv
cp
f
1221.61 702.802 mo
1221.44 702.802 1221.27 702.756 1221.12 702.66 cv
1220.68 702.388 1220.55 701.814 1220.83 701.379 cv
1231.86 683.759 li
1232.13 683.323 1232.71 683.198 1233.14 683.465 cv
1233.57 683.737 1233.7 684.311 1233.43 684.746 cv
1222.4 702.366 li
1222.22 702.647 1221.92 702.802 1221.61 702.802 cv
cp
f
1208.66 705.424 mo
1208.49 705.424 1208.32 705.378 1208.17 705.282 cv
1207.74 705.01 1207.6 704.437 1207.88 704.001 cv
1220.17 684.354 li
1220.45 683.92 1221.03 683.79 1221.45 684.06 cv
1221.89 684.332 1222.02 684.905 1221.75 685.341 cv
1209.45 704.988 li
1209.27 705.27 1208.97 705.424 1208.66 705.424 cv
cp
f
1478.8 532.543 mo
1478.73 532.543 1478.67 532.547 1478.61 532.554 cv
1475.58 532.854 1470.83 539.899 1467.82 545.472 cv
1472.46 543.354 1479.79 539.335 1480.78 535.762 cv
1481.02 534.909 1480.86 534.167 1480.3 533.423 cv
1479.73 532.685 1479.2 532.543 1478.8 532.543 cv
cp
1465.8 548.277 mo
1465.55 548.277 1465.3 548.175 1465.12 547.979 cv
1464.86 547.696 1464.8 547.285 1464.97 546.94 cv
1465.75 545.336 1472.8 531.26 1478.43 530.705 cv
1479.33 530.6 1480.65 530.82 1481.77 532.294 cv
1482.69 533.486 1482.96 534.858 1482.57 536.259 cv
1480.93 542.195 1467.65 547.613 1466.14 548.212 cv
1466.03 548.256 1465.92 548.277 1465.8 548.277 cv
cp
.654902 .435294 .658824 rgb
f
1345.97 630.178 mo
1348.35 635.4 1352.16 641.944 1354.84 642.389 cv
1355.19 642.441 1355.75 642.443 1356.4 641.695 cv
1356.96 641.046 1357.14 640.374 1356.97 639.585 cv
1356.28 636.328 1350.05 632.366 1345.97 630.178 cv
cp
1355.09 644.269 mo
1354.9 644.269 1354.71 644.25 1354.54 644.222 cv
1349.39 643.368 1343.85 630.059 1343.24 628.543 cv
1343.09 628.188 1343.18 627.784 1343.46 627.521 cv
1343.74 627.255 1344.15 627.192 1344.49 627.353 cv
1345.83 627.979 1357.61 633.624 1358.79 639.198 cv
1359.08 640.547 1358.74 641.831 1357.8 642.911 cv
1356.87 643.981 1355.89 644.269 1355.09 644.269 cv
cp
f
1332.31 478.492 mo
1331.88 478.492 1331.5 478.196 1331.4 477.761 cv
1331.29 477.26 1331.61 476.765 1332.11 476.655 cv
1343.76 474.106 1351.09 461.957 1351.16 461.835 cv
1351.43 461.391 1352 461.249 1352.44 461.511 cv
1352.88 461.771 1353.02 462.342 1352.76 462.782 cv
1352.45 463.311 1344.96 475.746 1332.51 478.47 cv
1332.44 478.484 1332.38 478.492 1332.31 478.492 cv
cp
f
1383.13 327.137 mo
1369.16 327.137 1360.03 317.446 1359.93 317.332 cv
1359.58 316.954 1359.6 316.368 1359.98 316.02 cv
1360.36 315.671 1360.95 315.697 1361.29 316.072 cv
1361.41 316.195 1373.1 328.579 1390.09 324.427 cv
1390.59 324.293 1391.09 324.608 1391.21 325.107 cv
1391.33 325.606 1391.03 326.109 1390.53 326.23 cv
1387.94 326.864 1385.46 327.137 1383.13 327.137 cv
cp
1 1 1 rgb
f
1433.51 397.133 mo
1433.02 397.133 1432.61 396.757 1432.58 396.267 cv
1431.29 377.714 li
1431.26 377.202 1431.64 376.76 1432.16 376.724 cv
1432.7 376.692 1433.11 377.077 1433.15 377.587 cv
1434.43 396.14 li
1434.47 396.651 1434.08 397.095 1433.57 397.131 cv
1433.55 397.133 1433.53 397.133 1433.51 397.133 cv
cp
f
1305.9 399.486 mo
1305.39 399.486 1304.98 399.076 1304.97 398.566 cv
1304.83 385.692 li
1304.83 385.181 1305.24 384.761 1305.75 384.755 cv
1306.27 384.755 1306.68 385.165 1306.69 385.675 cv
1306.83 398.548 li
1306.84 399.06 1306.42 399.48 1305.91 399.486 cv
1305.91 399.486 1305.9 399.486 1305.9 399.486 cv
cp
f
1486.59 1035.8 mo
1483 1039.84 li
1483 1039.84 1457.35 1041.96 1443.96 1039.51 cv
1438.33 1038.48 1433.04 1032.96 1442.1 1030.42 cv
1446.98 1029.05 1450.83 1026.16 1450.83 1026.16 cv
1450.83 1026.16 1440.58 1023.41 1432.25 1023.55 cv
1426.92 1023.64 1415.07 1030.13 1413.24 1025.91 cv
1410.33 1019.2 1422.42 1013.21 1422.42 1013.21 cv
1422.42 1013.21 1411.88 1023.86 1409.92 1015.82 cv
1407.96 1007.81 1437.17 992.336 1447.4 990.723 cv
1457.63 989.108 1496.42 1004.39 1496.42 1004.39 cv
1486.59 1035.8 li
cp
.976471 .580392 .490196 rgb
f
1447.15 1018.49 mo
1446.99 1018.49 1446.83 1018.46 1446.68 1018.38 cv
1438.74 1014.35 1427.38 1016.43 1427.26 1016.45 cv
1426.7 1016.54 1426.14 1016.19 1426.03 1015.62 cv
1425.92 1015.04 1426.3 1014.49 1426.87 1014.38 cv
1427.36 1014.29 1439.05 1012.15 1447.63 1016.5 cv
1448.15 1016.77 1448.35 1017.4 1448.09 1017.92 cv
1447.9 1018.28 1447.53 1018.49 1447.15 1018.49 cv
cp
0 0 0 rgb
f
1451.05 1026.01 mo
1450.66 1026.01 1450.29 1025.8 1450.11 1025.42 cv
1441.16 1007.23 li
1431.21 1007.98 li
1430.54 1008.05 1430.12 1007.58 1430.08 1007.01 cv
1430.04 1006.43 1430.47 1005.92 1431.05 1005.88 cv
1441.71 1005.08 li
1442.18 1005.01 1442.54 1005.28 1442.73 1005.66 cv
1451.99 1024.5 li
1452.25 1025.02 1452.04 1025.65 1451.51 1025.9 cv
1451.37 1025.98 1451.21 1026.01 1451.05 1026.01 cv
cp
f
1374.37 1035.8 mo
1377.96 1039.84 li
1377.96 1039.84 1403.6 1041.96 1416.99 1039.51 cv
1422.63 1038.48 1427.92 1032.96 1418.86 1030.42 cv
1413.97 1029.05 1410.12 1026.16 1410.12 1026.16 cv
1410.12 1026.16 1420.37 1023.41 1428.7 1023.55 cv
1434.03 1023.64 1445.88 1030.13 1447.71 1025.91 cv
1450.63 1019.2 1438.53 1013.21 1438.53 1013.21 cv
1438.53 1013.21 1449.07 1023.86 1451.04 1015.82 cv
1452.99 1007.81 1423.79 992.336 1413.56 990.723 cv
1403.32 989.108 1364.54 1004.39 1364.54 1004.39 cv
1374.37 1035.8 li
cp
.976471 .580392 .490196 rgb
f
1413.8 1018.49 mo
1413.42 1018.49 1413.05 1018.28 1412.86 1017.92 cv
1412.6 1017.4 1412.81 1016.77 1413.33 1016.5 cv
1421.91 1012.15 1433.6 1014.29 1434.08 1014.38 cv
1434.65 1014.49 1435.03 1015.04 1434.92 1015.62 cv
1434.82 1016.19 1434.25 1016.54 1433.69 1016.45 cv
1433.57 1016.43 1422.21 1014.34 1414.28 1018.38 cv
1414.13 1018.46 1413.96 1018.49 1413.8 1018.49 cv
cp
0 0 0 rgb
f
1409.9 1026.01 mo
1409.75 1026.01 1409.59 1025.98 1409.44 1025.9 cv
1408.92 1025.65 1408.7 1025.02 1408.96 1024.5 cv
1418.22 1005.66 li
1418.41 1005.28 1418.76 1005.01 1419.25 1005.08 cv
1429.91 1005.88 li
1430.48 1005.92 1430.92 1006.43 1430.87 1007.01 cv
1430.83 1007.58 1430.37 1008.05 1429.75 1007.98 cv
1419.8 1007.23 li
1410.85 1025.42 li
1410.67 1025.8 1410.29 1026.01 1409.9 1026.01 cv
cp
f
1384.88 991.127 mo
1384.88 991.127 1314.21 1002.14 1291.76 1035.39 cv
1269.5 1068.36 1301.15 1123.57 1371.99 1132.28 cv
1442.83 1140.99 1414.39 1070.02 1414.39 1070.02 cv
1414.39 1070.02 1372.19 1059.6 1368.7 1054.95 cv
1365.22 1050.31 1388.67 1047.41 1388.67 1047.41 cv
1384.88 991.127 li
cp
.247059 .619608 .592157 rgb
f
1482.94 991.127 mo
1482.94 991.127 1563.25 997.945 1577.65 1041.82 cv
1590.5 1080.97 1547.65 1147.49 1475.47 1154.74 cv
1404.45 1161.88 1448.32 1071.23 1448.32 1071.23 cv
1448.32 1071.23 1495.51 1061.54 1498.99 1056.89 cv
1502.47 1052.25 1479.26 1045.83 1479.26 1045.83 cv
1482.94 991.127 li
cp
f
1199.2 1329.09 mo
1544.78 1329.09 li
1551.34 1329.09 1556.65 1323.78 1556.65 1317.23 cv
1556.65 1314.74 li
1556.65 1308.19 1551.34 1302.88 1544.78 1302.88 cv
1199.2 1302.88 li
1192.64 1302.88 1187.33 1308.19 1187.33 1314.74 cv
1187.33 1317.23 li
1187.33 1323.78 1192.64 1329.09 1199.2 1329.09 cv
cp
.654902 .435294 .658824 rgb
f
1164.26 1414.76 mo
1166.71 1416.16 1308.79 1408.8 1311.99 1405.87 cv
1313.13 1404.82 1313.06 1398.07 1312.15 1388.45 cv
1310.5 1370.94 1300.6 1341.04 1295.13 1322.6 cv
1295.13 1322.6 1245.4 1325.94 1240.97 1328.77 cv
1236.5 1331.62 1188.61 1372.05 1188.61 1372.05 cv
1188.61 1372.05 1170.33 1379 1163.78 1389.81 cv
1161.87 1392.99 1160.89 1396.36 1160.56 1399.51 cv
1159.73 1407.14 1162.55 1413.81 1164.26 1414.76 cv
cp
.156863 .423529 .486275 rgb
f
1164.26 1414.76 mo
1166.71 1416.16 1308.79 1408.8 1311.99 1405.87 cv
1313.13 1404.82 1313.06 1398.07 1312.15 1388.45 cv
1160.56 1399.51 li
1159.73 1407.14 1162.55 1413.81 1164.26 1414.76 cv
cp
1 1 1 rgb
f
1205.02 1359.43 mo
1204.54 1359.43 1204.13 1359.06 1204.09 1358.58 cv
1204.05 1358.07 1204.44 1357.62 1204.95 1357.58 cv
1243.74 1354.48 li
1225.63 1342.64 li
1225.21 1342.36 1225.08 1341.79 1225.37 1341.36 cv
1225.65 1340.93 1226.23 1340.81 1226.65 1341.09 cv
1247.03 1354.41 li
1247.36 1354.63 1247.52 1355.03 1247.42 1355.41 cv
1247.32 1355.8 1246.99 1356.08 1246.59 1356.11 cv
1205.09 1359.43 li
1205.07 1359.43 1205.05 1359.43 1205.02 1359.43 cv
cp
f
1338.12 1191.19 mo
1338.12 1191.19 1246.52 1108.69 1191.17 1152.54 cv
1136.14 1196.13 1222.51 1335.22 1222.51 1335.22 cv
1321.47 1335.44 li
1311.82 1288.01 li
1430.63 1287.78 li
1378.21 1213.55 li
1338.12 1191.19 li
cp
.988235 .666667 .239216 rgb
f
1246.87 1201.01 mo
1246.56 1201.01 1246.26 1200.85 1246.09 1200.57 cv
1246 1200.44 1237.27 1186.73 1225.58 1176.75 cv
1225.18 1176.42 1225.14 1175.83 1225.47 1175.45 cv
1225.81 1175.05 1226.39 1175.01 1226.78 1175.34 cv
1238.7 1185.5 1247.57 1199.44 1247.65 1199.58 cv
1247.93 1200.01 1247.8 1200.59 1247.37 1200.86 cv
1247.21 1200.96 1247.04 1201.01 1246.87 1201.01 cv
cp
.262745 .0980392 .286275 rgb
f
1466.04 1257.77 mo
1466.04 1257.77 1502.42 1123.4 1471.79 1086.42 cv
1463.27 1076.15 1451.64 1071.11 1439.28 1069.19 cv
1402.68 1063.49 1367.94 1087.83 1357.88 1124.27 cv
1335.99 1203.56 li
1466.04 1257.77 li
cp
.247059 .619608 .592157 rgb
f
1448.32 1047.41 mo
1447.7 1072.83 li
1447.7 1072.83 1442.93 1080.03 1428.03 1080.88 cv
1416.93 1081.51 1413.1 1078.91 1413.1 1078.91 cv
1414.96 1066.07 li
1416.79 1053.55 li
1443.79 1048.3 li
1448.32 1047.41 li
cp
1 .686275 .611765 rgb
f
1443.37 1050.46 mo
1443.28 1051.13 1443 1051.91 1442.57 1052.8 cv
1436.6 1064.85 1421.14 1067.15 1414.79 1067.56 cv
1416.63 1055.56 li
1443.37 1050.46 li
cp
0 0 0 rgb
f
1413.41 999.825 mo
1413.41 999.825 1399.88 1030.06 1404.5 1047.16 cv
1409.13 1064.25 1424.69 1061.71 1434.02 1058.5 cv
1443.34 1055.28 1447.71 1049.62 1447.71 1049.62 cv
1447.71 1049.62 1456.37 1052.64 1462.25 1044.62 cv
1468.13 1036.6 1464.64 1027.29 1459.7 1025.12 cv
1454.76 1022.95 1448.83 1026.48 1448.83 1026.48 cv
1453.53 1017.7 li
1453.53 1017.7 1434.49 972.693 1413.41 999.825 cv
cp
1 .686275 .611765 rgb
f
1414.47 1038.37 mo
1414.07 1038.37 1413.71 1038.11 1413.58 1037.71 cv
1411.6 1031.24 1416.18 1024.66 1416.37 1024.38 cv
1416.67 1023.97 1417.25 1023.86 1417.67 1024.16 cv
1418.08 1024.46 1418.18 1025.03 1417.89 1025.45 cv
1417.84 1025.51 1413.64 1031.57 1415.36 1037.17 cv
1415.51 1037.66 1415.24 1038.18 1414.75 1038.33 cv
1414.66 1038.36 1414.56 1038.37 1414.47 1038.37 cv
cp
0 0 0 rgb
f
1450.09 1040.68 mo
1449.86 1040.68 1449.63 1040.6 1449.45 1040.43 cv
1449.08 1040.08 1449.06 1039.48 1449.41 1039.11 cv
1457.68 1030.39 li
1458.04 1030.02 1458.62 1030 1458.99 1030.36 cv
1459.37 1030.71 1459.38 1031.3 1459.03 1031.67 cv
1450.76 1040.39 li
1450.58 1040.58 1450.33 1040.68 1450.09 1040.68 cv
cp
f
1458.82 1038.36 mo
1458.68 1038.35 1452.98 1037.47 1452.98 1037.47 cv
1452.47 1037.39 1452.12 1036.92 1452.2 1036.41 cv
1452.28 1035.9 1452.77 1035.55 1453.26 1035.63 cv
1458.96 1036.51 li
1459.47 1036.59 1459.82 1037.06 1459.74 1037.57 cv
1459.67 1038.03 1459.27 1038.36 1458.82 1038.36 cv
cp
f
1428.25 1027.08 mo
1427.62 1027 1427.26 1026.54 1427.33 1026.03 cv
1428.07 1020.37 li
1428.13 1019.86 1428.61 1019.51 1429.11 1019.57 cv
1429.62 1019.64 1429.97 1020.1 1429.91 1020.61 cv
1429.17 1026.27 li
1429.11 1026.74 1428.71 1027.08 1428.25 1027.08 cv
cp
f
1411.46 1025.69 mo
1410.82 1025.6 1410.47 1025.13 1410.55 1024.62 cv
1411.39 1018.98 li
1411.46 1018.48 1411.89 1018.12 1412.44 1018.2 cv
1412.95 1018.28 1413.3 1018.75 1413.23 1019.26 cv
1412.38 1024.9 li
1412.31 1025.36 1411.92 1025.69 1411.46 1025.69 cv
cp
f
1433.55 1016.25 mo
1433.21 1016.25 1432.88 1016.06 1432.72 1015.74 cv
1431.34 1013.04 1427.63 1013.78 1427.47 1013.81 cv
1426.98 1013.92 1426.47 1013.59 1426.37 1013.09 cv
1426.26 1012.59 1426.58 1012.1 1427.08 1011.99 cv
1427.29 1011.94 1432.34 1010.91 1434.37 1014.9 cv
1434.61 1015.35 1434.42 1015.91 1433.97 1016.14 cv
1433.83 1016.21 1433.69 1016.25 1433.55 1016.25 cv
cp
f
1417.16 1012.71 mo
1416.86 1012.71 1416.57 1012.57 1416.39 1012.31 cv
1415.86 1011.54 1415.25 1011.11 1414.51 1011.02 cv
1412.74 1010.77 1410.81 1012.45 1410.79 1012.47 cv
1410.4 1012.81 1409.81 1012.77 1409.48 1012.38 cv
1409.14 1012 1409.17 1011.41 1409.56 1011.07 cv
1409.66 1010.98 1412.07 1008.88 1414.73 1009.17 cv
1416.02 1009.34 1417.09 1010.04 1417.93 1011.26 cv
1418.22 1011.69 1418.11 1012.26 1417.68 1012.56 cv
1417.52 1012.66 1417.34 1012.71 1417.16 1012.71 cv
cp
f
1441.54 1254.92 mo
1441.45 1254.92 1441.36 1254.91 1441.26 1254.89 cv
1440.68 1254.73 1440.33 1254.13 1440.48 1253.55 cv
1444 1240.31 li
1444.16 1239.73 1444.74 1239.38 1445.34 1239.54 cv
1445.92 1239.69 1446.27 1240.29 1446.11 1240.87 cv
1442.6 1254.11 li
1442.47 1254.6 1442.02 1254.92 1441.54 1254.92 cv
cp
.32549 .270588 .47451 rgb
f
1337.75 1221.69 mo
1337.12 1221.68 1336.64 1221.17 1336.66 1220.57 cv
1337.03 1206.48 li
1337.05 1205.87 1337.58 1205.39 1338.15 1205.41 cv
1338.76 1205.43 1339.24 1205.93 1339.22 1206.53 cv
1338.85 1220.63 li
1338.83 1221.22 1338.35 1221.69 1337.75 1221.69 cv
cp
f
1349.39 1230.46 mo
1348.78 1230.46 1348.29 1229.97 1348.3 1229.37 cv
1348.33 1214.42 li
1348.33 1213.82 1348.82 1213.33 1349.43 1213.33 cv
1350.03 1213.33 1350.52 1213.83 1350.52 1214.43 cv
1350.48 1229.37 li
1350.48 1229.97 1349.99 1230.46 1349.39 1230.46 cv
cp
f
1421.68 1046.94 mo
1421.05 1046.94 1420.38 1046.86 1419.68 1046.68 cv
1419.18 1046.55 1418.88 1046.04 1419.01 1045.54 cv
1419.15 1045.05 1419.63 1044.76 1420.15 1044.88 cv
1424.68 1046.08 1427.31 1041.79 1427.42 1041.61 cv
1427.68 1041.17 1428.25 1041.02 1428.69 1041.29 cv
1429.13 1041.55 1429.28 1042.12 1429.02 1042.56 cv
1428.02 1044.24 1425.37 1046.94 1421.68 1046.94 cv
cp
0 0 0 rgb
f
1035.55 1360.44 mo
1036.69 1363.02 1155.53 1441.24 1159.84 1440.77 cv
1161.38 1440.6 1165.33 1435.13 1170.29 1426.83 cv
1179.33 1411.75 1189.06 1381.8 1195.57 1363.7 cv
1195.57 1363.7 1153.53 1336.94 1148.28 1336.59 cv
1142.99 1336.24 1080.46 1340.45 1080.46 1340.45 cv
1080.46 1340.45 1061.62 1335.23 1049.94 1340.06 cv
1046.51 1341.48 1043.73 1343.62 1041.59 1345.96 cv
1036.41 1351.62 1034.73 1358.66 1035.55 1360.44 cv
cp
.156863 .423529 .486275 rgb
f
1035.55 1360.44 mo
1036.69 1363.02 1155.53 1441.24 1159.84 1440.77 cv
1161.38 1440.6 1165.33 1435.13 1170.29 1426.83 cv
1041.59 1345.96 li
1036.41 1351.62 1034.73 1358.66 1035.55 1360.44 cv
cp
1 1 1 rgb
f
1133.19 1362.32 mo
1133.02 1362.32 1132.85 1362.27 1132.7 1362.18 cv
1097.3 1340.28 li
1096.86 1340.01 1096.73 1339.44 1097 1339 cv
1097.26 1338.56 1097.84 1338.42 1098.27 1338.7 cv
1131.37 1359.17 li
1123.79 1338.92 li
1123.61 1338.44 1123.85 1337.9 1124.33 1337.72 cv
1124.81 1337.55 1125.35 1337.78 1125.53 1338.27 cv
1134.06 1361.06 li
1134.2 1361.44 1134.09 1361.86 1133.78 1362.11 cv
1133.61 1362.25 1133.4 1362.32 1133.19 1362.32 cv
cp
f
1469.02 1249.5 mo
1469.02 1249.5 1302.65 1165.57 1265.16 1177.9 cv
1215.94 1194.08 1126.74 1327.56 1126.74 1327.56 cv
1204.92 1403.23 li
1204.92 1403.23 1285.89 1293.96 1298.85 1295.4 cv
1313.84 1297.07 1398.18 1332.55 1428.19 1322.9 cv
1458.21 1313.26 1469.02 1249.5 1469.02 1249.5 cv
cp
1 .729412 .341176 rgb
f
1285.8 1270.83 mo
1285.6 1270.83 1285.39 1270.83 1285.18 1270.85 cv
1282.92 1271.02 1282.56 1271.97 1282.44 1272.28 cv
1281.04 1275.98 1289.02 1286.4 1295.25 1293.14 cv
1295.31 1288.38 1294.92 1277.23 1290.35 1272.72 cv
1289.06 1271.45 1287.57 1270.83 1285.8 1270.83 cv
cp
1296.11 1296.33 mo
1295.86 1296.33 1295.62 1296.23 1295.44 1296.04 cv
1293.68 1294.22 1278.27 1278.06 1280.71 1271.62 cv
1281.3 1270.06 1282.76 1269.17 1285.04 1269 cv
1287.66 1268.77 1289.85 1269.61 1291.66 1271.4 cv
1298.11 1277.78 1297.08 1294.74 1297.03 1295.46 cv
1297.01 1295.82 1296.77 1296.14 1296.43 1296.27 cv
1296.32 1296.31 1296.22 1296.33 1296.11 1296.33 cv
cp
.262745 .0980392 .286275 rgb
f
1424.5 1081.56 mo
1420.9 1081.56 1416.99 1081.06 1412.83 1079.79 cv
1412.34 1079.65 1412.06 1079.13 1412.21 1078.64 cv
1412.37 1078.14 1412.9 1077.88 1413.37 1078.02 cv
1432.99 1083.98 1446.96 1072.25 1447.09 1072.13 cv
1447.48 1071.8 1448.07 1071.84 1448.4 1072.23 cv
1448.74 1072.62 1448.69 1073.2 1448.31 1073.54 cv
1448.19 1073.64 1438.78 1081.56 1424.5 1081.56 cv
cp
1 1 1 rgb
f
1448.83 1026.48 mo
1448.83 1026.48 1457.99 1010.24 1441.36 1006.47 cv
1424.73 1002.69 1416.61 1002.76 1413.41 999.825 cv
1410.22 996.888 1419.91 971.63 1453.12 987.307 cv
1475.41 997.831 1463.4 1028.58 1463.4 1028.58 cv
1463.4 1028.58 1455.79 1023.27 1448.83 1026.48 cv
cp
0 0 0 rgb
f
1502.27 1056.15 mo
1510.05 1056.48 1523.52 1056.27 1526.48 1052.71 cv
1526.97 1052.12 1527.11 1051.48 1526.9 1050.7 cv
1526.69 1049.89 1526.22 1049.35 1525.43 1049.03 cv
1521 1047.17 1509.02 1052.59 1502.27 1056.15 cv
cp
1507.81 1058.14 mo
1503.42 1058.14 1499.84 1057.89 1498.92 1057.82 cv
1498.51 1057.79 1498.17 1057.5 1498.08 1057.1 cv
1497.99 1056.7 1498.17 1056.29 1498.52 1056.09 cv
1499.36 1055.61 1519.08 1044.36 1526.15 1047.31 cv
1527.46 1047.86 1528.34 1048.87 1528.7 1050.23 cv
1529.06 1051.58 1528.79 1052.85 1527.91 1053.9 cv
1524.98 1057.42 1515.24 1058.14 1507.81 1058.14 cv
cp
1 1 1 rgb
f
1344.87 1042.74 mo
1344.21 1042.74 1343.6 1042.81 1343.03 1042.98 cv
1342.46 1043.14 1341.91 1043.41 1341.95 1043.64 cv
1342.39 1046.38 1357.11 1052.83 1365.97 1053.88 cv
1361.58 1050.35 1351.39 1042.74 1344.87 1042.74 cv
cp
1368.28 1055.89 mo
1359.8 1055.89 1340.84 1048.5 1340.12 1043.93 cv
1340 1043.2 1340.16 1041.88 1342.51 1041.19 cv
1351.4 1038.6 1368.59 1053.61 1369.32 1054.26 cv
1369.6 1054.51 1369.71 1054.91 1369.58 1055.26 cv
1369.45 1055.62 1369.12 1055.87 1368.74 1055.88 cv
1368.59 1055.89 1368.44 1055.89 1368.28 1055.89 cv
cp
f
1355.67 1133.21 mo
1355.57 1133.21 1355.46 1133.19 1355.37 1133.16 cv
1354.88 1132.99 1354.62 1132.46 1354.79 1131.98 cv
1362.41 1109.86 li
1362.58 1109.38 1363.12 1109.12 1363.59 1109.29 cv
1364.08 1109.45 1364.33 1109.98 1364.17 1110.47 cv
1356.55 1132.58 li
1356.41 1132.96 1356.05 1133.21 1355.67 1133.21 cv
cp
f
2218.5 379.425 mo
2218.5 379.425 2215.44 405.67 2219.02 415.174 cv
2222.59 424.677 2226.74 422.729 2226.74 422.729 cv
2226.74 422.729 2220.05 439.11 2229.07 438.963 cv
2238.1 438.816 2243.37 411.668 2243.37 411.668 cv
2237.49 370.781 li
2218.5 379.425 li
cp
.988235 .623529 .52549 rgb
f
2232.95 215.626 mo
2232.95 215.626 2145.06 246.722 2155.2 320.655 cv
2164.91 391.502 2260.49 386.479 2260.49 386.479 cv
2232.95 215.626 li
cp
f
2247.47 655.971 mo
2247.47 717.183 li
2302.63 717.183 li
2302.63 661.101 li
2247.47 655.971 li
cp
1 .662745 .560784 rgb
f
2409.13 635.048 mo
2436.87 689.999 li
2486.39 666.382 li
2460.97 616.035 li
2409.13 635.048 li
cp
f
2234.02 350.557 mo
2346.42 340.669 li
2346.42 340.669 2404.87 477.801 2426.12 517.419 cv
2447.37 557.037 2488.66 623.71 2488.66 623.71 cv
2394.36 671.869 li
2329.06 545.652 li
2327.1 679.231 li
2221.85 677.559 li
2234.02 350.557 li
cp
.156863 .423529 .486275 rgb
f
2304.25 742.416 mo
2303.92 746.402 2303.58 749.968 2303.28 752.755 cv
2302.92 756.319 2300.18 758.978 2296.91 758.912 cv
2271.34 758.394 2190.01 759.82 2163.3 759.981 cv
2157.26 760.047 2152.79 753.63 2154.53 747.245 cv
2154.66 746.694 2154.86 746.144 2155.03 745.561 cv
2156.63 740.828 2159.73 735.805 2165.53 731.883 cv
2180.71 721.642 2234.02 694.483 2234.02 694.483 cv
2234.02 694.483 2235.29 674.778 2244.93 674.39 cv
2258.77 673.838 2275.84 704.757 2275.84 704.757 cv
2286.68 702.294 li
2286.68 702.294 2298.38 682.297 2303.78 692.896 cv
2307.25 699.733 2305.75 725.175 2304.25 742.416 cv
cp
.654902 .435294 .658824 rgb
f
2304.25 742.416 mo
2303.92 746.402 2303.58 749.968 2303.28 752.755 cv
2302.92 756.319 2300.18 758.978 2296.91 758.912 cv
2271.34 758.394 2190.01 759.82 2163.3 759.981 cv
2157.26 760.047 2152.79 753.63 2154.53 747.245 cv
2154.66 746.694 2154.86 746.144 2155.03 745.561 cv
2304.25 742.416 li
cp
.756863 .552941 .768627 rgb
f
2239.89 709.067 mo
2239.79 709.067 2239.7 709.053 2239.61 709.024 cv
2219.59 702.671 li
2219.1 702.515 2218.82 701.994 2218.98 701.504 cv
2219.14 701.012 2219.67 700.746 2220.15 700.9 cv
2240.17 707.253 li
2240.66 707.409 2240.93 707.93 2240.77 708.42 cv
2240.65 708.815 2240.28 709.067 2239.89 709.067 cv
cp
1 1 1 rgb
f
2500.91 684.773 mo
2502.65 688.396 2504.18 691.651 2505.35 694.215 cv
2506.85 697.487 2505.83 701.113 2502.96 702.634 cv
2480.49 714.521 2410.62 754.995 2387.51 768.021 cv
2382.31 770.988 2375.15 767.573 2373.4 761.194 cv
2373.23 760.651 2373.12 760.077 2372.97 759.49 cv
2371.94 754.61 2372.07 748.753 2375.1 742.55 cv
2383.05 726.34 2415.46 677.04 2415.46 677.04 cv
2415.46 677.04 2406.5 659.323 2414.67 654.336 cv
2426.4 647.183 2457.01 665.787 2457.01 665.787 cv
2465.16 658.42 li
2465.16 658.42 2465.11 635.415 2475.21 642.009 cv
2481.71 646.272 2493.4 669.082 2500.91 684.773 cv
cp
.654902 .435294 .658824 rgb
f
2500.91 684.773 mo
2502.65 688.396 2504.18 691.651 2505.35 694.215 cv
2506.85 697.487 2505.83 701.113 2502.96 702.634 cv
2480.49 714.521 2410.62 754.995 2387.51 768.021 cv
2382.31 770.988 2375.15 767.573 2373.4 761.194 cv
2373.23 760.651 2373.12 760.077 2372.97 759.49 cv
2500.91 684.773 li
cp
.756863 .552941 .768627 rgb
f
2406.9 691.139 mo
2406.46 691.139 2406.08 690.834 2405.99 690.393 cv
2405.89 689.891 2406.21 689.4 2406.72 689.299 cv
2427.34 685.154 li
2427.87 685.047 2428.34 685.383 2428.44 685.882 cv
2428.54 686.385 2428.21 686.874 2427.71 686.977 cv
2407.08 691.121 li
2407.02 691.133 2406.96 691.139 2406.9 691.139 cv
cp
1 1 1 rgb
f
2228.46 371.808 mo
2228.46 371.808 2203.31 238.691 2222.23 222.766 cv
2250.46 198.994 2312.99 198.167 2329.29 213.252 cv
2345.58 228.337 2350.72 342.518 2350.72 342.518 cv
2350.72 342.518 2306.9 363.614 2228.46 371.808 cv
cp
.968627 .490196 .341176 rgb
f
2272.07 185.242 mo
2278.86 207.729 li
2278.86 207.729 2276.63 215.417 2263.4 220.458 cv
2253.55 224.213 2249.33 223.037 2249.33 223.037 cv
2247.3 211.236 li
2245.33 199.723 li
2268.23 187.326 li
2272.07 185.242 li
cp
1 .662745 .560784 rgb
f
2268.23 187.326 mo
2268.35 187.958 2268.33 188.752 2268.21 189.693 cv
2266.42 202.445 2252.98 209.021 2247.3 211.236 cv
2245.33 199.723 li
2268.23 187.326 li
cp
0 0 0 rgb
f
2224.69 149.98 mo
2224.69 149.98 2221.05 181.738 2230.57 195.998 cv
2240.09 210.258 2254.01 203.243 2261.83 197.494 cv
2269.66 191.744 2272.07 185.246 2272.07 185.246 cv
2272.07 185.246 2281.15 185.406 2284.28 176.291 cv
2287.4 167.175 2281.3 159.707 2275.99 159.208 cv
2270.67 158.708 2266.14 163.722 2266.14 163.722 cv
2267.93 154.269 li
2267.93 154.269 2236.38 118.796 2224.69 149.98 cv
cp
.988235 .623529 .52549 rgb
f
2237.04 185.03 mo
2236.75 185.03 2236.47 184.896 2236.29 184.644 cv
2232.44 179.289 2234.78 171.863 2234.88 171.549 cv
2235.04 171.063 2235.55 170.796 2236.05 170.952 cv
2236.54 171.11 2236.81 171.632 2236.65 172.121 cv
2236.63 172.189 2234.5 178.976 2237.79 183.558 cv
2238.09 183.976 2238 184.557 2237.58 184.855 cv
2237.42 184.974 2237.23 185.03 2237.04 185.03 cv
cp
0 0 0 rgb
f
2271.34 176.425 mo
2271.2 176.425 2271.06 176.394 2270.93 176.329 cv
2270.46 176.102 2270.28 175.545 2270.5 175.084 cv
2275.67 164.612 li
2275.9 164.154 2276.46 163.967 2276.92 164.19 cv
2277.38 164.417 2277.56 164.975 2277.34 165.435 cv
2272.17 175.908 li
2272.01 176.234 2271.68 176.425 2271.34 176.425 cv
cp
f
2273.23 172.583 mo
2272.78 172.583 2272.39 172.259 2272.32 171.803 cv
2272.24 171.297 2272.58 170.82 2273.09 170.738 cv
2278.73 169.823 li
2279.27 169.738 2279.71 170.088 2279.8 170.591 cv
2279.88 171.097 2279.54 171.574 2279.03 171.656 cv
2273.38 172.571 li
2273.33 172.58 2273.28 172.583 2273.23 172.583 cv
cp
f
2248.36 159.033 mo
2248.13 159.033 2247.89 158.946 2247.71 158.772 cv
2245.59 156.709 2242.2 158.571 2242.16 158.587 cv
2241.72 158.845 2241.15 158.678 2240.9 158.231 cv
2240.65 157.785 2240.81 157.221 2241.25 156.968 cv
2241.44 156.861 2245.88 154.413 2249.01 157.437 cv
2249.38 157.794 2249.38 158.384 2249.03 158.75 cv
2248.85 158.939 2248.6 159.033 2248.36 159.033 cv
cp
f
2225.24 162.822 mo
2225.07 162.822 2224.9 162.779 2224.75 162.686 cv
2224.32 162.417 2224.18 161.846 2224.45 161.409 cv
2224.52 161.294 2226.19 158.596 2228.75 158.109 cv
2229.99 157.868 2231.23 158.188 2232.39 159.063 cv
2232.8 159.371 2232.88 159.953 2232.58 160.364 cv
2232.26 160.777 2231.68 160.855 2231.27 160.547 cv
2230.54 159.997 2229.82 159.79 2229.09 159.936 cv
2227.36 160.266 2226.04 162.358 2226.03 162.378 cv
2225.85 162.665 2225.55 162.822 2225.24 162.822 cv
cp
f
2245.46 192.093 mo
2245.11 192.093 2244.79 191.902 2244.63 191.575 cv
2244.4 191.114 2244.58 190.559 2245.05 190.331 cv
2245.08 190.311 2248.99 188.342 2249.83 185.103 cv
2249.95 184.609 2250.47 184.306 2250.96 184.437 cv
2251.46 184.565 2251.75 185.073 2251.63 185.571 cv
2250.57 189.641 2246.06 191.902 2245.87 191.996 cv
2245.74 192.062 2245.59 192.093 2245.46 192.093 cv
cp
f
2243.79 168.464 mo
2243.14 168.45 2242.73 168.023 2242.75 167.511 cv
2242.76 166.998 2243.13 166.559 2243.7 166.604 cv
2243.74 166.595 2247.75 166.684 2249.74 164.742 cv
2250.11 164.383 2250.7 164.39 2251.06 164.757 cv
2251.42 165.124 2251.41 165.713 2251.04 166.07 cv
2248.71 168.346 2244.61 168.464 2243.79 168.464 cv
cp
f
2227.78 173.244 mo
2227.39 173.244 2226.99 173.215 2226.58 173.149 cv
2226.07 173.069 2225.72 172.594 2225.8 172.086 cv
2225.88 171.582 2226.33 171.246 2226.87 171.313 cv
2229.63 171.747 2231.8 170.059 2231.82 170.041 cv
2232.22 169.727 2232.8 169.789 2233.12 170.195 cv
2233.44 170.598 2233.37 171.182 2232.97 171.5 cv
2232.87 171.58 2230.72 173.244 2227.78 173.244 cv
cp
f
2255.81 125.224 mo
2255.81 125.224 2259.09 96.5332 2275.82 104.403 cv
2293.67 112.797 2276.62 137.605 2265.63 136.548 cv
2254.64 135.492 2255.81 125.224 2255.81 125.224 cv
cp
f
2265.82 99.1348 mo
2261.18 102.097 li
2261.18 102.097 2235.34 97.5293 2222.82 91.7334 cv
2217.55 89.2954 2213.84 82.6318 2223.45 82.5205 cv
2228.64 82.4604 2233.22 80.6768 2233.22 80.6768 cv
2233.22 80.6768 2223.87 75.395 2215.63 73.3872 cv
2210.35 72.1011 2196.91 75.2822 2196.25 70.7612 cv
2195.21 63.5693 2208.76 60.9253 2208.76 60.9253 cv
2208.76 60.9253 2195.48 68.4429 2195.73 60.2144 cv
2195.98 52.0166 2228.97 44.6641 2239.49 45.7471 cv
2250.01 46.8291 2284.06 71.4922 2284.06 71.4922 cv
2265.82 99.1348 li
cp
.988235 .623529 .52549 rgb
f
2231.97 72.2788 mo
2231.75 72.2788 2231.53 72.2026 2231.36 72.0464 cv
2224.59 66.0913 2212.79 65.1763 2212.67 65.1689 cv
2212.16 65.1313 2211.77 64.6865 2211.81 64.1748 cv
2211.84 63.6631 2212.31 63.2622 2212.8 63.3145 cv
2213.31 63.353 2225.35 64.2871 2232.58 70.6528 cv
2232.97 70.9922 2233.01 71.5786 2232.67 71.9634 cv
2232.49 72.1719 2232.23 72.2788 2231.97 72.2788 cv
cp
0 0 0 rgb
f
2233.76 80.5083 mo
2233.32 80.5083 2232.93 80.2002 2232.85 79.7568 cv
2228.98 59.9014 li
2218.88 58.0435 li
2218.37 57.9487 2218.04 57.4644 2218.13 56.96 cv
2218.23 56.457 2218.72 56.1235 2219.21 56.2139 cv
2229.93 58.188 li
2230.31 58.2593 2230.6 58.5493 2230.68 58.9253 cv
2234.67 79.4014 li
2234.77 79.9063 2234.44 80.3921 2233.94 80.4922 cv
2233.88 80.5029 2233.82 80.5083 2233.76 80.5083 cv
cp
f
2253.1 85.5859 mo
2252.94 85.5859 2252.79 85.5474 2252.64 85.4663 cv
2243.65 80.3774 2233.92 80.5122 2233.78 80.5083 cv
2233.25 80.5083 2232.84 80.1055 2232.83 79.5977 cv
2232.82 79.0859 2233.23 78.6611 2233.74 78.6504 cv
2234.13 78.6396 2244.09 78.4961 2253.56 83.8472 cv
2254 84.1016 2254.16 84.6675 2253.91 85.1138 cv
2253.74 85.417 2253.42 85.5859 2253.1 85.5859 cv
cp
f
2342.11 252.951 mo
2342.11 252.951 2385.88 204.038 2357.02 129.795 cv
2338.14 81.228 2272.28 63.3315 2272.28 63.3315 cv
2252.42 94.9185 li
2252.42 94.9185 2284.16 125.023 2291.49 148.599 cv
2298.82 172.174 2287.75 203.041 2287.75 203.041 cv
2342.11 252.951 li
cp
.988235 .623529 .52549 rgb
f
2287.75 203.041 mo
2287.75 203.041 2288.86 225.777 2304.67 242.056 cv
2320.49 258.333 2342.11 252.951 2342.11 252.951 cv
2326.14 207.86 li
2287.75 203.041 li
cp
f
2266.14 163.722 mo
2266.14 163.722 2248.1 161.403 2241.54 152.718 cv
2234.98 144.032 2234.03 141.311 2234.03 141.311 cv
2234.03 141.311 2222.86 155.749 2224.09 168.319 cv
2225.31 180.891 2208.99 144.498 2229.25 132.306 cv
2249.51 120.113 2266.55 126.679 2273.82 135.585 cv
2281.09 144.492 2281 161.654 2281 161.654 cv
2281 161.654 2272 156.896 2266.14 163.722 cv
cp
0 0 0 rgb
f
2209.73 313.461 mo
2203.91 313.461 2198.47 314.287 2197.62 316.78 cv
2197.31 317.709 2197.05 318.923 2197.65 319.43 cv
2199.71 321.168 2209.1 317.502 2216.42 313.782 cv
2214.29 313.585 2211.98 313.461 2209.73 313.461 cv
cp
2199.4 321.676 mo
2198.17 321.676 2197.15 321.429 2196.46 320.851 cv
2195.33 319.901 2195.13 318.328 2195.87 316.178 cv
2198.14 309.521 2217.45 311.979 2219.64 312.281 cv
2220.04 312.336 2220.36 312.639 2220.43 313.033 cv
2220.5 313.427 2220.32 313.824 2219.96 314.017 cv
2217.3 315.478 2205.61 321.676 2199.4 321.676 cv
cp
.956863 .517647 .384314 rgb
f
2244.89 225.259 mo
2244.36 225.259 2243.95 224.842 2243.95 224.328 cv
2243.95 223.816 2244.36 223.4 2244.88 223.4 cv
2245.16 223.4 2270.02 223.229 2278.03 207.312 cv
2278.26 206.853 2278.82 206.67 2279.28 206.9 cv
2279.73 207.131 2279.92 207.689 2279.69 208.146 cv
2271.19 225.03 2246.17 225.259 2244.89 225.259 cv
cp
.654902 .435294 .658824 rgb
f
2329.06 546.581 mo
2328.67 546.581 2328.3 546.329 2328.17 545.935 cv
2285.34 411.657 li
2254.63 405.03 li
2254.13 404.923 2253.81 404.428 2253.92 403.927 cv
2254.03 403.424 2254.54 403.106 2255.03 403.215 cv
2286.26 409.955 li
2286.58 410.023 2286.84 410.264 2286.95 410.579 cv
2329.95 545.369 li
2330.1 545.858 2329.83 546.381 2329.34 546.537 cv
2329.25 546.566 2329.15 546.581 2329.06 546.581 cv
cp
1 .729412 .341176 rgb
f
2352.89 390.085 mo
2337.84 390.085 2326.22 378.775 2325.66 378.226 cv
2325.3 377.864 2325.3 377.276 2325.66 376.912 cv
2326.02 376.547 2326.6 376.544 2326.97 376.904 cv
2327.12 377.052 2342.06 391.618 2359.34 387.464 cv
2359.84 387.36 2360.34 387.653 2360.46 388.15 cv
2360.58 388.648 2360.27 389.151 2359.77 389.271 cv
2357.42 389.836 2355.12 390.085 2352.89 390.085 cv
cp
f
2226.74 423.657 mo
2226.63 423.657 2226.51 423.637 2226.41 423.598 cv
2225.93 423.416 2225.69 422.879 2225.87 422.399 cv
2229.34 413.233 li
2229.52 412.753 2230.06 412.521 2230.54 412.693 cv
2231.02 412.874 2231.26 413.411 2231.08 413.891 cv
2227.6 423.057 li
2227.47 423.429 2227.11 423.657 2226.74 423.657 cv
cp
0 0 0 rgb
f
183.676 1069.02 mo
321.233 1010.29 li
327.27 1007.71 334.269 1010.24 337.217 1016.02 cv
343.875 1029.05 li
371.934 1083.97 li
314.943 1118.52 li
314.943 1118.52 262.548 1106.79 224.466 1106.65 cv
206.496 1106.59 193.101 1099.64 183.924 1092.31 cv
182.521 1091.17 181.236 1090.05 180.025 1088.93 cv
173.607 1082.96 175.572 1072.47 183.676 1069.02 cv
cp
.156863 .423529 .486275 rgb
f
183.676 1069.02 mo
321.233 1010.29 li
327.27 1007.71 334.269 1010.24 337.217 1016.02 cv
343.875 1029.05 li
183.924 1092.31 li
182.521 1091.17 181.236 1090.05 180.025 1088.93 cv
173.607 1082.96 175.572 1072.47 183.676 1069.02 cv
cp
1 .729412 .341176 rgb
f
279.317 1145.15 mo
277.733 1145.15 276.686 1144.45 276.045 1143.78 cv
272.835 1140.41 273.494 1131.03 274.96 1122.48 cv
272.095 1129.23 268.38 1135.92 264.504 1137.41 cv
263.035 1137.97 261.626 1137.83 260.304 1136.99 cv
259.05 1136.2 258.291 1134.99 258.05 1133.4 cv
256.598 1123.82 275.391 1101.65 276.191 1100.71 cv
276.524 1100.32 277.111 1100.27 277.501 1100.61 cv
277.891 1100.94 277.938 1101.52 277.606 1101.92 cv
277.415 1102.14 258.561 1124.38 259.886 1133.12 cv
260.046 1134.17 260.507 1134.92 261.298 1135.42 cv
262.118 1135.94 262.929 1136.03 263.838 1135.67 cv
269.774 1133.4 276.307 1114.55 278.508 1106.88 cv
278.561 1106.7 278.604 1106.54 278.639 1106.42 cv
278.776 1105.93 279.277 1105.63 279.786 1105.78 cv
280.277 1105.92 280.564 1106.43 280.426 1106.93 cv
280.412 1106.98 280.379 1107.09 280.332 1107.26 cv
277.918 1115.79 272.93 1137.82 277.39 1142.49 cv
278.114 1143.25 279.06 1143.46 280.346 1143.16 cv
282.059 1142.75 283.308 1141.77 284.163 1140.15 cv
288.54 1131.87 280.673 1111.15 280.593 1110.94 cv
280.41 1110.46 280.649 1109.92 281.128 1109.74 cv
281.605 1109.55 282.145 1109.79 282.328 1110.27 cv
282.667 1111.16 290.574 1132 285.805 1141.02 cv
284.7 1143.11 283.008 1144.44 280.774 1144.97 cv
280.245 1145.09 279.76 1145.15 279.317 1145.15 cv
cp
f
529.919 1304.16 mo
557.821 1384.59 li
592.699 1406.59 li
647.403 1407.12 li
622.04 1352.64 li
590.679 1287.29 li
529.919 1304.16 li
cp
.988235 .623529 .52549 rgb
f
509.391 1028.45 mo
632.473 1319.32 li
530.839 1342.4 li
487.009 1244.39 li
487.009 1244.39 425.315 1277.53 381.303 1231.58 cv
337.29 1185.64 302.297 1118.11 302.297 1118.11 cv
371.934 1078.37 li
371.934 1078.37 363.774 1014.81 391.569 1000.82 cv
419.364 986.827 509.391 1028.45 509.391 1028.45 cv
cp
.968627 .490196 .341176 rgb
f
718.653 1435.81 mo
568.7 1437.9 li
562.12 1437.99 556.649 1433.01 556.193 1426.56 cv
555.157 1412.01 li
550.287 1362.88 li
616.918 1340.41 li
616.918 1340.41 660.673 1371.08 695.76 1385.63 cv
712.32 1392.49 721.957 1403.98 727.553 1414.22 cv
728.401 1415.8 729.147 1417.32 729.825 1418.82 cv
733.407 1426.76 727.482 1435.69 718.653 1435.81 cv
cp
.156863 .423529 .486275 rgb
f
532.388 955.406 mo
532.388 955.406 553.426 981.951 590.976 980.582 cv
627.125 979.264 672.269 946.218 672.269 946.218 cv
665.063 914.806 li
665.063 914.806 620.552 914.645 597.656 911.045 cv
574.759 907.446 557.406 901.973 557.406 901.973 cv
532.388 955.406 li
cp
.976471 .580392 .490196 rgb
f
651.463 922.296 mo
651.463 922.296 661.236 905.828 665.173 902.729 cv
669.108 899.629 680.168 899.988 680.168 899.988 cv
680.168 899.988 699.859 897.321 703.436 900.772 cv
707.013 904.224 704.019 912.472 704.019 912.472 cv
704.019 912.472 713.134 933.51 707.944 945.608 cv
702.754 957.707 658.668 953.709 658.668 953.709 cv
644.575 935.896 li
651.463 922.296 li
cp
f
701.694 950.754 mo
701.694 950.754 680.986 959.558 676.981 950.655 cv
672.977 941.753 670.982 925.856 670.982 925.856 cv
697.192 915.948 li
701.694 950.754 li
cp
f
658.04 936.05 mo
656.786 936.05 655.475 935.847 654.106 935.396 cv
653.618 935.237 653.353 934.711 653.515 934.225 cv
653.673 933.734 654.199 933.466 654.687 933.633 cv
666.233 937.447 673.7 919.813 673.773 919.635 cv
673.873 919.392 674.071 919.207 674.314 919.116 cv
674.564 919.032 674.831 919.051 675.062 919.167 cv
675.167 919.222 685.725 924.621 689.568 918.053 cv
689.992 917.33 690.052 916.558 689.755 915.687 cv
687.94 910.405 674.098 903.898 668.917 901.837 cv
668.439 901.648 668.208 901.107 668.396 900.628 cv
668.587 900.153 669.13 899.924 669.604 900.109 cv
670.396 900.425 689.051 907.92 691.512 915.084 cv
691.99 916.474 691.876 917.791 691.172 918.989 cv
687.628 925.039 679.563 923.293 675.087 921.246 cv
673.507 924.618 667.451 936.05 658.04 936.05 cv
cp
0 0 0 rgb
f
684.029 945.417 mo
683.815 945.417 683.602 945.345 683.427 945.196 cv
683.155 944.964 676.77 939.447 678.294 934.718 cv
679.711 930.327 699.659 926.767 705.738 925.779 cv
706.241 925.707 706.722 926.037 706.804 926.549 cv
706.887 927.057 706.542 927.532 706.035 927.616 cv
693.847 929.594 680.8 933.005 680.062 935.292 cv
679.108 938.246 683.039 942.423 684.632 943.78 cv
685.022 944.114 685.069 944.702 684.737 945.091 cv
684.553 945.305 684.291 945.417 684.029 945.417 cv
cp
f
683.928 954.984 mo
683.63 954.984 683.336 954.839 683.157 954.574 cv
683.046 954.407 680.428 950.466 681.159 947.028 cv
681.458 945.62 682.259 944.503 683.536 943.701 cv
688.334 940.692 706.047 941.744 706.798 941.792 cv
707.312 941.824 707.7 942.267 707.669 942.778 cv
707.637 943.287 707.183 943.628 706.686 943.649 cv
701.733 943.345 688.091 943.044 684.523 945.275 cv
683.676 945.806 683.171 946.506 682.977 947.413 cv
682.407 950.077 684.676 953.504 684.699 953.536 cv
684.984 953.964 684.871 954.541 684.445 954.824 cv
684.287 954.934 684.105 954.984 683.928 954.984 cv
cp
f
680.56 934.476 mo
680.481 934.476 680.402 934.464 680.324 934.446 cv
680.153 934.399 676.134 933.307 675.057 929.895 cv
674.262 927.372 675.307 924.382 678.165 921 cv
678.499 920.611 679.083 920.564 679.475 920.887 cv
679.865 921.221 679.916 921.806 679.584 922.197 cv
677.165 925.061 676.237 927.463 676.829 929.336 cv
677.601 931.782 680.765 932.639 680.796 932.646 cv
681.293 932.776 681.589 933.285 681.458 933.781 cv
681.35 934.199 680.972 934.476 680.56 934.476 cv
cp
f
517.803 970.035 mo
517.803 970.035 534.875 980.321 551.396 986.818 cv
567.918 993.314 567.918 993.314 567.918 993.314 cv
592.699 907.233 li
504.195 861.441 li
517.803 970.035 li
cp
.247059 .619608 .592157 rgb
f
488.064 1242.74 mo
487.853 1242.74 487.638 1242.67 487.462 1242.52 cv
487.072 1242.19 487.025 1241.6 487.356 1241.21 cv
487.525 1241.02 504.158 1221.01 502.007 1185.57 cv
499.836 1149.84 477.498 1084.14 477.273 1083.49 cv
477.187 1083.24 477.211 1082.97 477.335 1082.74 cv
477.458 1082.51 477.671 1082.35 477.923 1082.29 cv
507.661 1074.71 li
508.162 1074.59 508.662 1074.88 508.79 1075.38 cv
508.917 1075.88 508.615 1076.38 508.118 1076.51 cv
479.353 1083.84 li
482.121 1092.1 501.819 1151.84 503.861 1185.45 cv
506.062 1221.68 488.945 1242.21 488.772 1242.42 cv
488.587 1242.63 488.328 1242.74 488.064 1242.74 cv
cp
1 1 1 rgb
f
539.038 1316.88 mo
538.617 1316.88 538.237 1316.59 538.134 1316.17 cv
538.015 1315.67 538.323 1315.17 538.82 1315.05 cv
622.347 1295 li
622.867 1294.87 623.346 1295.19 623.468 1295.68 cv
623.588 1296.18 623.279 1296.68 622.782 1296.8 cv
539.256 1316.86 li
539.182 1316.88 539.108 1316.88 539.038 1316.88 cv
cp
f
380.591 1107.26 mo
385.689 1120.7 392.891 1136.61 396.008 1136.97 cv
396.086 1136.99 396.274 1137 396.552 1136.57 cv
399.264 1132.37 389.241 1117.74 380.591 1107.26 cv
cp
396.052 1138.83 mo
395.957 1138.83 395.87 1138.82 395.794 1138.81 cv
389.861 1138.13 379.134 1108.86 377.043 1103 cv
376.893 1102.58 377.063 1102.12 377.446 1101.89 cv
377.829 1101.67 378.32 1101.74 378.614 1102.08 cv
381.12 1104.92 402.958 1130.07 398.113 1137.58 cv
397.441 1138.62 396.608 1138.83 396.052 1138.83 cv
cp
f
313.34 1138.83 mo
313.012 1138.83 312.692 1138.66 312.523 1138.35 cv
312.279 1137.89 312.445 1137.33 312.895 1137.08 cv
377.473 1101.87 li
377.925 1101.63 378.489 1101.79 378.734 1102.24 cv
378.979 1102.7 378.812 1103.26 378.362 1103.5 cv
313.785 1138.72 li
313.643 1138.79 313.491 1138.83 313.34 1138.83 cv
cp
f
718.653 1435.81 mo
568.7 1437.9 li
562.12 1437.99 556.649 1433.01 556.193 1426.56 cv
555.157 1412.01 li
727.553 1414.22 li
728.401 1415.8 729.147 1417.32 729.825 1418.82 cv
733.407 1426.76 727.482 1435.69 718.653 1435.81 cv
cp
1 .729412 .341176 rgb
f
645.283 1371.63 mo
644.945 1371.63 644.619 1371.44 644.456 1371.12 cv
644.222 1370.66 644.405 1370.1 644.862 1369.87 cv
645.126 1369.74 671.323 1356.31 673.457 1347.74 cv
673.71 1346.73 673.577 1345.87 673.053 1345.13 cv
672.505 1344.34 671.803 1343.97 670.845 1343.94 cv
664.527 1343.76 651.021 1358.71 645.975 1364.96 cv
645.855 1365.11 645.755 1365.23 645.679 1365.33 cv
645.354 1365.73 644.77 1365.79 644.374 1365.47 cv
643.975 1365.15 643.909 1364.57 644.229 1364.17 cv
644.264 1364.12 644.334 1364.04 644.441 1363.9 cv
650.02 1356.93 663.273 1338.48 660.968 1332.49 cv
660.598 1331.53 659.816 1330.99 658.514 1330.78 cv
656.769 1330.5 655.228 1330.94 653.796 1332.12 cv
646.512 1338.12 645.651 1360.21 645.645 1360.43 cv
645.626 1360.94 645.227 1361.39 644.683 1361.33 cv
644.169 1361.31 643.768 1360.88 643.786 1360.36 cv
643.82 1359.42 644.69 1337.21 652.614 1330.68 cv
654.454 1329.17 656.547 1328.58 658.804 1328.94 cv
661.26 1329.33 662.279 1330.72 662.702 1331.82 cv
664.362 1336.13 660.093 1344.53 655.391 1351.86 cv
660.688 1346.72 666.741 1341.88 670.9 1342.08 cv
672.45 1342.13 673.686 1342.79 674.573 1344.06 cv
675.414 1345.26 675.646 1346.65 675.262 1348.19 cv
672.922 1357.58 646.815 1370.96 645.704 1371.52 cv
645.57 1371.59 645.427 1371.63 645.283 1371.63 cv
cp
f
409.376 914.368 mo
409.376 914.368 363.283 893.903 327.139 930.99 cv
290.996 968.077 279.495 1034.8 279.495 1034.8 cv
313.895 1046.79 li
388.394 970.784 li
409.376 914.368 li
cp
.976471 .580392 .490196 rgb
f
317.003 1045.65 mo
317.003 1045.65 319.722 1064.52 318.588 1069.36 cv
317.455 1074.19 308.552 1080.65 308.552 1080.65 cv
308.552 1080.65 294.785 1094.74 289.802 1094.21 cv
284.819 1093.69 281.965 1085.39 281.965 1085.39 cv
281.965 1085.39 261.545 1074.44 257.987 1061.79 cv
254.428 1049.13 291.538 1025.39 291.538 1025.39 cv
313.83 1030.78 li
317.003 1045.65 li
cp
f
281.965 1086.32 mo
281.754 1086.32 281.544 1086.25 281.37 1086.11 cv
280.976 1085.78 280.923 1085.19 281.252 1084.8 cv
284.716 1080.64 li
285.046 1080.25 285.634 1080.2 286.024 1080.52 cv
286.418 1080.86 286.471 1081.44 286.142 1081.83 cv
282.678 1085.99 li
282.495 1086.21 282.23 1086.32 281.965 1086.32 cv
cp
0 0 0 rgb
f
308.551 1081.58 mo
308.402 1081.58 308.25 1081.54 308.11 1081.46 cv
307.658 1081.22 307.49 1080.66 307.733 1080.21 cv
316.69 1063.58 li
316.935 1063.13 317.501 1062.96 317.949 1063.21 cv
318.401 1063.45 318.57 1064.01 318.327 1064.46 cv
309.37 1081.09 li
309.201 1081.4 308.881 1081.58 308.551 1081.58 cv
cp
f
313.34 936.114 mo
313.34 936.114 357.166 863.822 430.363 854.258 cv
517.375 842.889 533.116 885.577 535.87 902.902 cv
538.876 921.813 525.208 978.578 525.208 978.578 cv
516.491 1041.23 li
373.63 1011.09 li
389.388 966.439 li
313.34 936.114 li
cp
.247059 .619608 .592157 rgb
f
491.503 800.699 mo
491.503 800.699 518.801 778.882 503.129 770.149 cv
492.64 764.306 482.45 778.557 482.45 778.557 cv
482.45 778.557 456.619 780.227 446.512 793.58 cv
436.404 806.935 459.936 831.249 459.936 831.249 cv
491.503 800.699 li
cp
0 0 0 rgb
f
464.391 836.501 mo
462.38 859.816 li
462.38 859.816 466.079 866.875 479.858 869.14 cv
490.123 870.827 493.952 868.833 493.952 868.833 cv
493.529 856.903 li
493.102 845.27 li
468.515 837.765 li
464.391 836.501 li
cp
.976471 .580392 .490196 rgb
f
468.515 837.765 mo
468.52 838.406 468.701 839.179 469.01 840.072 cv
473.312 852.161 487.605 855.881 493.529 856.903 cv
493.102 845.27 li
468.515 837.765 li
cp
0 0 0 rgb
f
502.972 792.565 mo
502.972 792.565 512.898 822.835 506.591 838.669 cv
500.284 854.502 485.447 850.447 476.735 846.406 cv
468.023 842.365 464.387 836.506 464.387 836.506 cv
464.387 836.506 455.661 838.485 450.805 830.215 cv
445.948 821.943 450.328 813.428 455.353 811.873 cv
460.379 810.318 465.76 814.304 465.76 814.304 cv
462.129 805.434 li
462.129 805.434 485.396 764.47 502.972 792.565 cv
cp
.976471 .580392 .490196 rgb
f
463.877 826.819 mo
463.665 826.819 463.453 826.747 463.278 826.602 cv
453.245 818.156 li
452.853 817.826 452.803 817.238 453.133 816.847 cv
453.465 816.454 454.049 816.403 454.443 816.733 cv
464.477 825.18 li
464.868 825.51 464.919 826.098 464.589 826.489 cv
464.403 826.707 464.142 826.819 463.877 826.819 cv
cp
0 0 0 rgb
f
454.149 825.876 mo
453.703 825.876 453.311 825.553 453.234 825.1 cv
453.15 824.591 453.492 824.116 453.999 824.028 cv
461.187 822.835 li
461.701 822.766 462.174 823.096 462.257 823.601 cv
462.341 824.108 461.999 824.584 461.493 824.671 cv
454.304 825.865 li
454.251 825.872 454.2 825.876 454.149 825.876 cv
cp
f
499.317 825.876 mo
499.245 825.876 499.17 825.868 499.096 825.851 cv
498.597 825.727 498.292 825.223 498.415 824.726 cv
500.094 817.87 495.909 813.762 495.729 813.587 cv
495.359 813.235 495.345 812.647 495.699 812.277 cv
496.053 811.903 496.639 811.889 497.009 812.24 cv
497.22 812.44 502.164 817.234 500.219 825.168 cv
500.115 825.593 499.736 825.876 499.317 825.876 cv
cp
f
504.149 815.225 mo
503.712 815.225 503.322 814.912 503.239 814.466 cv
502.215 808.992 li
502.121 808.488 502.453 808.002 502.957 807.907 cv
503.447 807.816 503.946 808.147 504.041 808.651 cv
505.064 814.124 li
505.158 814.629 504.826 815.115 504.322 815.21 cv
504.264 815.221 504.208 815.225 504.149 815.225 cv
cp
f
489.115 814.263 mo
488.678 814.263 488.288 813.95 488.204 813.504 cv
487.181 808.03 li
487.087 807.526 487.419 807.04 487.923 806.945 cv
488.415 806.858 488.912 807.182 489.007 807.689 cv
490.03 813.163 li
490.124 813.667 489.792 814.153 489.288 814.248 cv
489.229 814.259 489.174 814.263 489.115 814.263 cv
cp
f
504.9 799.361 mo
504.9 799.361 502.728 794.459 496.815 793.927 cv
490.903 793.394 487.095 797.202 487.095 797.202 cv
487.095 797.202 488.847 807.213 480.353 811.745 cv
471.859 816.277 465.76 814.304 465.76 814.304 cv
460.101 811.773 li
456.542 803.033 li
474.966 786.556 li
497.792 777.038 li
503.641 788.532 li
504.9 799.361 li
cp
f
492.625 834.67 mo
492.133 834.67 486.386 834.55 484.335 829.088 cv
484.154 828.608 484.397 828.071 484.878 827.891 cv
485.357 827.712 485.893 827.952 486.074 828.435 cv
487.691 832.742 492.335 832.812 492.625 832.812 cv
493.145 832.812 493.563 833.222 493.566 833.733 cv
493.57 834.245 493.162 834.662 492.65 834.67 cv
492.645 834.67 492.636 834.67 492.625 834.67 cv
cp
f
482.45 778.557 mo
482.45 778.557 482.792 765.59 468.515 770.149 cv
454.237 774.709 453.844 792.405 453.844 792.405 cv
482.45 778.557 li
cp
f
505.723 803.657 mo
505.561 803.644 501.092 802.862 501.092 802.862 cv
500.586 802.775 500.248 802.293 500.337 801.788 cv
500.423 801.28 500.907 800.936 501.411 801.033 cv
505.881 801.813 li
506.387 801.901 506.725 802.384 506.636 802.888 cv
506.558 803.338 506.166 803.657 505.723 803.657 cv
cp
f
485.205 804.989 mo
484.816 804.989 484.453 804.743 484.324 804.354 cv
484.161 803.868 484.423 803.342 484.909 803.179 cv
491.208 801.066 li
491.697 800.906 492.224 801.168 492.384 801.654 cv
492.547 802.141 492.285 802.667 491.799 802.83 cv
485.5 804.942 li
485.402 804.976 485.303 804.989 485.205 804.989 cv
cp
f
387.918 1043.39 mo
387.505 1043.39 387.129 1043.11 387.02 1042.69 cv
386.89 1042.2 387.186 1041.69 387.685 1041.56 cv
387.851 1041.52 404.489 1037.09 408.532 1028.37 cv
408.75 1027.91 409.306 1027.71 409.767 1027.92 cv
410.232 1028.14 410.435 1028.69 410.221 1029.16 cv
405.807 1038.67 388.871 1043.17 388.152 1043.36 cv
388.074 1043.38 387.994 1043.39 387.918 1043.39 cv
cp
1 1 1 rgb
f
465.76 814.304 mo
465.76 814.304 477.188 800.443 490.681 798.277 cv
504.173 796.112 504.9 799.361 504.9 799.361 cv
503.641 788.532 li
503.641 788.532 497.989 784.135 481.322 789.48 cv
463.877 795.074 456.542 811.609 456.542 811.609 cv
465.76 814.304 li
cp
1 .729412 .341176 rgb
f
2265.64 1171.75 mo
2265.64 1171.75 2336.9 1187.83 2374.24 1187.81 cv
2411.58 1187.78 2371.85 1244.5 2371.85 1244.5 cv
2371.85 1244.5 2241.93 1262.68 2241.67 1227.99 cv
2241.41 1193.29 2265.64 1171.75 2265.64 1171.75 cv
cp
.956863 .517647 .384314 rgb
f
2114.13 1242.86 mo
2114.13 1242.86 2067.53 1317.81 2055.09 1353.02 cv
2042.65 1388.22 2002.96 1330.6 2002.96 1330.6 cv
2002.96 1330.6 2040.96 1187.95 2076.75 1183.71 cv
2111.21 1179.63 2114.13 1242.86 2114.13 1242.86 cv
cp
f
2371.85 1244.5 mo
2400.68 1245.31 li
2405.88 1185.97 li
2374.24 1187.81 li
2371.85 1244.5 li
cp
1 1 1 rgb
f
2433.16 1177.87 mo
2452.34 1176.87 li
2466.28 1176.15 li
2491.41 1335.09 li
2491.41 1335.09 2485.22 1336.3 2477.45 1335.69 cv
2468.3 1334.95 2456.98 1331.66 2451.02 1320.85 cv
2430.58 1283.75 2405.22 1254.27 2399.66 1250.18 cv
2397.15 1248.33 2395.6 1245.24 2395.58 1241.93 cv
2396.72 1191.34 li
2396.7 1186.78 2399.56 1182.94 2403.58 1182.15 cv
2416.67 1179.58 li
2422.1 1178.52 2427.62 1177.94 2433.16 1177.87 cv
cp
0 0 0 rgb
f
2452.34 1176.87 mo
2466.28 1176.15 li
2466.38 1176.77 li
2476.71 1175.14 li
2479.64 1193.63 li
2469.3 1195.26 li
2471.92 1211.84 li
2482.26 1210.21 li
2485.21 1228.89 li
2474.88 1230.52 li
2477.28 1245.75 li
2487.62 1244.12 li
2490.57 1262.81 li
2480.24 1264.44 li
2482.81 1280.71 li
2493.14 1279.08 li
2496.1 1297.76 li
2485.76 1299.4 li
2488.49 1316.63 li
2498.82 1314.99 li
2501.74 1333.46 li
2491.41 1335.09 li
2491.41 1335.09 2485.22 1336.3 2477.45 1335.69 cv
2452.34 1176.87 li
cp
1 1 1 rgb
f
2429.14 1285.95 mo
2429.04 1285.95 2428.93 1285.93 2428.83 1285.9 cv
2428.35 1285.73 2428.09 1285.2 2428.26 1284.72 cv
2435.17 1264.88 li
2435.34 1264.4 2435.87 1264.16 2436.36 1264.31 cv
2436.84 1264.48 2437.1 1265.01 2436.93 1265.5 cv
2430.02 1285.33 li
2429.88 1285.71 2429.52 1285.95 2429.14 1285.95 cv
cp
f
2419.79 1273.7 mo
2419.69 1273.7 2419.59 1273.69 2419.49 1273.65 cv
2419 1273.48 2418.75 1272.95 2418.91 1272.47 cv
2425.83 1252.64 li
2426 1252.16 2426.53 1251.91 2427.01 1252.07 cv
2427.5 1252.24 2427.75 1252.77 2427.58 1253.25 cv
2420.67 1273.08 li
2420.54 1273.46 2420.18 1273.7 2419.79 1273.7 cv
cp
f
2399.84 1266.5 mo
2399.06 1266.5 2398.33 1266.58 2397.67 1266.76 cv
2396.52 1267.09 2395.72 1267.71 2395.21 1268.65 cv
2394.7 1269.6 2394.97 1269.99 2395.08 1270.13 cv
2396.7 1272.43 2406.73 1272.03 2414.24 1271.12 cv
2410.78 1269.36 2404.44 1266.5 2399.84 1266.5 cv
cp
2405.81 1297.55 mo
2404.11 1297.55 2402.39 1296.92 2400.66 1295.66 cv
2398.2 1293.87 2397.05 1291.71 2397.24 1289.25 cv
2397.73 1283.06 2407 1276.56 2412.6 1273.18 cv
2406.14 1273.88 2395.83 1274.42 2393.56 1271.21 cv
2393.09 1270.54 2392.71 1269.4 2393.57 1267.77 cv
2394.32 1266.38 2395.53 1265.44 2397.16 1264.98 cv
2404.1 1263.02 2417.12 1270.53 2417.67 1270.85 cv
2417.9 1270.98 2418.05 1271.2 2418.1 1271.44 cv
2418.12 1271.5 2418.13 1271.56 2418.13 1271.62 cv
2418.13 1271.77 2418.1 1271.93 2418.03 1272.07 cv
2418 1272.13 2417.96 1272.19 2417.92 1272.24 cv
2417.84 1272.35 2417.73 1272.43 2417.62 1272.48 cv
2417.22 1272.69 2399.69 1281.77 2399.09 1289.39 cv
2398.95 1291.19 2399.82 1292.75 2401.76 1294.16 cv
2403.83 1295.67 2405.76 1296.06 2407.64 1295.35 cv
2414.88 1292.62 2418.89 1275.18 2418.93 1275.01 cv
2419.04 1274.51 2419.52 1274.19 2420.04 1274.3 cv
2420.54 1274.42 2420.86 1274.91 2420.75 1275.41 cv
2420.58 1276.17 2416.47 1294.01 2408.29 1297.09 cv
2407.47 1297.4 2406.64 1297.55 2405.81 1297.55 cv
cp
f
2002.96 1330.6 mo
1991.94 1357.25 li
2045.54 1383.24 li
2055.09 1353.02 li
2002.96 1330.6 li
cp
f
2282.35 1159.6 mo
2260.54 1268.04 li
2240.55 1266 2220.93 1261.96 2204.14 1254.96 cv
2158.51 1235.89 2137.89 1192.84 2137.89 1192.84 cv
2197.53 1107.85 li
2197.53 1107.85 2228.89 1145.59 2276.24 1158.08 cv
2278.25 1158.61 2280.27 1159.1 2282.35 1159.6 cv
cp
.247059 .619608 .592157 rgb
f
2043.41 1411.61 mo
2037.52 1429.89 li
2033.23 1443.18 li
1875.75 1410.09 li
1875.75 1410.09 1876.82 1403.87 1880.16 1396.83 cv
1884.11 1388.55 1891.21 1379.13 1903.43 1377.42 cv
1945.38 1371.52 1981.96 1358.31 1987.75 1354.57 cv
1990.38 1352.88 1993.82 1352.53 1996.92 1353.7 cv
2043.79 1372.76 li
2048.06 1374.37 2050.63 1378.41 2049.94 1382.44 cv
2047.68 1395.59 li
2046.74 1401.05 2045.31 1406.41 2043.41 1411.61 cv
cp
0 0 0 rgb
f
2037.52 1429.89 mo
2033.23 1443.18 li
2032.61 1443.05 li
2030.46 1453.29 li
2012.14 1449.44 li
2014.29 1439.2 li
1997.86 1435.75 li
1995.71 1445.99 li
1977.21 1442.1 li
1979.36 1431.86 li
1964.27 1428.69 li
1962.11 1438.93 li
1943.6 1435.04 li
1945.75 1424.8 li
1929.63 1421.41 li
1927.48 1431.65 li
1908.96 1427.76 li
1911.11 1417.52 li
1894.04 1413.93 li
1891.89 1424.17 li
1873.6 1420.33 li
1875.75 1410.09 li
1875.75 1410.09 1876.82 1403.87 1880.16 1396.83 cv
2037.52 1429.89 li
cp
1 1 1 rgb
f
1960.78 1384.17 mo
1960.56 1384.17 1960.35 1384.09 1960.18 1383.95 cv
1944.11 1370.43 li
1943.71 1370.1 1943.66 1369.51 1943.99 1369.12 cv
1944.33 1368.73 1944.92 1368.68 1945.3 1369.01 cv
1961.37 1382.52 li
1961.77 1382.85 1961.82 1383.44 1961.49 1383.83 cv
1961.3 1384.05 1961.04 1384.17 1960.78 1384.17 cv
cp
f
1975.54 1379.79 mo
1975.33 1379.79 1975.12 1379.72 1974.94 1379.57 cv
1958.87 1366.05 li
1958.48 1365.72 1958.43 1365.13 1958.76 1364.74 cv
1959.09 1364.35 1959.68 1364.31 1960.07 1364.63 cv
1976.14 1378.15 li
1976.53 1378.48 1976.58 1379.07 1976.25 1379.46 cv
1976.07 1379.68 1975.81 1379.79 1975.54 1379.79 cv
cp
f
1970.96 1343.15 mo
1970.86 1343.15 1970.79 1343.17 1970.74 1343.19 cv
1968.02 1343.88 1964.82 1353.4 1963 1360.74 cv
1966.36 1357.69 1972.55 1351.49 1972.97 1346.81 cv
1973.07 1345.62 1972.78 1344.65 1972.08 1343.84 cv
1971.58 1343.27 1971.2 1343.15 1970.96 1343.15 cv
cp
1957.18 1365.45 mo
1957 1365.45 1956.82 1365.4 1956.67 1365.29 cv
1956.02 1364.86 1940.81 1354.68 1940.85 1345.95 cv
1940.85 1343.3 1942.22 1341.06 1944.89 1339.32 cv
1947.44 1337.66 1949.87 1337.35 1952.1 1338.41 cv
1957.71 1341.06 1960.48 1352.04 1961.65 1358.48 cv
1963.3 1352.19 1966.47 1342.37 1970.27 1341.39 cv
1971.08 1341.19 1972.27 1341.23 1973.48 1342.62 cv
1974.52 1343.81 1974.97 1345.28 1974.82 1346.97 cv
1974.18 1354.17 1962.52 1363.64 1962.03 1364.04 cv
1961.81 1364.21 1961.54 1364.28 1961.28 1364.23 cv
1961.02 1364.16 1960.87 1364.07 1960.75 1363.94 cv
1960.57 1363.67 1960.53 1363.54 1960.52 1363.41 cv
1960.46 1362.9 1958.21 1343.35 1951.31 1340.08 cv
1949.68 1339.32 1947.91 1339.58 1945.91 1340.88 cv
1943.76 1342.28 1942.71 1343.94 1942.71 1345.95 cv
1942.67 1353.69 1957.54 1363.64 1957.69 1363.75 cv
1958.12 1364.03 1958.23 1364.61 1957.95 1365.04 cv
1957.77 1365.3 1957.48 1365.45 1957.18 1365.45 cv
cp
f
2037.52 1215.64 mo
2131 1262.86 li
2131 1262.86 2153.76 1235.7 2175.08 1199.87 cv
2205.87 1148.15 2230.68 1109.25 2222.67 1064.79 cv
2216.56 1030.81 2103.74 1082.54 2103.74 1082.54 cv
2103.74 1082.54 2060.1 1165.7 2037.52 1215.64 cv
cp
.247059 .619608 .592157 rgb
f
2245.24 934.633 mo
2245.24 934.633 2272.71 945.157 2296.08 967.205 cv
2320.16 989.91 2330.82 1041.64 2330.82 1041.64 cv
2299.47 1056.77 li
2299.47 1056.77 2277.81 1022.34 2257.55 1011.06 cv
2237.3 999.776 2220.22 993.421 2220.22 993.421 cv
2245.24 934.633 li
cp
.956863 .517647 .384314 rgb
f
2074.89 1009.24 mo
2074.89 1009.24 2044.03 1024.03 2011.03 1006.05 cv
1979.27 988.738 1953.84 938.527 1953.84 938.527 cv
1974.53 913.136 li
1974.53 913.136 2012.62 942.226 2034.75 949.153 cv
2056.88 956.08 2074.89 958.831 2074.89 958.831 cv
2074.89 1009.24 li
cp
f
2288.61 1039.73 mo
2288.61 1039.73 2309.53 1079.12 2316.93 1086.45 cv
2324.32 1093.78 2346.16 1113.53 2348.81 1108.16 cv
2351.5 1102.73 2339.03 1089.7 2339.03 1089.7 cv
2339.03 1089.7 2352.53 1101.78 2356.79 1102.27 cv
2361.05 1102.75 2362.19 1097.11 2357.1 1089.99 cv
2352.01 1082.87 2340.14 1070.66 2340.14 1070.66 cv
2340.14 1070.66 2359.03 1079.82 2363.83 1082.48 cv
2370.06 1085.93 2378.59 1082.14 2368.09 1073.33 cv
2361.09 1067.46 2348.56 1058.57 2348.56 1058.57 cv
2348.56 1058.57 2369.85 1063.39 2371.18 1061.15 cv
2372.51 1058.91 2371.61 1056.83 2366.39 1053.44 cv
2361.17 1050.04 2341.95 1044.32 2339.71 1041.8 cv
2338.8 1040.78 2336.77 1037.72 2334.69 1034.45 cv
2331 1028.66 2323.76 1026.26 2317.35 1028.71 cv
2288.61 1039.73 li
cp
f
2337.1 1089.6 mo
2336.86 1089.6 2336.62 1089.51 2336.44 1089.33 cv
2324.08 1077.08 li
2323.71 1076.72 2323.71 1076.13 2324.07 1075.77 cv
2324.43 1075.4 2325.02 1075.4 2325.39 1075.76 cv
2337.75 1088.01 li
2338.12 1088.37 2338.12 1088.96 2337.76 1089.32 cv
2337.57 1089.51 2337.33 1089.6 2337.1 1089.6 cv
cp
0 0 0 rgb
f
2339.69 1072.32 mo
2339.5 1072.32 2339.32 1072.27 2339.15 1072.15 cv
2329.56 1065.32 li
2329.14 1065.02 2329.04 1064.44 2329.34 1064.03 cv
2329.63 1063.6 2330.21 1063.51 2330.63 1063.8 cv
2340.23 1070.63 li
2340.65 1070.93 2340.75 1071.51 2340.45 1071.93 cv
2340.27 1072.19 2339.98 1072.32 2339.69 1072.32 cv
cp
f
2350.98 1060.65 mo
2350.87 1060.65 2350.76 1060.63 2350.65 1060.59 cv
2336.77 1055.4 li
2336.29 1055.22 2336.05 1054.68 2336.22 1054.2 cv
2336.41 1053.72 2336.94 1053.47 2337.42 1053.66 cv
2351.3 1058.85 li
2351.78 1059.03 2352.03 1059.57 2351.85 1060.05 cv
2351.71 1060.42 2351.35 1060.65 2350.98 1060.65 cv
cp
f
1983.31 926.018 mo
1983.31 926.018 1982.03 906.667 1979.91 902.09 cv
1977.79 897.513 1967.73 892.91 1967.73 892.91 cv
1967.73 892.91 1951.31 881.706 1946.54 883.254 cv
1941.78 884.802 1940.72 893.647 1940.72 893.647 cv
1940.72 893.647 1923.02 908.741 1922.18 922.071 cv
1921.34 935.401 1962.62 951.409 1962.62 951.409 cv
1983.31 941.472 li
1983.31 926.018 li
cp
.956863 .517647 .384314 rgb
f
2050.05 1023.29 mo
2050.05 952.002 li
2050.05 952.002 2074.17 927.12 2137.88 918.829 cv
2195.34 911.353 2250.3 933.003 2250.3 933.003 cv
2241.18 1005.25 li
2221.24 1004.91 li
2227.14 1076.27 li
2093.03 1088.71 li
2085.2 1021.48 li
2050.05 1023.29 li
cp
1 .729412 .341176 rgb
f
2162.21 1216.57 mo
2162.04 1216.57 2161.87 1216.52 2161.71 1216.43 cv
2161.28 1216.15 2161.16 1215.58 2161.43 1215.14 cv
2161.83 1214.51 2201.86 1151.64 2213.29 1127.46 cv
2213.51 1126.99 2214.07 1126.79 2214.52 1127.02 cv
2214.99 1127.24 2215.19 1127.79 2214.97 1128.25 cv
2203.49 1152.54 2163.4 1215.51 2163 1216.14 cv
2162.82 1216.42 2162.52 1216.57 2162.21 1216.57 cv
cp
1 1 1 rgb
f
2210.37 1112.85 mo
2188.96 1112.85 2182.75 1088.92 2182.69 1088.68 cv
2182.56 1088.18 2182.87 1087.67 2183.36 1087.55 cv
2183.88 1087.42 2184.36 1087.73 2184.49 1088.23 cv
2184.55 1088.46 2190.42 1110.99 2210.38 1110.99 cv
2210.51 1110.99 2210.7 1111 2210.76 1110.99 cv
2211.26 1110.99 2211.68 1111.4 2211.69 1111.9 cv
2211.69 1112.42 2211.28 1112.84 2210.77 1112.85 cv
2210.64 1112.85 2210.5 1112.85 2210.37 1112.85 cv
cp
f
2114.13 1256.43 mo
2113.95 1256.43 2113.76 1256.37 2113.59 1256.25 cv
2113.18 1255.96 2113.08 1255.38 2113.38 1254.96 cv
2158.56 1191.88 2199.97 1112.29 2200.39 1111.49 cv
2200.62 1111.03 2201.19 1110.86 2201.64 1111.09 cv
2202.09 1111.33 2202.27 1111.89 2202.04 1112.35 cv
2201.62 1113.14 2160.15 1192.86 2114.89 1256.04 cv
2114.71 1256.29 2114.42 1256.43 2114.13 1256.43 cv
cp
f
2278.6 1179.17 mo
2238.22 1172.77 2204.54 1149.39 2204.21 1149.16 cv
2203.78 1148.86 2203.68 1148.29 2203.98 1147.87 cv
2204.27 1147.45 2204.86 1147.35 2205.27 1147.64 cv
2205.61 1147.87 2238.94 1171.01 2278.75 1177.33 cv
2279.26 1177.41 2279.6 1177.88 2279.52 1178.39 cv
2279.45 1178.85 2279.05 1179.17 2278.6 1179.17 cv
cp
f
2157.98 901.397 mo
2158.5 925.326 li
2158.5 925.326 2154.33 932.297 2140.35 933.733 cv
2129.94 934.803 2126.23 932.523 2126.23 932.523 cv
2127.42 920.373 li
2128.6 908.524 li
2153.76 902.426 li
2157.98 901.397 li
cp
.956863 .517647 .384314 rgb
f
2153.76 902.426 mo
2153.72 903.081 2153.49 903.857 2153.12 904.75 cv
2148.02 916.816 2133.43 919.706 2127.42 920.373 cv
2128.6 908.524 li
2153.76 902.426 li
cp
0 0 0 rgb
f
2122.11 854.096 mo
2122.11 854.096 2110.19 884.365 2115.49 900.929 cv
2120.8 917.492 2135.95 914.296 2144.96 910.726 cv
2153.96 907.153 2157.99 901.403 2157.99 901.403 cv
2157.99 901.403 2166.62 903.979 2172.03 895.844 cv
2177.43 887.71 2173.59 878.738 2168.65 876.832 cv
2163.7 874.925 2158.05 878.651 2158.05 878.651 cv
2162.26 869.827 li
2162.26 869.827 2141.56 826.533 2122.11 854.096 cv
cp
.956863 .517647 .384314 rgb
f
2124.83 891.878 mo
2124.45 891.878 2124.09 891.643 2123.96 891.261 cv
2121.72 884.989 2125.92 878.323 2126.1 878.043 cv
2126.37 877.615 2126.95 877.488 2127.38 877.76 cv
2127.81 878.04 2127.94 878.613 2127.66 879.045 cv
2127.62 879.106 2123.77 885.233 2125.71 890.637 cv
2125.88 891.12 2125.63 891.649 2125.15 891.823 cv
2125.04 891.86 2124.94 891.878 2124.83 891.878 cv
cp
0 0 0 rgb
f
2159.88 892.546 mo
2159.66 892.546 2159.45 892.47 2159.27 892.321 cv
2158.88 891.983 2158.84 891.396 2159.17 891.011 cv
2166.89 882.086 li
2167.23 881.698 2167.82 881.661 2168.2 881.988 cv
2168.59 882.326 2168.63 882.914 2168.3 883.299 cv
2160.58 892.223 li
2160.4 892.437 2160.14 892.546 2159.88 892.546 cv
cp
f
2168.34 889.875 mo
2168.24 889.871 2162.61 889.269 2162.61 889.269 cv
2162.1 889.215 2161.73 888.753 2161.78 888.245 cv
2161.84 887.733 2162.29 887.356 2162.81 887.418 cv
2168.44 888.021 li
2168.95 888.074 2169.32 888.535 2169.27 889.044 cv
2169.22 889.522 2168.81 889.875 2168.34 889.875 cv
cp
f
2142.55 869.318 mo
2142.23 869.318 2141.92 869.151 2141.75 868.851 cv
2140.27 866.27 2136.68 867.155 2136.52 867.199 cv
2136.06 867.312 2135.52 867.028 2135.39 866.531 cv
2135.26 866.037 2135.56 865.529 2136.05 865.399 cv
2136.27 865.349 2141.18 864.106 2143.36 867.929 cv
2143.61 868.375 2143.46 868.941 2143.01 869.195 cv
2142.87 869.278 2142.71 869.318 2142.55 869.318 cv
cp
f
2119.46 866.887 mo
2119.22 866.887 2118.98 866.789 2118.79 866.601 cv
2118.44 866.23 2118.45 865.646 2118.82 865.29 cv
2118.91 865.195 2121.26 863.025 2123.82 863.188 cv
2125.09 863.29 2126.18 863.937 2127.06 865.102 cv
2127.37 865.512 2127.29 866.096 2126.88 866.404 cv
2126.47 866.709 2125.89 866.633 2125.57 866.22 cv
2125.03 865.486 2124.41 865.102 2123.68 865.043 cv
2121.92 864.851 2120.12 866.607 2120.1 866.629 cv
2119.93 866.8 2119.69 866.887 2119.46 866.887 cv
cp
f
2131 901.063 mo
2130.56 901.063 2130.18 900.759 2130.08 900.319 cv
2129.98 899.815 2130.31 899.325 2130.81 899.224 cv
2130.85 899.217 2135.1 898.32 2136.77 895.355 cv
2137.02 894.901 2137.59 894.749 2138.03 894.999 cv
2138.48 895.25 2138.64 895.815 2138.38 896.262 cv
2136.3 899.982 2131.39 901.006 2131.18 901.046 cv
2131.12 901.057 2131.05 901.063 2131 901.063 cv
cp
f
2120.71 878.218 mo
2120.04 878.108 2119.71 877.626 2119.8 877.121 cv
2120.75 871.902 li
2120.85 871.398 2121.34 871.061 2121.84 871.155 cv
2122.34 871.249 2122.67 871.732 2122.58 872.236 cv
2121.63 877.455 li
2121.54 877.905 2121.15 878.218 2120.71 878.218 cv
cp
f
2135.29 879.267 mo
2134.62 879.157 2134.28 878.675 2134.38 878.171 cv
2135.34 872.951 li
2135.43 872.443 2135.92 872.099 2136.42 872.204 cv
2136.92 872.298 2137.26 872.781 2137.17 873.285 cv
2136.2 878.504 li
2136.12 878.954 2135.73 879.267 2135.29 879.267 cv
cp
f
2053.97 857.372 mo
2076.69 827.594 2078.06 790.441 2057.02 774.39 cv
2035.98 758.339 2000.51 769.466 1977.79 799.244 cv
1967.82 812.314 1961.96 826.803 1960.31 840.306 cv
1959.74 844.94 1959.67 849.438 1960.1 853.724 cv
1960.5 857.824 1962.17 873.064 1961.86 877.173 cv
1960.47 895.59 1920.12 946.237 1920.12 946.237 cv
1918.59 948.253 1918.97 951.133 1920.99 952.67 cv
1923 954.207 1925.88 953.82 1927.42 951.805 cv
1927.42 951.805 1976.64 895.976 1983.86 893.271 cv
1989.6 891.121 2000.23 889.791 2006.26 888.744 cv
2022.89 885.861 2040.63 874.86 2053.97 857.372 cv
cp
.654902 .435294 .658824 rgb
f
1925.44 929.543 mo
1925.44 929.543 1939.99 946.789 1947.61 940.467 cv
1955.23 934.146 1964.22 920.56 1964.22 920.56 cv
1945.25 899.855 li
1925.44 929.543 li
cp
.956863 .517647 .384314 rgb
f
2046.33 853.427 mo
2027.14 878.573 1997.55 888.246 1980.23 875.031 cv
1962.91 861.815 1964.42 830.717 1983.61 805.569 cv
2002.8 780.423 2032.39 770.751 2049.71 783.966 cv
2067.03 797.181 2065.52 828.28 2046.33 853.427 cv
cp
.756863 .552941 .768627 rgb
f
2157.71 879.254 mo
2157.71 879.254 2151.28 878.104 2147.33 871.128 cv
2143.39 864.151 2142.55 854.147 2142.55 854.147 cv
2142.55 854.147 2138.52 859.194 2129.99 858.92 cv
2121.45 858.646 2122.18 854.973 2122.18 854.973 cv
2119.1 862.94 li
2119.1 862.94 2112.27 834.872 2125.03 832.486 cv
2137.79 830.1 2142.55 836.8 2142.55 836.8 cv
2142.55 836.8 2163.49 837.81 2172.85 851.761 cv
2182.21 865.712 2172.63 880.329 2172.63 880.329 cv
2172.63 880.329 2166.79 874.439 2157.71 879.254 cv
cp
.262745 .0980392 .286275 rgb
f
1940.72 893.647 mo
1950.19 902.09 li
1940.72 893.647 li
cp
.956863 .517647 .384314 rgb
f
1950.19 903.021 mo
1949.97 903.021 1949.75 902.944 1949.58 902.784 cv
1940.1 894.342 li
1939.71 894.001 1939.68 893.413 1940.02 893.032 cv
1940.37 892.647 1940.95 892.615 1941.33 892.956 cv
1950.81 901.397 li
1951.19 901.739 1951.23 902.327 1950.88 902.708 cv
1950.7 902.915 1950.45 903.021 1950.19 903.021 cv
cp
0 0 0 rgb
f
1977.05 898.668 mo
1977.05 898.668 1949.66 896.547 1950.19 905.239 cv
1950.72 913.932 1963.62 913.593 1963.62 913.593 cv
1963.62 913.593 1962.11 934.02 1975.14 935.836 cv
1977.05 898.668 li
cp
.956863 .517647 .384314 rgb
f
1975.14 936.766 mo
1962.83 935.056 1962.51 918.793 1962.64 914.521 cv
1957.7 914.387 1949.69 912.38 1949.26 905.296 cv
1949.18 903.884 1949.68 902.636 1950.75 901.583 cv
1956.23 896.189 1976.26 897.67 1977.12 897.743 cv
1977.63 897.783 1978.01 898.229 1977.97 898.741 cv
1977.93 899.249 1977.56 899.674 1976.97 899.594 cv
1971.41 899.17 1956.1 898.923 1952.05 902.907 cv
1951.37 903.575 1951.07 904.319 1951.12 905.18 cv
1951.59 912.877 1963.52 912.652 1963.59 912.663 cv
1963.87 912.663 1964.11 912.769 1964.29 912.95 cv
1964.47 913.142 1964.56 913.4 1964.54 913.661 cv
1964.53 913.857 1963.25 933.241 1975.27 934.914 cv
1975.78 934.987 1976.13 935.455 1976.07 935.963 cv
1976 936.428 1975.6 936.766 1975.14 936.766 cv
cp
0 0 0 rgb
f
1944.1 931.711 mo
1944.1 931.711 1952.05 929.656 1952.74 925.236 cv
1953.43 920.816 1932.59 905.771 1932.59 905.771 cv
1944.1 931.711 li
cp
.956863 .517647 .384314 rgb
f
1944.09 932.639 mo
1943.68 932.639 1943.3 932.359 1943.19 931.941 cv
1943.07 931.444 1943.37 930.94 1943.86 930.81 cv
1945.91 930.279 1951.33 928.215 1951.82 925.094 cv
1952.2 922.677 1942.07 913.756 1932.05 906.526 cv
1931.64 906.225 1931.54 905.645 1931.84 905.227 cv
1932.14 904.813 1932.72 904.726 1933.14 905.017 cv
1936.7 907.586 1954.4 920.637 1953.66 925.376 cv
1952.88 930.345 1944.68 932.519 1944.33 932.609 cv
1944.25 932.628 1944.17 932.639 1944.09 932.639 cv
cp
0 0 0 rgb
f
1939.85 940.467 mo
1939.85 940.467 1946.91 936.387 1944.1 931.711 cv
1941.28 927.035 1924.57 919.978 1924.57 919.978 cv
1939.85 940.467 li
cp
.956863 .517647 .384314 rgb
f
1939.85 941.396 mo
1939.53 941.396 1939.22 941.229 1939.05 940.932 cv
1938.79 940.488 1938.94 939.919 1939.39 939.665 cv
1939.42 939.644 1943.02 937.523 1943.72 934.827 cv
1943.95 933.912 1943.82 933.049 1943.3 932.188 cv
1941.12 928.566 1928.78 922.764 1924.2 920.833 cv
1923.73 920.633 1923.51 920.089 1923.71 919.613 cv
1923.91 919.146 1924.44 918.913 1924.93 919.119 cv
1925.62 919.413 1941.96 926.353 1944.89 931.23 cv
1945.67 932.522 1945.88 933.891 1945.51 935.295 cv
1944.63 938.747 1940.49 941.171 1940.32 941.272 cv
1940.17 941.356 1940.01 941.396 1939.85 941.396 cv
cp
0 0 0 rgb
f
1953.61 924.346 mo
1952.7 924.346 1952.04 924.219 1951.98 924.204 cv
1951.48 924.103 1951.15 923.612 1951.25 923.111 cv
1951.35 922.604 1951.88 922.303 1952.34 922.383 cv
1952.38 922.39 1955.61 922.996 1957.39 921.145 cv
1958.79 919.696 1959.06 917.084 1958.19 913.378 cv
1958.07 912.877 1958.38 912.376 1958.88 912.26 cv
1959.4 912.137 1959.88 912.452 1960 912.95 cv
1961.02 917.319 1960.59 920.513 1958.72 922.444 cv
1957.19 924.026 1955.07 924.346 1953.61 924.346 cv
cp
f
2136.92 935.756 mo
2130.29 935.756 2125.86 933.383 2125.78 933.335 cv
2125.33 933.089 2125.17 932.522 2125.41 932.076 cv
2125.66 931.622 2126.22 931.456 2126.68 931.709 cv
2127.29 932.04 2141.92 939.796 2157.86 924.65 cv
2158.23 924.299 2158.81 924.316 2159.17 924.687 cv
2159.52 925.057 2159.51 925.646 2159.13 926.001 cv
2151 933.734 2143.03 935.756 2136.92 935.756 cv
cp
.364706 .156863 .4 rgb
f
2085.19 1022.41 mo
2084.7 1022.41 2084.29 1022.03 2084.26 1021.53 cv
2083.15 1001.42 li
2083.12 1000.91 2083.51 1000.47 2084.03 1000.44 cv
2084.5 1000.42 2084.98 1000.8 2085 1001.32 cv
2086.12 1021.43 li
2086.15 1021.94 2085.76 1022.38 2085.25 1022.41 cv
2085.23 1022.41 2085.21 1022.41 2085.19 1022.41 cv
cp
f
523.776 667.708 mo
521.064 667.708 518.325 667.655 515.559 667.549 cv
458.996 665.365 412.423 643.283 377.134 601.917 cv
320.824 535.907 303.006 431.46 297.976 355.465 cv
292.528 273.19 300.476 205.611 300.558 204.938 cv
300.62 204.431 301.111 204.069 301.59 204.127 cv
302.1 204.188 302.463 204.649 302.401 205.16 cv
302.079 207.846 271.369 475.077 378.549 600.714 cv
413.488 641.666 459.609 663.529 515.631 665.69 cv
567.863 667.765 610.299 650.468 641.687 614.447 cv
697.527 550.366 709.215 436.979 709.188 353.142 cv
709.157 262.216 695.718 185.507 695.581 184.743 cv
695.491 184.237 695.828 183.754 696.333 183.665 cv
696.847 183.577 697.322 183.91 697.411 184.417 cv
697.547 185.182 711.016 262.053 711.046 353.142 cv
711.073 437.296 699.307 551.152 643.088 615.668 cv
612.976 650.223 572.866 667.708 523.776 667.708 cv
cp
.262745 .0980392 .286275 rgb
f
485.77 85.1216 mo
485.77 85.1216 462.109 69.5493 443.428 88.2661 cv
419.847 111.892 438.234 180.65 438.234 180.65 cv
479.23 176.591 li
478.369 112.806 li
485.77 85.1216 li
cp
f
533.658 674.65 mo
474.729 674.65 li
474.729 619.71 li
533.658 619.71 li
533.658 674.65 li
cp
1 1 1 rgb
f
374.294 600.563 mo
360.148 544.426 li
414.498 531.238 li
428.643 587.375 li
374.294 600.563 li
cp
f
469.982 675.479 mo
469.346 699.272 li
469.293 701.224 470.863 702.847 472.852 702.898 cv
616.723 706.607 li
618.711 706.659 620.365 705.118 620.417 703.167 cv
620.546 698.357 li
620.606 696.101 618.791 694.224 616.491 694.164 cv
614.497 694.112 li
614.497 694.112 612.284 682.727 597.688 673.447 cv
541.667 645.383 li
473.353 643.621 li
472.564 673.076 li
471.176 673.04 470.02 674.116 469.982 675.479 cv
cp
1 .729412 .341176 rgb
f
534.213 640.988 mo
534.213 640.988 598.283 667.968 595.806 672.808 cv
593.328 677.646 579.948 679.287 569.742 677.688 cv
560.32 676.21 521.017 655.995 521.506 649.188 cv
521.996 642.379 529.952 639.17 534.213 640.988 cv
cp
0 0 0 rgb
f
469.987 675.307 mo
469.346 699.272 li
469.293 701.224 470.863 702.847 472.852 702.898 cv
616.723 706.607 li
618.711 706.659 620.365 705.118 620.417 703.167 cv
620.546 698.357 li
620.606 696.101 618.791 694.224 616.491 694.164 cv
614.497 694.112 li
503.931 689.856 li
503.931 689.856 500.935 680.196 490.214 675.319 cv
479.494 670.4 472.564 673.076 472.564 673.076 cv
471.096 673.038 470.02 674.039 469.987 675.307 cv
cp
f
347.364 544.908 mo
323.852 550.745 li
321.923 551.224 320.755 553.146 321.243 555.038 cv
356.539 691.957 li
357.027 693.85 358.986 694.995 360.914 694.517 cv
365.667 693.337 li
367.897 692.783 369.248 690.56 368.684 688.371 cv
368.194 686.473 li
368.194 686.473 378.766 681.301 383.918 665.002 cv
396.289 604.483 li
379.53 539.471 li
350.422 546.696 li
350.081 545.374 348.712 544.573 347.364 544.908 cv
cp
1 .729412 .341176 rgb
f
399.763 595.76 mo
399.763 595.76 390.634 663.588 385.216 662.558 cv
379.798 661.526 374.567 649.33 373.375 639.255 cv
372.274 629.955 381.469 587.354 388.28 585.975 cv
395.091 584.595 400.393 591.241 399.763 595.76 cv
cp
0 0 0 rgb
f
347.536 544.865 mo
323.852 550.745 li
321.923 551.224 320.755 553.146 321.243 555.038 cv
356.539 691.957 li
357.027 693.85 358.986 694.995 360.914 694.517 cv
365.667 693.337 li
367.897 692.783 369.248 690.56 368.684 688.371 cv
368.194 686.473 li
342.447 580.869 li
342.447 580.869 351.114 575.424 352.997 563.977 cv
354.921 552.52 350.422 546.696 350.422 546.696 cv
350.061 545.299 348.789 544.555 347.536 544.865 cv
cp
f
567.385 310.723 mo
567.385 310.723 616.076 485.133 595.876 527.199 cv
575.675 569.266 421.541 624.157 421.541 624.157 cv
383.451 529.888 li
474.729 474.68 li
513.725 329.637 li
567.385 310.723 li
cp
.654902 .435294 .658824 rgb
f
450.21 313.881 mo
450.21 313.881 437.393 418.185 443.472 483.07 cv
449.55 547.955 453.354 634.38 453.354 634.38 cv
552.511 635.383 li
541.688 310.723 li
450.21 313.881 li
cp
f
700.531 203.554 mo
699.511 205.738 688.991 221.481 669.809 225.488 cv
650.627 229.495 649.143 206.158 649.143 206.158 cv
675.918 186.831 li
700.531 203.554 li
cp
.956863 .517647 .384314 rgb
f
539.587 234.181 mo
539.587 234.181 551.21 259.856 576.022 269.721 cv
600.835 279.586 668.29 223.384 668.29 223.384 cv
647.979 195.246 li
589.964 208.458 li
539.587 234.181 li
cp
f
491.567 162.26 mo
491.567 162.26 465.318 162.17 451.154 175.972 cv
436.989 189.773 448.895 324.837 448.895 324.837 cv
448.895 324.837 497.308 326.741 524.645 324.837 cv
548.878 323.147 570.108 314.691 570.108 314.691 cv
570.108 314.691 559.371 182.105 552.005 168.815 cv
544.64 155.525 491.567 162.26 491.567 162.26 cv
cp
1 .729412 .341176 rgb
f
486.383 146.732 mo
486.531 168.169 li
486.531 168.169 493.009 174.927 501.202 174.93 cv
512.265 174.933 516.021 164.128 516.021 164.128 cv
515.604 139.001 li
486.383 146.732 li
cp
.956863 .517647 .384314 rgb
f
486.383 146.732 mo
486.383 146.732 490.725 166.107 503.248 164.02 cv
513.343 162.337 515.594 147.875 515.594 147.875 cv
486.383 146.732 li
cp
0 0 0 rgb
f
520.249 105.079 mo
520.249 105.079 526.167 133.205 517.221 146.866 cv
508.274 160.526 496.285 156.763 490.872 152.744 cv
483.57 147.322 481.964 139.657 481.964 139.657 cv
481.964 139.657 472.088 141.797 468.647 133.771 cv
465.035 125.341 471.09 118.389 476.04 117.9 cv
480.99 117.413 481.583 118.306 481.583 118.306 cv
479.976 109.265 li
479.976 109.265 509.544 75.2686 520.249 105.079 cv
cp
.956863 .517647 .384314 rgb
f
515.698 118.384 mo
515.698 118.384 530.61 111.719 531.975 123.33 cv
533.557 136.782 517.454 137.177 517.454 137.177 cv
515.698 118.384 li
cp
f
523.367 130.431 mo
523.213 130.431 523.057 130.393 522.911 130.313 cv
522.465 130.061 522.305 129.495 522.558 129.046 cv
527.426 120.371 li
527.675 119.924 528.237 119.765 528.69 120.015 cv
529.137 120.267 529.297 120.833 529.045 121.282 cv
524.176 129.958 li
524.007 130.26 523.691 130.431 523.367 130.431 cv
cp
0 0 0 rgb
f
480.162 131.453 mo
479.953 131.453 479.743 131.382 479.568 131.239 cv
471.811 124.808 li
471.417 124.48 471.36 123.895 471.689 123.499 cv
472.016 123.105 472.599 123.053 472.998 123.377 cv
480.756 129.809 li
481.149 130.135 481.205 130.721 480.877 131.117 cv
480.693 131.338 480.429 131.453 480.162 131.453 cv
cp
f
473.119 132.779 mo
472.844 132.779 472.569 132.656 472.386 132.421 cv
472.07 132.015 472.143 131.433 472.548 131.117 cv
477.005 127.647 li
477.411 127.33 477.991 127.404 478.31 127.809 cv
478.625 128.215 478.553 128.798 478.147 129.114 cv
473.691 132.583 li
473.52 132.715 473.319 132.779 473.119 132.779 cv
cp
f
529.153 127.758 mo
524.867 127.758 li
524.354 127.758 523.938 127.342 523.938 126.829 cv
523.938 126.315 524.354 125.9 524.867 125.9 cv
529.153 125.9 li
529.667 125.9 530.083 126.315 530.083 126.829 cv
530.083 127.342 529.667 127.758 529.153 127.758 cv
cp
f
506.936 135.331 mo
506.291 135.245 505.94 134.772 506.017 134.265 cv
507.082 127.096 504.483 121.269 504.456 121.212 cv
504.244 120.744 504.451 120.195 504.917 119.98 cv
505.391 119.773 505.936 119.975 506.147 120.439 cv
506.264 120.696 509.004 126.802 507.853 134.538 cv
507.786 134.999 507.389 135.331 506.936 135.331 cv
cp
f
515.732 113.434 mo
515.587 113.434 515.44 113.399 515.303 113.328 cv
513.466 112.372 510.63 113.066 510.599 113.07 cv
510.107 113.199 509.596 112.896 509.47 112.399 cv
509.345 111.902 509.645 111.397 510.14 111.27 cv
510.287 111.234 513.688 110.386 516.162 111.68 cv
516.618 111.918 516.794 112.479 516.557 112.934 cv
516.391 113.251 516.066 113.434 515.732 113.434 cv
cp
f
492.365 115.72 mo
492.131 115.72 491.897 115.633 491.716 115.455 cv
491.349 115.097 491.342 114.509 491.701 114.141 cv
493.652 112.143 497.145 111.889 497.294 111.878 cv
497.869 111.834 498.248 112.232 498.281 112.742 cv
498.317 113.253 497.931 113.696 497.419 113.732 cv
497.39 113.734 494.481 113.954 493.029 115.44 cv
492.849 115.625 492.606 115.72 492.365 115.72 cv
cp
f
485.998 120.827 mo
485.998 120.827 493.181 115.968 492.751 108.598 cv
492.32 101.228 490.7 99.3481 490.7 99.3481 cv
490.7 99.3481 498.09 103.275 507.277 100.505 cv
517.673 97.3721 523.402 83.0869 517.733 79.1909 cv
511.413 74.8481 496.056 80.9619 496.056 80.9619 cv
496.056 80.9619 479.964 80.0781 469.469 92.8564 cv
458.973 105.635 470.732 120.685 470.732 120.685 cv
470.732 120.685 475.348 115.587 485.998 120.827 cv
cp
.262745 .0980392 .286275 rgb
f
505.435 143.166 mo
501.348 143.166 498.058 139.813 497.898 139.647 cv
497.541 139.277 497.552 138.691 497.92 138.334 cv
498.292 137.98 498.876 137.989 499.233 138.355 cv
499.271 138.394 503.103 142.261 507.004 141.074 cv
507.496 140.925 508.015 141.203 508.166 141.691 cv
508.314 142.183 508.038 142.701 507.548 142.852 cv
506.828 143.072 506.12 143.166 505.435 143.166 cv
cp
0 0 0 rgb
f
514.835 88.2661 mo
514.835 88.2661 521.747 94.5835 523.367 102.282 cv
524.988 109.981 523.367 116.501 523.367 116.501 cv
521.812 116.48 li
521.812 116.48 518.086 97.8105 512.061 96.0981 cv
506.036 94.3857 514.835 88.2661 514.835 88.2661 cv
cp
.262745 .0980392 .286275 rgb
f
547.562 248.465 mo
564.623 263.857 li
598.341 199.365 li
598.341 199.365 550.618 163.414 536.233 161.684 cv
521.849 159.954 547.562 248.465 547.562 248.465 cv
cp
1 .729412 .341176 rgb
f
294.169 230.608 mo
295.519 232.606 308.379 246.504 327.953 247.451 cv
347.526 248.398 345.33 225.118 345.33 225.118 cv
315.853 210.23 li
294.169 230.608 li
cp
.956863 .517647 .384314 rgb
f
448.286 230.336 mo
448.286 230.336 447.175 266.739 431.582 276.498 cv
408.946 290.664 329.123 245.135 329.123 245.135 cv
344.767 214.157 li
396.87 217.621 li
448.286 230.336 li
cp
f
698.867 180.767 mo
701.254 183.154 701.254 187.024 698.867 189.412 cv
669.102 219.177 li
666.714 221.564 662.843 221.564 660.456 219.177 cv
658.068 216.79 658.068 212.919 660.456 210.532 cv
690.221 180.767 li
692.608 178.379 696.479 178.379 698.867 180.767 cv
cp
0 0 0 rgb
f
335.548 241.328 mo
333.161 243.716 329.29 243.716 326.903 241.328 cv
297.137 211.563 li
294.749 209.175 294.749 205.305 297.137 202.917 cv
299.524 200.529 303.395 200.529 305.783 202.917 cv
335.548 232.683 li
337.936 235.069 337.936 238.94 335.548 241.328 cv
cp
f
473.457 164.889 mo
473.457 164.889 444.214 164.889 422.722 182.542 cv
394.576 205.658 389.707 217.145 389.707 217.145 cv
456.366 258.734 li
473.457 164.889 li
cp
1 .729412 .341176 rgb
f
496.311 124.145 mo
495.842 124.145 495.439 123.792 495.389 123.314 cv
494.875 118.476 li
494.839 118.137 494.991 117.805 495.272 117.612 cv
498.04 115.714 li
498.466 115.426 499.045 115.535 499.332 115.954 cv
499.622 116.378 499.515 116.956 499.092 117.246 cv
496.78 118.832 li
497.235 123.118 li
497.29 123.628 496.92 124.085 496.41 124.14 cv
496.378 124.143 496.343 124.145 496.311 124.145 cv
cp
0 0 0 rgb
f
514.834 122.247 mo
514.366 122.247 513.963 121.893 513.912 121.416 cv
513.399 116.578 li
513.362 116.244 513.51 115.917 513.783 115.724 cv
516.151 114.034 li
516.565 113.74 517.147 113.833 517.447 114.252 cv
517.745 114.669 517.648 115.25 517.229 115.547 cv
515.304 116.921 li
515.76 121.22 li
515.814 121.73 515.443 122.187 514.934 122.242 cv
514.901 122.245 514.867 122.247 514.834 122.247 cv
cp
f
550.298 562.499 mo
549.81 562.499 549.399 562.118 549.371 561.624 cv
537.711 363.849 li
537.685 363.403 537.979 363.003 538.41 362.894 cv
561.728 356.954 li
562.224 356.82 562.729 357.131 562.857 357.626 cv
562.983 358.123 562.683 358.628 562.186 358.755 cv
539.611 364.505 li
551.226 561.516 li
551.256 562.027 550.864 562.467 550.353 562.497 cv
550.334 562.499 550.315 562.499 550.298 562.499 cv
cp
1 1 1 rgb
f
347.467 215.521 mo
347.467 215.521 332.291 201.669 324.82 202.179 cv
317.349 202.69 307.26 208.068 305.229 216.088 cv
303.199 224.107 319.259 216.985 319.259 216.985 cv
319.259 216.985 332.157 233.02 342.559 232.085 cv
352.961 231.149 347.467 215.521 347.467 215.521 cv
cp
.956863 .517647 .384314 rgb
f
339.821 233.071 mo
331.898 233.071 327.509 226.485 327.455 226.401 cv
327.175 225.972 327.296 225.398 327.727 225.119 cv
328.155 224.836 328.732 224.959 329.011 225.388 cv
329.262 225.771 335.239 234.649 346.061 229.754 cv
346.532 229.552 347.078 229.75 347.292 230.218 cv
347.502 230.687 347.293 231.236 346.828 231.448 cv
344.256 232.609 341.914 233.071 339.821 233.071 cv
cp
0 0 0 rgb
f
645.526 197.016 mo
645.526 197.016 658.34 180.954 665.799 180.286 cv
673.259 179.618 684.065 183.346 687.329 190.948 cv
690.593 198.55 673.614 194.035 673.614 194.035 cv
673.614 194.035 663.393 211.896 652.973 212.604 cv
642.553 213.313 645.526 197.016 645.526 197.016 cv
cp
.956863 .517647 .384314 rgb
f
655.081 213.999 mo
653.058 213.999 650.88 213.536 648.559 212.612 cv
648.083 212.422 647.852 211.881 648.04 211.404 cv
648.229 210.929 648.764 210.705 649.248 210.885 cv
653.177 212.453 656.594 212.551 659.396 211.176 cv
663.76 209.038 665.243 204.037 665.257 203.985 cv
665.4 203.492 665.901 203.205 666.407 203.351 cv
666.899 203.492 667.185 204.007 667.043 204.501 cv
666.974 204.738 665.31 210.346 660.214 212.843 cv
658.641 213.614 656.926 213.999 655.081 213.999 cv
cp
0 0 0 rgb
f
302.123 212.626 mo
302.123 212.626 285.45 224.596 286.006 228.855 cv
286.561 233.115 294.169 230.608 294.169 230.608 cv
294.169 230.608 289.55 235.894 294.169 238.116 cv
298.788 240.34 302.342 238.116 302.342 238.116 cv
302.342 238.116 300.757 240.34 305.052 243.118 cv
309.348 245.897 320.777 229.79 319.787 225.895 cv
318.795 222 311.526 225.951 311.526 225.951 cv
311.526 225.951 315.46 217.847 312.126 217.145 cv
308.791 216.442 308.791 216.442 308.791 216.442 cv
308.791 216.442 306.582 209.237 302.123 212.626 cv
cp
.956863 .517647 .384314 rgb
f
688.543 191.724 mo
688.543 191.724 705.216 203.693 704.66 207.952 cv
704.104 212.213 696.496 209.707 696.496 209.707 cv
696.496 209.707 701.115 214.991 696.496 217.215 cv
691.877 219.438 688.323 217.215 688.323 217.215 cv
688.323 217.215 689.909 219.437 685.613 222.216 cv
681.318 224.995 669.889 208.888 670.879 204.993 cv
671.87 201.098 679.14 205.049 679.14 205.049 cv
679.14 205.049 675.205 196.945 678.539 196.242 cv
681.874 195.54 681.874 195.54 681.874 195.54 cv
681.874 195.54 684.083 188.335 688.543 191.724 cv
cp
f
294.168 231.537 mo
293.925 231.537 293.684 231.443 293.5 231.254 cv
293.143 230.886 293.154 230.298 293.522 229.94 cv
308.146 215.775 li
308.515 215.422 309.103 215.431 309.46 215.797 cv
309.818 216.165 309.807 216.753 309.438 217.111 cv
294.814 231.276 li
294.635 231.45 294.401 231.537 294.168 231.537 cv
cp
0 0 0 rgb
f
302.341 239.047 mo
302.145 239.047 301.95 238.984 301.783 238.859 cv
301.373 238.549 301.291 237.967 301.599 237.559 cv
310.783 225.391 li
311.097 224.978 311.678 224.903 312.084 225.208 cv
312.495 225.519 312.576 226.101 312.268 226.509 cv
303.083 238.677 li
302.9 238.919 302.623 239.047 302.341 239.047 cv
cp
f
696.496 210.636 mo
696.264 210.636 696.029 210.549 695.851 210.375 cv
681.228 196.208 li
680.859 195.851 680.851 195.263 681.206 194.895 cv
681.565 194.526 682.155 194.517 682.52 194.873 cv
697.143 209.039 li
697.511 209.396 697.52 209.984 697.164 210.354 cv
696.98 210.542 696.739 210.636 696.496 210.636 cv
cp
f
688.323 218.144 mo
688.042 218.144 687.764 218.017 687.581 217.773 cv
678.396 205.608 li
678.089 205.199 678.17 204.617 678.58 204.307 cv
678.988 204.002 679.571 204.076 679.881 204.49 cv
689.065 216.655 li
689.374 217.063 689.292 217.646 688.882 217.957 cv
688.715 218.082 688.519 218.144 688.323 218.144 cv
cp
f
502.189 175.628 mo
493.982 175.628 486.383 170.596 486.013 170.348 cv
485.588 170.061 485.474 169.484 485.76 169.059 cv
486.047 168.635 486.626 168.517 487.049 168.805 cv
487.15 168.874 497.063 175.425 505.85 173.363 cv
509.759 172.449 512.909 169.941 515.215 165.915 cv
515.468 165.464 516.037 165.312 516.481 165.57 cv
516.929 165.824 517.083 166.392 516.826 166.836 cv
514.254 171.333 510.7 174.138 506.268 175.174 cv
504.912 175.492 503.542 175.628 502.189 175.628 cv
cp
1 1 1 rgb
f
564.623 264.785 mo
564.129 264.785 563.719 264.398 563.695 263.901 cv
562.683 243.518 li
562.714 243.186 564.905 228.57 563.799 213.993 cv
562.708 199.624 549.454 184.375 549.319 184.222 cv
548.982 183.836 549.021 183.25 549.405 182.911 cv
549.788 182.571 550.377 182.611 550.717 182.996 cv
551.279 183.636 564.514 198.857 565.653 213.852 cv
566.774 228.646 564.552 243.465 564.528 243.612 cv
565.55 263.811 li
565.575 264.322 565.182 264.758 564.668 264.783 cv
564.653 264.785 564.637 264.785 564.623 264.785 cv
cp
f
445.297 252.756 mo
444.631 252.654 444.292 252.174 444.379 251.669 cv
446.747 237.959 li
446.836 237.453 447.315 237.106 447.821 237.201 cv
448.328 237.29 448.667 237.771 448.58 238.275 cv
446.212 251.984 li
446.132 252.437 445.74 252.756 445.297 252.756 cv
cp
f
453.488 357.978 mo
453.171 357.978 452.86 357.814 452.688 357.521 cv
452.427 357.078 452.574 356.508 453.017 356.249 cv
463.934 349.813 470.129 334.623 470.19 334.471 cv
470.381 333.994 470.918 333.766 471.399 333.956 cv
471.874 334.146 472.104 334.687 471.914 335.164 cv
471.654 335.813 465.418 351.097 453.96 357.85 cv
453.811 357.937 453.65 357.978 453.488 357.978 cv
cp
f
550.936 635.383 mo
452.17 635.383 li
448.942 635.383 446.325 632.767 446.325 629.538 cv
446.325 614.335 li
446.325 611.106 448.942 608.49 452.17 608.49 cv
550.936 608.49 li
554.164 608.49 556.781 611.106 556.781 614.335 cv
556.781 629.538 li
556.781 632.767 554.164 635.383 550.936 635.383 cv
cp
.364706 .156863 .4 rgb
f
417.959 625.322 mo
379.265 528.909 li
378.038 525.854 379.388 522.327 382.278 521.031 cv
395.234 515.222 li
398.125 513.926 401.462 515.352 402.688 518.407 cv
441.383 614.819 li
442.609 617.875 441.26 621.402 438.369 622.698 cv
425.413 628.507 li
422.522 629.804 419.185 628.377 417.959 625.322 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.81A.p1.81-temp_01.eps)
%%CreationDate: 12/17/2021 4:44 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2KKoCqkQ^97&J5bl^DEMdC#Cb1a:\4)D1@h;*U+qU($,VT.hrMa.H%h/>K(4h*p!_ol+=*8Z3_Et9N//O3*o2Oi/op?M!
%eP4YP$/77Fg->UA=Emk/nEZWf&fU]SLTB,8b;'OV(UALeP&F\&ji2bOP5";8FJVs9e^n<q+1ZE.-[/>CjC3'+;Q94MQ7D"eQdd@m
%AY!@i,sPV5?0)tZ4/$YfEPd]BeYs:+JG6'kX.1h#$iW>tpBt2,oR3:FEDH;HU#0P1A8,!`1HKcL$;Uka`4r/C#QB"RhPfNS`Cfsd
%19)\1CcU^Q?d6\GW&*^or[lNaZ&F0uCR,lZ2R.EWHJ;P^To52g?54c/DIq9^3rd[Y5P[lp>6VjX<?;+oeU$-3]ndO\;i\3!T>;@2
%<j9!!C!kO!2:-[S5fjX7&hlH=YH"F(_e55!L.R2[XZE=F0--[:l@^7^l5?P+Wb[>[R#XPO3L5R9dkVRT'rV=R3q0m!rU9'WB7@#A
%f+bf[[DlYF-_Ze3VaX,@gOj+[YIuD%)[&Qub<1WISP$^O8[PL(ZDANP*<m8X"uVE][<')K'O3(EJX,nqX(gk2h<*72mY>/M#9A+<
%HW@h.<&s+:&p5QASS25OS:kT9e8<'Zl(1Wr_D)-,3\Ggh#%g9(ma2hs$H@%8[='7F]iss==C,?Wgk>/j2n!J#.6/bOCW/W0H3q*a
%r58I\gsE5@r2Q.u*#]:$*%XMp-g@1F:R[U%fi)B#>r8`[bIJhT-tN@F=c/T?SB3X/KG2TcFMcYEZ.+g=ZPFD70_!]&n^mC%2k:FN
%%0NegJStu"h\q7I2OigjZC,R)RVh)KD53P:URH%4ZU(L\LH;#^3Ze6=F3d32cU0S&_d?A9Vbo%:7alGthk\`"PKi+ACt?&*GrCQf
%frT!8-S;5IB-bN^hkFiS]`E`'$`[W@pkrlh=0Pm(*>X@DW.ROt0<[M=LMVoli@dB';>?'P,d:h2=;:c*g@5Bd=;OGl0U4FZ2(T2d
%;(%i%=b%fi]S*YFV$%P4b,04PEWL4WEcuJNSpZ'gTSiY5267C>d?R+q>e0c-+V&Ee%;QA+/O:U#@u^8A:KX9c"8l/_7hP`p)V0_Z
%&t+nf,]MiR0P3QX4SaMj!n>=@9%]o-"C;'I\U(ddT"LS^**MtUTM8GnIS^7W$tp=_jQ:LEnnY<=Io/qg3n>_<+rfPql<o1m4J;7q
%P9fqa(m<;LEXmmPTKAaX,T0/f!L!YrQ-blhPH^Au9Ao@$"2k?.PLE%0@!pY@lp-"QJ(3O*UIr[p\<d2Y?"Eb$P&d&hAK,A*E,V5l
%!arG35Z2pD")UZkk&"i?35:I?!7l"'?qp_^\To,>_/t;Y#:%EPAQ)mdp]mup<9ia=#l.Kt<W8A_r7lad5LeJoA5W5(r]#r9gjYMQ
%Xt)`KDJO>qr?RTtX7iUl8YtM2p8e+bk*_/ZC;7o`bt\#Er@3<(erQ!c^`i\Lr6!@%-i&WW$8ZO&"M<afImI@!BK#"tl(@l8oTbn9
%X4m"Wc#;8,(ImTLAZmn9[b[n\.S&t)'mR''H0DX>q8$'c]abuE_J=MjUmFaoBeNZ=Cdp3bbsqdekrP6.8F#GUp\1f3h[K+=7N_Oh
%BQVQng0'#]+D=.^4X-M0PHH%G<fl"[UYhSIs(6>(Je:7XAFk=*L;TXQ4#R+,GAK(#FKUD1gQ=Bs6D%b7gcQ^>ThV9QHe-:Eh1SLd
%%)KXGlgNj-d=Q)NkY<JjAmOD28K7iO@gaL.&4[a&B$.@u4/igJ^"2ppWk0_JruB]O))Fje.;2&DNMPELQ5u`-KD.dfV13;A3rk*5
%b"M#?S7o["bl\7:?YE2.iZpBN?&L=)1`lpI,-PMrmqu;>rSen5QLI#cPSH^K4e!.GPB>:@Z!13i54^G/fVJBP<(G<npkbku6%;CH
%e\aEkcm9^Q,/kg0p4T-4dq:Tk;Q7$BXFMoILl8&_1Ym,6o-8tV[[SY@=THgV!&]G]#EMV6+:0D3+GP(D75DeDE,60+?4%16?ks(,
%+[?R;1kAnlNcg:M(LroMQIH5Z?>/_fE`lJ'C,m&>6:^\aU%I`XO)^nY,>V12M]$*5Zl(>;A.o#].]m)Es3P#;i[>?UOi0[hdKGVk
%-6AS/Xlce5**^-)9r1DoEqB?of,#7A&"#3RVD-Vac%jsg!St5A2CpOKS=ObcD?Rl]Ga;0<kUPR;W-FmHd%437<&Z6-`*H/8A<h7E
%WhAJSKa7E6U1ljS;.RSCEBA[UZ>e<3W!W&clZ437qQaY;KkX#E#;A1V[T[bW.4--EnKoST0Y/N6+c/N`or+`T3NeQGBsJW_RuhE0
%E?)/+'&$m:R%)_B=Y6a!3[?W*NnY8;)@7d[\oA`OkaB(o%h]EtOE8Vi"1eb8h$@F$<n.6qh+Ki^!$EI$iNG^n(&eXRB/m>.!?bk#
%Y\<1s.Q/I=,;^JsEN(c/9dE:C7;+k%F`!RDO9[19%DY47_0H_hoJ$_.18k3=#B9m]>+4(igY'QjN)B[Q415<QZOG2cJ"nglg6[)L
%Ui!;3IO0gpJ4<?V8:WnDa`-[&Qk5aQ-Rf/4Q:LA\n+:0"bEFX"-j8WT9h3,S#`pVYK6Iq4J^N+N+#aTl.#QYF9TgaX[ahP4<Su2f
%\n50L73Y=ohV^"#jJ.V?#mI&\$sj%b8.e9i1!tbb"17$r94@dV\,ac>!eD8c6it%2Bg0J<aG)-qf8ed4M_+KY=kjj6":"tG3GJD$
%UX8CIIf%7_lVJR@S-pGE<9F`,(;kAl>1=_i6:-:F@^B!L[T,m`rB?+FV:-A#.tJ!C7bfY!(R!L.8X,BYc,!+D+H?RjY[U$H!ED[a
%8T8X5BY@QqM'tZl+3h^Sm)\*`kA-^;P9:,D'UHoh9,`9bFV2H]=5K.&!i"`,<Sg-T9;Y,UD/5O^)WGqQ%^dl43?o(N;G]V"FUF)A
%c%eYKM6L+19UjJ9!fI2m']>&nKVciL%L;O9@,I*umq(&H5#cM2,pd3!BH\m5@FJhD$B1[+LZXW$dj-3`F8u>D(1<U3PY$'q(Qkd,
%8J;FHE([AD2\9"K'Ghm)?G"_<J`QrQiGA4'dYl7#]8ks3NG3tmW3XAr#WP]R>+!nr$W@Id5W0`-Q>MP<)qYoHUU-=qMo@HAN"d.\
%ZL4nYL2rfJENHN_l&n%.c:B;b[Y!MKnQ'8575gkd+p]0*P)/Zjd(5<*!c*R>$!NF_/['*a6/8U;bkA>/F#&8u&G"FmZ9c],=V]OV
%)`LR(0"aZXK[J3i/r1^EL]ORs<Er(PJ:Oj4+;B9!bGO[iL(*6%iXO_l/AZ'&/!p7GE29f`+VBEB6i=(uQF4#a;A'BE[hU,e:^Ie1
%<9'e7Q2I(%k^Z*u`F2+_.S($BSbO>SL0PlXjd6#m3/jd&30qq8e1_DO"QGRsoU=la`6\*AA1!Fr7Qfm>TAmFOG>0M/n/%^f$jdB`
%96mLcdF+-s#OGZGGEEV8Q?8[aF]'RE&uBjq-I1>6@G.(aKYs$cV8DH!Bit.CdCWp7OYLBgB+s]!&5$S[oOu"D9flT?o,]>cIf)!#
%Uei%3;V+8OF+n7o19,of*]k<XELDKMZa'QDi#p:;Ro!B%?39hs$r."M:chS/fl.)?ANN(3kk_9/BWm<Rg3Z-A?"DXR_,'RS21!d"
%Phd_@Rge)B<1tgndG&2rC"P(BGRZ^DJJT4!0hEa^JJT24QbUN0OrEu.Bni-rH&G6q"]sDXH^%%`mniV+J=6f&dJrs\f#9:"LTB'=
%gF.lT_?_ESU]trr@RmM`(<dIq(KS#p]j].M(W`K"kh%;7l.;cX]!:-[%:,`!j`\E`8[&KR[+>s*/O=g6VWmFIlN.nt$3]4rF@`^i
%:fh<em),";o44`M2:-QR(j4``#J@M*"X$rKRbdN0BVS".==?GdK]i8'q#)"t_`_Pn:cY5\E8/4PW5"H[#IDd]F?t5EhfVKK&CK>G
%pV0$QZ?\\N'!pM*R6,Wkd0F]XI!&/8\d+]PYkg\u^n[B+P@6tr8iKRf1l`$dYHkgiW[0a>Q:Rb][jG>n'OW?4(U)=.Dc&(W]9;6(
%7,Q;f4_g]s7*_H[KZjuZHCQI_,37GCN'<bO/5NAg"u'/RrG$U5KuYEddb]?;rk4UREeEN,[.`S[30qL[]6"\?^<DCXBLpDWM-6h6
%B9G@pN>r#UE&&oX,h_#X*.bUsY:Tnn$#q4+l.+^_n8p):V1/I'N#0l:73)<\brFMd>,H'A`kA:?_CQ'dSa!;8kAFZK[""VT])s5@
%*VEFp"Gh62cY^EPOGkSn%Y/pga+8]E([;i<3h.nplZ+$b#a#dpCGV5uM6eu(E^n1qQ4WhH%l=U4I:m5Go4]JM7S9-nXO>7$,i21(
%IMOGkhokI[([a3\@:u4*6(X&54D\*+cff'YMlgrb:gkuu1u?=9Wf%ohdk!UV@h]F4804_h+-ijj"B_t_5nG(<q;/<VX=aKa86c9"
%#pPdf$et=u]0]dH08WSuHocjSlXgrTkK3cdM[6Se_<#LpYfS`,#TOY?ceFU1#s%IjBP!Kld?uE&5f]q[<YNgs_)AEX8ip'=*rVS:
%H*YCE8]OC/c?MrrQI+idQ^#U-WO+$AFe9<]2qeQA<?TYgN"]KI&b1`m)-/SF&JeE=#CA4#Wm0X]!EX9BQ>8=MMq1p@#K)W+[usFj
%A26/'CEZ&B"=LJYJGrj2"CjYHIfjb'Pctua\nahZg0/hRKD#6mC"!=P!L7rC]kL'05VaQ+iWI5,?VpBV9gFqN"_jR<2qUYi=HD&C
%`3llNP3pkMACE$na!dYUU#\Wg.TMUN9b#uLS:[r/lAATrnS5Un0`Kg4N-%No1Q\ejKU&qOV?=o:?Pe?'YK2I)A6X><U#51p^%9dt
%VKMP>H;hmAGU[JFNp)Em;@XZh&/7`=dWV'(K6HB$E#`T:&4nQ=FI6a()7K2g1Rt;tj1l64b6+/VE<@ZM)R9a:Zlk.>#tjJ40pgIL
%h&+?!%DZU\oJ"K?`,?b:jD//H[^be;C''l/:0Z0tP;m8\m(KW:bXUqK4M$K6J1MfaZ#q66N!XiI*%1Q4!5W0<\/<'BfbQE?2;b^@
%;Q52PDB^]Z*!3diUOs:GXGapS,3^DM.E5g@E/VB[jM?Ot?A?7h;FW^YLnLWqjB68MhPALpanHCo(U>O@B\e$,Xl#r1HOM"ueRdE=
%8u7]D#;24+#g?:,$^HLg/<Y-Y0Nm@PY0ZQC88J_)mYC>Ef1qe*Z@R)DR2L!=?RD;3+)6hOC1gO>AG\hM4/jA9^SfM^,<oJ2HP@ha
%eTiDcWO6aj>5<<B6*GJ<5b6Wu][$1\40.su8VTQM2qLiYAd;"4QIcC#[SYR!'3+&2EEWYn7OtYu_L\mEeOc;i_T'EqE5Z@EBVS]D
%rE]T=1GO2@?!jM))ek*`31EK'ps:4:['7Wja7QV]e+#LB=g&@`Wb!$B6P$1WG!#P#)9me^q)t^p$.5u.1*V9822=g2f8:Sd,pM9t
%C;7KF9$1(7Jn[Dho0-1OJM31r:q7uWQ)59_i?5H\S'6bk9SWdW^oKm/h<-[?LH:Wp$1SN]&H=#UIjIFQ]lpCgIbQ<1S>I#b*AG,T
%>QYTG7N1$90%*7m3I8:fEfu+Va(anDPPmK3=BFs,86eQ,qV/4+<72oaK4"Ns.P0Y3:R?`gRt_G8m-*B+=%2^9VaN:qE2&mB(d^,X
%'m>pm:M3g06<JQmOES"nO[gEGH8jH21Mj5O>l>/0L_8c8[d3TUdUr"7TAMmU7MUE&$[Wk_B:RnCVhNB9!S7XX\*;$MDM,l=K(>qX
%rE?$s3EP+H5O`lPI\U'E7p_t3"XgnsC/?JA3l?IH[k#47:\IFUqXS@&d]@>OcRStmD^ehfSGKL#5MrEhMEh&+D"%!(I9;L]n]d`3
%UKT9GIF..XSOBV_>oqC%[Zmig1&3E/jc@5nPkH!pXAZZFG9BO;bMW4qV&JW$er.u:IOS@DeRJGFX2F>a2u4jkE,'TRMLOS[Ud"`\
%]h2\k?FWa3s$J8h^5=`]DQBk(A"//r@:?rb6gG_@cSb80gVqWfPk!24;Q4nIb>g3Qq,jZJXC&o+.[<nIX?PON+;k*<^I$-&K@87&
%cAL_8?],p_M[dEa:?AL5]6%P<(V)#QgGKMF!Oo`tg@\Z@!48md,\mkB-K5)EA$f:;IO!7,P;LEjSfuR$N6\V1j/Crl*(9q0jHg8I
%<ql/p]3e)M=Vb`.5H[a3V.0D'4l&rVI]h6Mk"G^4O*\\c+Uk1]O):.bpcqI$.^=*%hPaZ[R4UE`[)U\raZ%Jp:6Jhu4SdSe:P>kW
%c&7!P,&&#AO-`&L^)+u$q-gfs*UA@m='.2ZY)ZIa\gG0S4FW_NQ5[7CH*-a'[SEIOltl,k$9l5N'_Ai@3*5u3iiA'kd_Ak[14?]*
%kcGRqRgl!/Fe:-1CUIDkSbtp]<2fV(Xs%7i>GNoU?fFlA#@u;3i+qX(=fPfh:A!Z#g*(TE54>TL/QZ\e]#DO:3p#.^X?ptnV>Ia/
%(gYT+7PEf=0:lN-+tP%=G[&@JZC$+dXQ/3m>=+%GZdA+1UK;QW]Y^"f7p&tcmI@'cn&7WR,/TLB]lBp\*tah/UIBX,juI<7Z-fYD
%NeTjEY;]*O`(3_p[Le>X1eDiQrR$OdX[XqBebQ<u8;pkF\TtTLDreY.;.N5-nuZn;6F0-7lSM];ZShbuPHYpY#J99Yf&Fi;_a]cY
%\^:edF$2XD+q!<jC.AsrK3"WU>JY!LjWBKAZI$OFj5F$8FBE8.o);SP"@k-Lb>CsLo'MRp^^5`2;5sE"*-hr)QI;p^Ro2?U?3U_V
%:;hrmk8+Vme2_U`JR/9%/D,1e4b:#"Ihpe+(g#"Q\T6M!RCR>o=)R0CoioS_Q(&mtm];^!8#<Rs.FtE9R>[`>-IA0=&5A_kE\h'?
%k0)"s\X>*0oB#iEE[h$X?TPj@'e8+=@roqc.Z\II9S#tU%4;hKm6nk5FSe.tV</m<3/RW0"QuH7-tN6o7=IdO,Vq5]rO19'/MrL=
%rEfBf2Q_M-\RrN]b`u+ZBlL`Pk/u@[h/<^irfj]b+c8rEgnN+4AIVKnD;c71D)B?s.D3C8X>5oCN\nSck+K7\,)\r^*2kf3B=Y[)
%R*V%lKEOB;:CkY(atcS.<00;4YEUNEp$W]L*T[dCk!q7-aa1GY5t"f]0jM&LX/.?.H6ZLO_GS!@DJaf*oEB.3>HO.gCFudHA3q;s
%<BS9Mir*8**@!/rB7sjo]Z"IGd?a<LIGd>$A*d9Sji2JNE7"PJ2iU2DWnU.)c]"I#0R=qHB^G,=WS?:>AoqNDG<*Z;!gJQO4ubSl
%+s;K7],Y@RL=^uK@r+A:7U_BOESLCT4o<L7>-W'ejYrnbAtfG"20@u'K_!bNs.Hl1#NM33c2:%q2&Of;*%0,?^<Xa7UdTHOr7\[l
%85?_'1S+=9UU->!q>@rXT6-o-9%A=hB7uB9/B-dja#50DB$;Khs,g5!qD@:g7H1'+c=;_C31?3g7?eqIfLtp+KL>LA>bTf/+u=h.
%[i;RH"6imrZC4+bP`)iBI+(p2X]iE'>4hqu#=]8KA*AY@e(M&U-Pg<'Cto`J9R+g8f1d,H6?mNkUt7FCTimq@ADTj)h^0Qp2o/Y$
%Vbn/e`%ZCg`Jcs$:Z:"+#`6Y:GIB`!+rPU*98d6acRpW5>u:$GG\GI$p-^C&#`BRIjYIWL/HR-];%LIto#[4H#0lr+kT!"C5"f8D
%b%8>0ka2)<p*dOe4\]g0IE;cL1tQ)ADj+DV2OS$f>0>rT4Ps]t=.N$M'>\g_*0i;h2`tF.W4N>id1bL'6o"h`?%6Uoi*WSKXkrSk
%oO@W5'XKj!GfqipNO,$7_anglj]_jpHZJ1OKZ/n`I#E##FqX6rM55NJEr^F>\?0!b7u5RSo(hEJF3+>](`MAU@na1@[E;L6X>$f#
%>O+8,Qr&'//<us+\<Ur/.hC(&iD?(p*f8uX^"Z^_c"B6b!p:7)76G9<$K&4jhU\\N.'#f`M?R4p]f"kChfD"+&/n[UNEe'0%3]ND
%)Hn=9V\%se.Tu)GQ;K,trEP"s-2Cdp^Jfu04<RVr[MBUon-Ma?@.7H.`+Y:[=oVMcMd3f;(!-Hcs/0H_"W+N,V^W9*b$rBI\QO&f
%R4("6A7h5X^&0QYR4(oJ1\T$UKpa>dY47sj<0TqBAF+roZNhT/TB2g&UAC:T>a-Xp)12$4'k/bHI68[`.$72l=Y@iJ(Zhi6Rq]r4
%a\Phf8sI;R]ulbC>a.cK^pr^V&IBkl>a05oDpsr/&nNe-0AiWa(F>78R?/!Jn(ab-`138eN&DihSF"Gj,,O2A0JRi34A65/robnN
%EsC*:Ipn*#ml:-fEQ:Z#?W#h(PB+"R[,'q/]4GS$f5;kcm$V+:!.pVDS&r(+>al#0[TTAgRCP43f>^spq&n+R<1?IelUeLPYr4Dh
%Al<ImeYYd8Km/2FIWLss,RV!d+SaJmb_b$RS?^K7fuTSd;$7HSfP&8oh/'H*r7<UhQZ>;cVVqO8J)e(1Q56eN,fn*<*^n/5$e:eE
%q)>.:\((>Vb.nrP-LK6F@_(Eh(!D6%-ea\T=S6`p9Ve^/6?R3^Bs[\AL9o=1hrg`SoF7M5FGp-51&B_!p[l$_?c;q;[di_0Qeur0
%G<.@)WE4*,bNPcre>4gnXGm2;NA'=()P'?DK_<:EmRLL,f_[.J_-t*t!<4-c%-'a0+3%"Zj==<^8t@O%]k2r<Vb`d5)#$b#JJ7qj
%4%PR?bBKM@k-lcFdK(Fa]G-a1gXdW;__)1r2nTW"\hu,g_A].falP*\a)F0n1\P9<="?0]Y5Ca'&N54"3O4W&p=Fg_iVu4@bT4?+
%N]6tK8oO&uK/#M]EY:;TY,PnY`<2R"oXd?DqnLU!a5q.;GIIN5g]*i3s5&>23nsZTn,6T/Rb.WVg."I23ns8>7;lj3p3`e/5p*Er
%ho`H!H=qT=j63,Zp3\59i\BtM^4kS"=Yn4<*[X>b6se9n97dG36+,?eV+e="3=:(Y>25RO*C7t.CM2^>*(IUo]qbFkX.aOjfD=Hm
%8sSk?(K)`S?Sn^uC*%TN7T`W6K/)L@.E\BJ?UsL>H>20a_(7o2Mic1-AA<o\VD1Ca[DKq/c1fC#V!7ddU;l2<A`I"";XtbG28?@m
%WTD8)2rJ;AZge<lc(:%Z^7hl(-IjYrG3d/2mRGhOaSdYr2&h1>"4r*iT]U+=SK2-!IYg6WN&uaYhK"u1;e0Nb)iSp?\LAE\I;^VG
%T1H8k=8b87o<mgD-(rTD&RuiB+NneoK+S\`DnpSK#kmpL)/JqDZebPg=t0@#>%"ta/FYD&]Z^F1f3R)]n1s-W(DUPEJJT&TiV:SI
%n1kBabQ9H(^rq3Vn5:1aa%t1hs"&[W$Qr_n,)=>"R734W/qS2I<K2F>AP0.qp`nsiDc8Dcp14o6@UhW(*#Rt/6no87N:sd=1D/`M
%r4(W?0l7G`R+dHFU*o<Q/t!QC2>l&YRCH8Y34jlY]X6]Ugqjc]n<tfG$#qA+b&L+"s1bEN-ZQp")S1&hc6CPO?b69`']-QGG`aLU
%^<[k6F-EYk-;cNmfr=lT=,+t[Z]C"ORJ>h/Q*[g.hn\l"IN]nU-AId049`&&iA%E=Bq3d/81eqbiSWBo_sbpM^.k3VA!ZpDq>`Gd
%(6a@#lT#(-L7(99G;D6MR<`J0je5Ddjg_mq/W=#UKc_lWW`AStQF!Sq&XF*LhRH!qj1fSBZ#3%)]^Ng+Uf9lbDnP<eMQQkf(<77&
%kKBI90darfR`.#$R?cPVLgrhU_^pg&Mdq^HYa?-+cJfZSO-Ece@oD;'NEi8)Wj.Uobk@GL!%B!5?8XGaAX(/m4kZFWEqr2-Zs+tK
%abH/L7P:XirRftB;f5q/dCR(]\rn1@q::Ah2^aU@:,6E*_Mp[U\[nE8q-TV?3?Q3bl`,G=CF`Hr)oY9q:nY$;A:o1u`DRu@l_lt?
%@Xh!')N$r.B=5l^'^a2rDJLQ)/!D11)n19-dWF>%Ua73IJ#6)"@X(jiD\Z2qER=(/TL%nSrHj0kQq@=oCP2Uci9.%A4)L8herpsc
%N9%%"]DF:o*[D)A-LH,@=eKjnTd7*Bg&gJKcrn+TMEC(V<$cr]=j/GYCE-6d,155"UjPU6b&f"Y2+T2ld?[+/Pa+7CZ1nSR.h`_V
%f+QdgN;Y]PfJ?n&(M)CHS,:qJRX&s1Dsdhd>Qe=foB+'=Y+Bo[1N.0nc-<o3s&O#;KW>e6d%?6#WgPq-F6@0'gru=Y\T9QNY1K4k
%?)\O`CUkiU0`JeV2-%BGW]p%:-H2I47!TI*bseD>l1X;;loKlWB:$YE^dmm;-MUVuWB9l9]2rI3AO9t\%00<R'up6)N7gXlj!MEf
%cNP2qP;40GH+Xe8W?SKXlikpBM4AGY[,go/;D*I0&X,YKC+`k0r)f!oc`K-TPbNic<P;UKUF[0?O^'`nb.l5gE2KOdZ(_S]=X8:p
%G\C7_dc2\3,!SV=@Y@qW7q7Rk5`9SmL0AE);W_Vo8+@&">MRfp,34a6S$fS-hET6IU=hRJeYgFg\s6iS^PHt45mb.J<+0p:p'n4)
%]>5=?Q]u#XWNW(?7%H/Pg45;A%G*r27Ki7EqcURH7bWc7e\&$WfFdP)nk8U(@`1?-pQj(%9Tf"pG-pYhqgWW1X;JF3I%!TAmTNCN
%SJ[9&AgtqTL%2Sc!ku:$*T#Q3f%(X'[fj%nr3oiYqq#"Z]?)<;75LEHAeY.;Cna;9__\'$m#7ZS53RI>D2>0LH-`e"a&!BO&$VZM
%0bD/\]c:!!]FIoPXYiMnj-NU[jAObk^]0GW^"^(,ZrV!J>ksMRD(nh=3VrHr[=n,'1<uOtOq,Jda*S8J/r]*uK/$;b1Z`k0g)>1s
%(e)9%]5ij*=u3iO+o^Or2i\45s4;AQ,Y!l.%i_$dULuXXnOI4HOVBP@2NC?cKW";dT;d31g)k[GpoUW0G0_]Yf!C9kD?iU+WHEV[
%6I6tbnuEaQ(ZG(HM%JXt;70mem.?[Brq1Wi.N,otIN(^T";Pk2ZR]$j42^9&]Z%gRT'`$8>;E)"M4XK(1A7U@R-\Pj1Nr-RQ<9]4
%b9a#AKJpZ59H^DEU`<+\c,\FT*QHqiS\!=^S*6;DL>CaR#8,5n:5hHbUHC#S,44X\8ao;KW=s2H""eH:r*$O2S#5u2+&]2(\1-4S
%SONXt6q$T6/Ac950DIMAFK;21/PD:DZ^a7I822ko7$_e$>&;p7m-0JQDO\lBknds2>>5T9(C*H^O(u4Gr@H*T'ZQ6sYmMA-Sh_8P
%HD]jVrpdH6FR>hmZd?bM5RXL&,tk(!,7,^E_muq'S<VsKUnq2mTc%,,+\3!_/R:Hk//MJ#6fKj/745^4nil``f=e8cns"W1/;M"9
%kC:*Drm$edm?a:6GE8@J6PE'-.]7_H<GU/=@QV,@mbG"bp1ac"j/=V@o%S8h<%=J4\Z2YN<@Xh&qV05$o_EfM3L3JTU.'0!k79+\
%_#1Eg5r2d.bS4@PInet\d(eI&IntN[X>LK-o5pPunO:"Z^!*+aPY:J%*c`OW4qd,H&t(H"*YtrZ-,3GOMs]J!O@=eODfR6dTK`b'
%oGg.tHGXhfh)"kd7V253dra&Z<5UXd1^T=ahYb0ekOe0MQ$k#V`-,VY5AII?5P4%<fRZL@ct#*\*$cK#>n=^V/Sd1jp2_OpdI?6a
%p.qkJo;20de3goHj5;UW$Hm\c'@?(Cih-8<kNOqUSkj.OlQL#43pf1-n"OBY)q"np5(@kQj6F!L6<F1?//#Nd#E>B'SZ1\>=6)SV
%EXeb#Kp/p;!47B>*=@f6=t3t>KS1L#./)rV<[ROWQQ,KY29<9W'[bg3?QsCW$aIT=V&J)<(]8d#X[64!c`i%E<9Jd]VjlR#ark9$
%E&,o[=?'Ge/D!\3j_FIJOd5uI`YTj_ldfn;SKB4#<2[\j*gAQD>EJ+_8.Y[=0#Jq9\AHdG-P>6`Z/nT'ZuJY08sT=N5OsshSk2cO
%G7qlu"(J4B[;Z`ff0t@U,&p'dm+seo+VaLlHD>NR#K=P^XR^\3DuEo4<MJoh./f3ik^#As>7S64"ANu1r>U-*3',=LDpN(-=LinS
%IJhXm33Yuf<6S.!(tVL6:0<fr`7>Fr>\V9jUHNgfV\4=Hmd72S)nE8:\[->K0j0RA4Y^tKOWINGPA!1^p@ai])P%d:->i?2I^?Y1
%F"WBQV(.a=lT)((aHG9NcPh/<iq_e_.SlqNdF]9L/1"j5R3*J5*nCHC\ZqOBQ/BXtaNXJiPOX*I1@kYaK8E!;U"WcS,e%kYer&XP
%J^gd@Z6c51^[0Q]q_c.V2e!s)[3_3(>@)-dY@#3XEqP/o/,nT@=mWr-=%^_<Nb):E]k4%nCd_sRd-3Kum9KJ"R61.Qqitp&g-%p*
%jSK+beo:srS_kJRbD!^>K!1f4.]9i*JR<8[l@%g@XcFs^E*L_YW>B>XGJ0HGiLk;Z]N-T%lG]A]7GG*V.o\N1CReFG[6fg*>EA$u
%_"U2`9#6.KeQe@N;(l659=YUmoRWP:18A&[[X,X0eM"O)b*@j8YVB/(e61.b@0]&rjpH[3DeK0C$IrU[>@uHePt%8BP$>2%ZVbE[
%^'/jl$?n1+7-la`VbqTS+<1^V:ragHelo><&8$_T"/^qjM1BXVT/uX*O;)iW,<NUj=7V[migB=@V+'ct7pT`Sg,D6>jT!tjD&/"g
%ghF#mC]mp@[ggr&9d8MmFKYNn=$I+%_JKn]^0eeF</olrs!a*#$2A6+haUgr%&qG*ePS?>1-9[1&hUY7UDP5]bLQJhe3Xmaq5%QR
%O4>2Wb,&J6PnE$:OGHW&Mld]k/i!XhPsBu;HeHUD33d?#RpV%4Ee>Lh<uRl:Q%oN0(cP4VYZ\(@HKqceG\0<Zn!d[ber!n_"D\8R
%>@T!_rC10@.Nsq=j!3;GVj]7RX$g!E"T1o'F\[m&mk^eZPA3?BQ!deg6)&uk\?uQ,?`i9)"#WiZ9%HQue3bDU&UOP6Id("<6(QE?
%rRt;Lc<p<)F'<^q/,<EV3iJfs\Af-CJtW;>.*R?8K_*>=P?Z^PW>$oDR-9j58`-t&,K/^p[=VcLZ]`tpDPbbVI1*-3j]n)?9B4WE
%hqQAY>9V7hM\q;dei$%$>Yr#<>P56tm;00>'#Ygu=tu68[-AW(O)=;,?@OZ^/Ac)P<mQ?lfd=R2.N,a]ksM&ThD@b`X[r7q+=YLu
%mO8o7ljsYe'qQW78]A#Z/9r^&OJcp=+:6G[KP5+q1K6qZm8`Tks7K#1"OI!(mChEI$cV7.#]LlP3t*`JjtJ#Q%iYN18t/1X`A2MF
%9&&U*3l4-BlB#5D254!`7>Bd@P8jcb]c4t<h/[$_,\4e)p1>[toN>E0$2(2']k_UNoBdj-+g`(P54E6$D/X=Z9BA"H,N_Up^_l99
%B\i@'<e,&7A%6a7$i2(uo\:P9BDo,<4XF?>NpO02b`,G[UK06]i#6=c>2?B$-:l3=A31"frOd0^<BdJ%6F(tQTEgI!>&7I*T]?=P
%,N8LLo;g'Q.9(WTlms;CoY<L-=T9jP]<(bVmg#Q3m[J?kj9HV8oq;Yi2bF^eIP'X+/S4i9,47eaoLCH2,Ju%%'\"jP[?_*+Et'@&
%p0A*W.p`g^3u?n:WnjWGpg<!;H.;au;2;8De@XqCB=W3&*Bn^"'W`"dM"4LK15=3af;tJW9;=JEi7EnMj]imEfWujs#G]/A6oO`M
%!WjY^A?(G0LmEi+V>'U,!f.AZq59huhi!8/&9nIa6h*[iZP$`olG=;5EX(&k$QB.Ce<7G0!Ba))0S+>I@5)?9%]e,H7(B]U%Umq'
%iJKaZ;MaWCMq2nR5'gqA<(gK(h3kuWXqH9t?YNcPBVHS1:fWTOg\9p@g/*:pWuln5==P)9jK<O.rGCM<ian&h/J?[Z0)%01V.kQq
%&,h3mWdcnS=nPP^%[^K,*(,%pQ-5H>.XPl_CB]/`I@+]024N_*&BOiT:"5Gta%ti5$,mM-:KJV_W.AU@Qf7'0A13t^1f5bK.Q&(B
%,D?gD=M@Z[rR!m7Af)La[:OuRiK+R`_\t322Gf/>:MWE*+P1+8pCTEuVXm2KOD"`snR:$M`<##!<JTB+OZe.47[[L3?`jXI3W6`[
%j7^"RICj5.92XV5.k'MZXecs7=&?"Hl5)Id[X&!&4n_GpFc@C9gT^[5T1QDA-\`98%pVW5j&!JPC/RBWPU9Y%jD1OCBP[3mYQgP9
%,i@Q3KJh;qWTIu]l4?QI.lS)pdKli.2?lZOWeGIhUKaK:;e#5W+N$ur[JDRnG?V*nXM)p%ST>WJ4)E)/=CB0CqQCEI99K..kag9c
%m@M%jXZ'&AUZrOce_40&m8Fr%fqT5g5PDLClK#^qjVc?TAcFlJf]sql,ic<qU(UVdd"ru(,,VMq[rXo:CfMt;:hT1OJhEa!lfXrN
%OKm>6^(o5-#5!,rdpG?7[^CVo.n<H$_fPnT.i!ie-.Sqno9Bo',Z.OSW769VlDQlTRp;`8N8jHilI&Dpl\m3D#%;`2d*6`I>o022
%Qo+JFThU6K<&&@HPDAD)/_A.,lX&L*#Rg0II'`))5>Righ`c?sACgIGGoPGl6LA4Hn8)`dgXt/<a(qldpnITNi5tiPPD3/_mX4fo
%m_*IDA/CkU=+C5I)36G#cG\c;m`rf39@)e">M%Tch##e(Tjcs?8aYW*:2fRMnF7pkHos(0Rt[4$B?kpoHK%/S1KqFV"ma;#a03\Y
%k3cOS\G8/"oc,&4pg_Hc2]h#>Sud>30#*F-H2a1Q?Q)pjZS[H_+!f\@05'opq&qpCd4eAb-Be,f_`cM<4*\>U\SKR(qn$OUR4d'O
%f'ng"C1S"_X*&`pWq3^QZsW]fO0A%mFn>4"Y=j,(UHb?8&f7H'r[:k.dG/R(Wa-d;55Y-EVu=oD?>Q2SBlhr4R:\3_Cd5XHUt/T@
%P=K!G$e`eS4[JRDqRCfsBDm8@m-_36b_r@gM4qrY1oPc@^e/W2IN^IN`fA-qH,$M151U6nr`lP]WBINRkJ_N>B_CaSYo-nCX^,0p
%=p].7c1/Z,"q"_..2:XNHm]:hhqk=EFQV`dl]i,96usi-:.r:tiY.Sa(5'bNlTikS$%9.&d%7JZ7$DqBpt.GflmDA&WOM=+Op?]]
%MlFt/H';mJPW8^>BdNB7o&8_?jitK:W=S^ceE)#8rfaO(Ml@7V[Cb5s]qOU##RZKV?^"QVo4I\^G&,F4?f[9s`J;dj=#P92od=)g
%kFIm_mHgumghGo#r`m'_rZ])IW)7UMPfh>(PDAn)PgdVC!fhai=!&J014K2,Zha#?RsMBSqrMkc`S$.5>eS`rFj4Q3A#oTFDt?r?
%hb:b/4+B`pr3DJhoj5AYC_aDH;Ko+gPEM%X=UV-fZW9:HP-t4R^2iId"Ja2SHqn0i=-A?`pr,j?;k-!FlF#0--gA7@8U!$HQT8:K
%?t<.s4--rbX"aC6M>:e3IT^$;c]cZjT.<&$&s$[3RmaosF?KQtGlojn;[?UApMhh"]_gi,r8,#/O,7.OQ`;J%?2B@Qo@]stX8TD4
%YEi4\e<eKeI'j;*O"\N9(-etBkO3&,j*/GaBmd`?/m`q8B7UHYY%phn992a7j3*pIQ2&$/)i=@4bILUMrpcoHq!*XZ0Cd!Fl>h:>
%]_F1`?1#CclZL7/)tT%NEMN?PNa%DPT#^6qo:P$&ISu*9:Nh],QSkDSf3cK]`Ad@8H7Su6n[0$[o]Z*Wr:0<poD"NT^(O5Dhoise
%n)mL+Ru=[9na-8,-h1gWeIV2P^$:"C`G.1Hhp*gD`-3<,/B@K$mB-0,dpt1^\@#hd?YOFb`K-Kqk2L;/pG_.$:**_LQk++A3Uolu
%9-</cO0&6Ke)Q(uGi;Bi:Ah3_BKLZ?aYi(EMqYN4eb\%(n]G1tC&DcGp"+HK^3DOPho[h>k,YJP\]*(rinVu$RoaY]l,VN5C45(4
%S@4X9Qo"B*.iN$FqQg*JcJ?1G1q0_rr\4*1DXP?rPM4cpF6SU8_n#-3(ZsN(a0!eFp4m:-F*iT]F7,^nZ97l]EI9V;<hk[=,YN3"
%-\q5U\^N&IqJ9Y7bS=J^#?UNIO)rj"G72;Fm_6!ik729Ojql:_(\>hhe(=2lL\A'"h0A82>DpMD]R,pEcTh3;EAmjXi6/b.bjP)9
%q.GIdG(0>]jhpom%kl3'UG!-ZkMOQ<hjsf2<TiLcqmkFnIsuW"s$aTq6Gq$6&(29cou6"fS[lGSB6We#:S6NIq=O==NjeK;b8i,4
%lKXE(iT0<q7k^n446_]QpWbQ>\U%n$jgB6oi-tX`S_&_kVft>+*Uhn-Xj=bsF11]"im-ZKHLjn>nMIK^he53L@29X9lu"JX2",lq
%d!'Qm"hTn%=a70_ph1hISK0=F]m+h-Yk-l5o"q)aGd?g^Y46,_;sEl=6K(Sb?MJR3H%2N6QG6U^(NSZth93[Y`Pgb9FjY<n2AXp=
%p%OA?MTI._B(;jKr*j[/c"21jB^u)>`HNu-ShB04U:GO:>ONBORFd;7k3DO']8Q@6X*7YD[5W<Sj,]&/)_X-6geGJ\R!6%5%L[LT
%5<O7>pN:JTHM:A0@d!0IrH@;jeb7S9h8\Q?a,l%"+$GQ9--j.^9=AK:00T6m2O68-)fM$c84G3PPn+[t5((H5QO;'>gInB-AhQ#>
%0BSShVYpA_>'ab0g"G52[/B\t4gFqWCSnhYT=?F'^NlE"^&5DRJ$E7+FG+(g^Qr-jhEpAjb.YaQqtYU4a3<.^O.Vi,pRW7Hr-L(5
%/%L"F/,lGnVkr1(H^D^4n*`+`-gt-&Qd7n!#e+i[ZLMc!F=$N]4'UCOT.-nThK`%(aj&?P<kdq1M3Z*9JO@?1?TOTNh&"bHh>7^`
%/+;qFf!E?mHhmO9rO3mCNViOt`od6#e'$@DF601?e^]@D/$$tlC2u2Bqt9XIMpba>p"9+KXFC0<H=un+EH&2:4Fa7T<`8C1')(=!
%.IlJnMI@,NNgF'"Njg+c8`X3jHBosB0:18PSf83k<Y#[8fA+6U[?b\oqm<f@hD!O;]mBZlNQBLNqmugl<*NNu51#6io9\0@/!neX
%2tlFBj7CK1mI[5`Bk82b?eAQ9VI=RpGBlo4Gdr-pDrn>HrDgfKqPg'hkiHISa(""C0e(&Y].;l<A[<XgUd)O-DsepCMLp?ALp,S)
%GE(_.@G.m0jj-EMqY\LgG>cbHO5?ET`g?(6f:73$VpR3\=sL^i5()9>Ra9lobaED;h.`8UgH0PaDVV3q/!ouKQM9+$Z_"&C$eDAd
%]k&_/HELCXn)&3QHhUF!D--c8bg**:%dg$D_\;pSZrF?GH>aUjHQPr9nWjPcBXjt4?G(9<+,NXg:oiAml3/T*S\<YCK4iN1mYc20
%FPf78fQE**Sp^(jpRVXdpb2?SeDbJuHb"Fl_#*KU+jP9Rgg@ftI/@r44ZaH-nb)\AqHNuo\m@LFR%[qHm^srJ2U(gBlp`=C\%ZjH
%q7++8Gl@R.7O+hEI\8:;>7[=$^D%dV?f\[;jP19h&&+XKqttF+n_<]R8,!A6%sN(2q1g?<G@!D55.?J@pRf0u4aNJUrV1(#`P&BD
%-gu4D!fsA#lJgjSeb%t`8%Z0iO8#[/qi>gOqjGL4C<h13[eFn28^]?]4ulkOLd*=n>um0Z:EM6R7db[Z\QO0(SpYtcqCMI(DXJ]k
%pVGsXPkVJ/Q$Q<XC8k".Vt6m&/\aWiU_CB7N-%s65>!"U)UHlFVb`@0GMY.a)/!lsSpA&:87Xou^.;k9T6Cc(f+oGC2cK.XjipjK
%ilTI)]rSWq]<B!!ZQ!Zr??Xr8I$HkNCXeurf9[RC[8u*Z:UcX61!J+-$i-?k?WWP/cSY)ZqH7FFG5:LL`TEq.=8,>M>PF1b4PEC[
%07VZ$off#)qVjZ?4^W)ah<0jsq3C,u7i*8>?QAs(?7bKWYJ5>WmaL\6nub(fT#J_CP$<:FrU<55/FE/ih;l9:MrXP=G*_grn]mn=
%._ToqW[N&)Uc.5E/'dt0DURBh^\c`Rhqbtln0,-)fZA$tANjg;n,6M_rnc8ObIdZ2+ud9Op%Umqs.o1anM:+6XSL;h<p!`VGtSN%
%bfd=-Hhh&`D-oALCj^44Nnq+`#?SO@Sfb-2Mm!V_XrX#RIbJ#/*l[;+X;nc@NuoA/Y:o8`SN"hh?ermIcbE)cJ$K"<h;OQaYA-QH
%QcI[TL\gPd`M9!aZc10BYEr1C-4TQ-H%,JPofIA+mWIp`dH2DFfuGaap/[J;hOIs@jPR+f^>llNI!g)5p>^MY^5M03BCFD)[NE7G
%]"_QsGI=uorE_^hhg>C?3</WbnEKSmLZO<epkSK.n_Js2Vq"9Ziu\qm1sF""h=]6XY?i8fJ#jWTS53bBT)Z/6Is:UckhLN-P'HY7
%o42W.G>@^I/lk.hRp4.`l*>d6q:#415'LZ*oL&':PN19*G>IoCF3UicQ_tc-qtm;3L#`-\g:bsf]XuoXVIB%NFo?a&nmX+NYj\36
%.D3l?[DLJaqdnZ4Y$(c'_fmQEPhnAZ1S0$>TC'=@dlb6)HX`Ka_Upp,4'Xm.^T:Mr(WOYh`l7r2eaZ)mZ;rKE+-njC041ir0:$gk
%@@2MKp[_Tr%R7%"IArfV4hUD&981RL9[^JQJ#VR&%lRe+V701T^RBLjp#t\_K>Xaj:Eo\KI!<]E>Md#nIjjL3["jqD:81U2rlfUm
%\N#$0TIR=^q<It<aldDM-2sEhq<EEXA:8m>Q(+hnNJ(YcP5'9,41XN:XY2>tH2mW;m0*1RCbqUZgQRq2%8@(A,o(O"art]%-SrU)
%:8k/Sb5Ln\%WgP*SS"iuXHrcp=!kaX2U%*@b>Q$9aB+hl7TV-KX*bf&;=ST:TJu]20V8`,X[c)ol2=Y^eE#7oV&$\b(1t<(%&UY/
%adrVaOeFLk(J,XFF&eVK=nIISVLkso.cj;%U/nhq1R7E?H.8uUrMk>P!Zf@@B4SW>)iBZ[MZ$/HfSX85h(Q9-;W'62i!.R%e6`p5
%_fmh*9KU+A]KMX"8,lT+A[#kp#->5g[QW@sClKf</$8SYh`,N#=PcuI-!V$LI';$PO'6O41D5F0P7GDX$DAd;[E<3dZ(:dN[mKAt
%=5&LsSqTX"::a=Un0ZmjJWNhn/%.?dLXDk`%mlmjBEoPa&%nl\ZH.R`Vs$/@f,K(K]t[tK%0VHk3s<k-UW<PY0e2&k'HEmI8k>sk
%IbQ@88UP[@BL'J_$.GZ&`'BWrYJKS#<u<Z+q0M+@&DFc7Nm^\:)jX%L9u^&U\m/ag5F>8/2-o?.Ng?tE,8n6kqM_<aKfo3oEsPj"
%p.'b$8%%@,:9Jd93h0=tXHA`ukN[c0",;Zk2")k.4,tp%6fbsTK>O^MqAl)`+?(O(U9J\Q3ncC&'p%sdmdp(2_E7S2V\[/4mdNo3
%;9()>+f1+C_\<YfXE:@7$lnZ=GmZI3PT'j0=<ol)l^!!QJ2!M=YbWm,)_1*VP[)*j\nGE@Q?1$nclMVK<H.R\_>s-0>-WGmKn`/<
%D7+Se7o,gGjUUT:@+\ml\K.3/lGs,G8D1oeeZ'_11^_<_,]k.KO"Nu=`JBF]N=.tJdct:0,-];WZ0rKX3EFIS")[,A0c9B&gb*OZ
%fE]UMnYNmkNQ,ZQPtJuNld.BbXikl.*WN&p@oY:Q@jJO3km[&<A>eV$@Q@I?bBC.Phf(eL"1L<>'+SK2$9H?,Yp-++k@19XD"e#:
%[0SrANhq3'j,uBjn5_QeBqt(@jN)'u6@"c,>rc[rW*#*<bEo`[/MU@W"G.k*.oo/E,pq5EH,gLRb[D_t/s'-PR5h[2kFJtJ.]LeH
%ronFMruRjlab)3,*\iQ_;d`/:h.O"6gSJAYK@;E-F.g.W;ZWG\ONP/u3Bb_pWU?C26@8!'qEGJOYtcB2PENje\QYn82q6YZQ:euA
%Brshr]%WkDoXaI1>JNsP#Vu;k\kS35(jS-6Y3tku?cS)h_MnlFU(8#3[nm&"h\+P\;`;,.m.So`qV@EfbMUl\ZM"UTQD"KLKW;e%
%*<a5I:N1Y&?R,@.4!p)k[P'"%kbdAW0&C9YE*YK1K^3:e4sXC^cj`KN>T!8P6GAg1FG7OGmL@\07l]Jem81'B:Y`,OY-[EH5[]O%
%#[\:./$?&h15QUh9E+ealVN>)lPO5#36n2.BckpRgOPHuDeS@7r@Dd:/T$cfO[0Snq5^Rm!E/4I$Q*49lUEhDG#&:NK7,E(HZEr6
%lW%\qRh'OM5hFc(#5M2'Q++n)jGoD$JcdYbS[qYb4Pd8s!qOUDk,q4GNbm;Ra(Ssr2dEXP@[&-EDD_CW1CCUK%]dltB\.j%\C')"
%>;r5+G4D&OG`fm&q]r,D>0#DZ]'/E?eE@c!e<41nmC8RXUJ@^4CpGar9$*hiRR]]inm!/8f+PM8FPDP/96ccig'5:@*S\NoV?US)
%aeDTjD*)/5,IT(<-U@g`KSZC$&u12Y;mC$_1_905[*=7nJq_>U2ds:P*rErWh1TC//rK=TCNELr8_C1];44X$]!)SmF01,Y#npk[
%c.K:2Gr57d:jFlt.WuIX)S>'Kg*Xfol((=Ms$0$)V57iR[_.9q$QE**KJ4r6VHGmiA'-7Jn<P2IXHEi_\3fDa53r,$6kD#R!iUkA
%L+d=<V36,PO9_&2gj+U5=+e)!kq.muZaF:9bHX"0(&IWQ&UVBhQ/_(4>*_[icINk]_DW%0cEK3tK[;Q-'qj\mQ7g!g\X(FC,*bl!
%G5stI89bVG2/VpZ%8W^Un3TQu6W6:%QdBm"ADH-rD-DmE%EN\=ek"GRbJT-hiK<1(p&sV)WZWumSM15)^cZ9m1j;JT$V_6J7Q6$]
%_&P*o'Ed*aGF_+KB94u9<+,Y.m$U777#SDd6[*Xb+n/\;-ASH1d5(-?3`mU2+VQ1(_;?QUPt88E5o`9E<ct-VgXIM^/VcOBe@o3n
%68@_>_mCG7LD\#XTQ%/K;f)iKNoHYE9;;JWNJp(.\?Of_42C$J";$27Qt2%J[*7GQH"603'Gn>r&A_M@:/]=NP-T1faKZiB5h`Xn
%W0(`6@Y-U?[5I6sYgM6HWO_>fN!?aK=0`>K^M7VIW3joTEta:IGT\2=1.EQ:%*R`=ojB/N:i,BrVM@pGLjHFrXYc)BlY`f]_Xf!k
%9.Xh&J!MO405a@1HT$O@a`\;2R_gXJHej='+j5h?3Jek*G,h<A(2uiqeP.RP(_UYr"-*B_31d$_p[gUkX?gll<p3*>["NO/W)sV1
%]&4$e8=J0T`mTT49**.V89sh0S0UlCqgtg%,J!2&Y,#T(pHY?]-J5-N-+aJ=g!('7;SXL+*.r#`D*q4,&VrJ7"VJ3Yl\D'Z0R$/,
%'(n<MkSTM9#;;.Le4DlNkd#Es_jFr@kG@L_PX9T2#3BHr<34Z_4XA?!(A14Hp8cm20M%Mr>;78#Yf3a;Xgqg2EA)^<Sf[H[>1NKH
%6sA4pCX9<0.2)hX(^^.qJ),B*WrE24)nB,s4@QQuLq#Rj(]pPCf.aF/e)+P>s!9\I/8j++Y(NEb9ClteIN#2/b@K)J[S0I1oYr^=
%+WjJ[k#S@OAL"(g$BCoHEO2W4,I*]\joJVt[T"<d+(Pj1\S)n7aF:EmZ58p1[UDdoLC.PRUiJgp$]Dq,b&h)k+dn85d<9"i83S<"
%*]4s)ZXt^b9a83MlR0F<_:1X!OH'ce#H\<obu0B4Z=-$OoWEPR[,*I'o+nD6Bm>h-m6WW`:<DuJ<%0%ZZOMFN-TT7%'GeeQP=6fU
%f7^3+AB-Mij^Jg`@;i4SZ6r2"RIJQ/)+*%9((!s/'0B@h_(m!R*-@P^b)5PVf2,I-.Gg9V6![Yl6'3k,V"^[KIHIh.C64=XD7E!F
%:A,R`@M-F\r!4*RmHH$>Lf;CL:d,JBR-7Hu7q%jbBp&e%)nPZ3%Hq$iM5]&0\\i&8*)0TeI3pi"/G[bt:(,c=c[aEbSk`r7(t9a6
%(5ho[Q0Pe!.V5K$fZlCfKF%dpD-89i/W0ol0KVhECS&Sr7_ZI7X!6"N,tc8N;%eL(n%%eO@N**[MVjZW"+m.V#tp:q91($Sb:>B3
%n7%0RlL9CB)>>9F>OX1dqHC4B'b6pEe:[:&U.b&Y>ojnq[W!Di#do[h-4:X%/8?chB6oLu'Y4]b"9@_@AGS6SUHPRS"h&JH1-Jc#
%&T1j&6VbA97OnEI36r;c??cPS<>hY\\ODNKL?#:b#QoLoA7L]&5m1ZIcq+^m-Ara.O@)&uE&!s.,G__C:,('4aZ(asc],.^M_,0c
%0t(h#2Q7?oo`7]c,Or!Q_W4/0Lqj7b'l).'&GcqfTLBPa_MaLm,(cL3,h5!4dEs3:quuojCPX[cWjUMLa#fGMY!`C1B1.I_E^=:B
%<!G?-`'i\Y;An^'P=uWV%@@T>"D+b(1!q`d$jR]+C^h4ABQ!._jOB]eT+GMd$uNm?=Keos`;_*Y/^u$V_M5m8=sf)FOp"`r,n08h
%U6($<99*MtAVXAWZ,[U$p*N!nQULtF)W5!hhR=^`\j6DOJ?RaHmGFcCX!ZmS>>ei1&#t>Y\q1>Ah.#$@T7jGM7])KfBF3U>bRA6K
%A-HdCK]=m&+]JnKci@jD4[>GG=S2Z3FD2l[CMD5;1W\X]9FIL>h<&rU!!mR(>VuNU>:'=U9hgs"UcYs9D+,6tQD^,,Js0o17B;h1
%:0W=CT5`]pOD#H=hH?&0QjlP<1GhZ@=;:kiOeck;/kqK0RMcfQOQSuAD+gP+S7/]=3m@dB8QiA;KbBTb-S#N`WMCkA_+5KtDcB_u
%%HZh*6VKmj:]u,K%c\[fY3\$o(P9&m@=[Wc[-kosgMrq;a:EfbP$\alV?K8e9O&c7qVWfHSU;WY2oGdYec;GjN[H--7hW]A)%$GO
%"-K;l#DXQI]lim3I]sfd*b<dX!3]lW^bA?kGZ'll!Cuc-HR8(FRV['WjagNC/B/Zb@gF^Hi1AYZkZu&%$V`m@=i1+f(>>tE_Zi,/
%3]:$'T1J<uV)VG`9O4W/K;8os-sSRH/e+Ah6nG/DqHdYMVlh"!.Zb%LX#Z@2*JEjK5ma9=8ouOb$j5?-.)o1:@QM*]:_]D37F>"&
%gT"@sfifMOkQlK+_-pj>MEP&S+gC"9qlakh:AdhJp05bA)mWJ9<F<.k+btbAieM`p:e#tG&&j\nH<b&<1/UO$9$>c#^5U'P9EPOb
%d$cRq;:r%9f=&M?n&8-"\el>u<;[)!Ob0r'2X=*(D^nBr+[WJKJmBAB&<M*HF:$cga<EhlOE[K>*(T6FE]/INJI!gVX2\@d^^C3)
%L<I(nGh5kBj9Vs70jGNt$QE3d$Q@'8R2;)P8fg1l@N<;Y?t@+E2)&a">oK&!dS.2e#U-4;*9j0]CM:Xd:$GC**k"*`.I*'I1*JSi
%2+)XWL?6Rl3(RTn3D8$k[Y?DY")1Ya#`"M-EZ$L>B1[HA+CK1W$_#`=7'%K+LRN:n792?WDd'c3+OIu2dg[QYR;nf7/s^[hCYH)<
%E@aVGBtEHJ17R3sb]L/N=hQgLrCE&C\IS5[jP=kim"1'%AXX$N&4S[3Lt;?R14l@eQjU<5#heS33cM)>&0*f9>AhLil#Lj5.H>X_
%k&,Hb:,Y4EhU6U^G,1I/inN$(<G\)I"ZFOB[<ejPap_Q-P^I.%-P3q!WF?)5/r#5KE(Hl/G$SLA558L&Z\=5s\m-RbIPRi0R+e.M
%T.6/Jo3>9bcEa.dE3b;C@)TNNU+k[qF9PZ=a#7IrDHX!`F&b*Bp&Z^`WK]+=;<?M<9Dr']-jf%/SRbbkQB?0;h(,oT1t`f#!hN<i
%YUN8@CNpA-I+L3s^[O3*8S&A3Qr\/=&=O4S8A!UdMHL-U39c=GaD81F@FkVD^Ple9.Zbm_*I.8hpU7_p\O%Hd7Sm*kK//+H\BK[)
%%(n3uFq%U@31?kIl_`rF8B2NJZ5U$-->pGQ9PAMa)i^$NJO_2BM9S#bfig:FRB<ej5a^5$_)N,:939MR"10At9J&f^_4Ds>=WUK_
%p*E,-Z"GlS5Z(Vf$ZlK@Xt"276KHr*<Fha=fp^EQDQ%"S+r[9E4@@+n8RdfkMFgNW$:Qg=A[,XrSuF0;ftuijO:^ZESVZLGg#"(o
%d`@N6QAddBn;"/G0nIse'lt8Hb;/X.>cAf.6OI7(16.6cZiNUmK'j1OCo_%9ru%:Q>US'Smau9<Q_U<RlaiObVg4.:0EL!A#":7b
%e"Y&UIMeChL92fffJ5+<*&)VfC#rea[\eua+\d1q\sB5aKcJ$UV(\]%-T_T+H*Tu)a\RGBWH8,0ngmiQ^a'=K\u08:)g#@^rl_Tu
%%5"!1!mFh'UeYA.O:n6r/i,Jb"D)+tWA4Jtc"q'_$Hltf'4j6<c2p"3gT"BM>j:lAluf(ZfM@iF_I1f3&JF3p4$1J48I!/0!gM#i
%P_9n"?A#*#ARqZ@Z:rjj<R8Xe@QJH/jXpQ:L?>GU%t&5^(5?'Im#Q/t1A)4>i7Y,/K6%5nApAm06a:Oo6*[=kPH4+nK!#@$J")r)
%#"$+$A.*C^#4p*(;U>&g14cR)D[K=4+ZCo6kXO[)#t&S]O?MtK[^;ckHth4?W?rugEkm^AR;D.Y1R)G]<4FL7*TZZl_b>-102[^Q
%\dGiLj?2(rE1sq$WarAei$6u\-HnnG)=f&aD+b9-1r-RHL(7\.m&li!A9V<Z4FWujHb[AZVSR7'ADE7[e)GGlA\&A/V9dCi'Ibno
%UgIe%p7X4DTc>R<>=goM:DZ+.m+[`41+hWP+rJ@.4W5fFY(P5oc=0`9Wjs_Q%3[8Z9/ZI>WlHs;N,Obpfp4143,).!WeN'F3A1Y,
%b,%I@cZNI>!aT\!,ON`P;P.G,6J=iK4lpXTLWqcgU[96)5R!3"9?u"=nd%nk.[DD)7jD8;<]/Ms_AcQT&I_CR8MihW")rS-3EA!h
%=0lESS'^)9ihm$H;OH[Q%!P):@nUba-UUuCdtiGYKc&F-OqqaLXLMR&Q^S9Y,lE=I!:UXm?UB\QK$EQp'<thD#Un0Sq4c.dgJ\(t
%Uak?X1FF&n\bGBd1,*c:53S!^9'?gU$l26e-/,L<$V-3g1k_1l(7>&PKnTQ>0(<FW_c>(a#@d6os1q0;15o]_*VPmJV)L5\97&Wa
%ZmR9a1*K"EE3P"m/7IACP`-sTd8A-I@-a$***i87W[`U+ZHUgC/!.nEb':3cfX@]Z2KJCpf%d&>FNlP*h1f#@>N`YC+mhGqe'hl.
%JYXG(s'gRLi16fJ)/_p*@Z/&R>?B(GiBq/d1,QkC\?P8Pk,lH7!>)kSgCh?gWmG<9dGr^nY7ks40`Kgm+Eku]ZF;"4!\][n8^Jn3
%>>h%#C^caFT+7%&hC<fRnfCUYKTNKD=D"4t8Nk3O6amfs*98.GlG.@4KmI1Mn1U\n3>+n91-0Z%6Uh12,]FbM@c6f[!Ko9<KlUFA
%l%?fgPDr>#<d&Gl6O;OsTeaf4eO1EGYlgD1Yo,ic(Rj[2Rb5jq_5SOCIMmFGEm09>(t(R[b@i(8-hl<9cQKm<I3BLtbgM@<fc*:i
%h/Xut;!2X+GF.h@(YP2DJ3tp""lDu%%;E[^nC]gY96\I7'9:k4[#j63l9u7BO['#Lc$!AgNC?1ML7C+\a.0I^9H4@*CZlcij[]>n
%%@*hnRd"S`fPdJXg!YuZP_<c*PFGmEB390j=-pP9\rM<=U!cIoR-H*N&1N7nA"&LKL629]0(r3\Lu9Q8V;X!]"$m\BX"k[OXYt#a
%fPPc<$$m-S@LH:?Q95:=4tKmT`-+Sr.:RjI)VC<6=@Qc_fn#MU0Z1\/#4@^&,<1e-f!rh&6gsl,VS)gq`;WBK+/s`aD>#2A_04@S
%.;Va]L;]!AZ7O".W,,nBN>'o?q'mqfQk)0kc[bZQIl^/Vh84rAL_">8FG<Ic,2\\/bD7=ad?%k;_f!lS'Jr?L$H+[[@*!:%P36*$
%;ppW5Qo2,rX\!@'=kF##M!2eIr^MM%0CiO%<6O$U#R.OE,\^b-j9CQV_u&%#Soe,4+[!t66pSZL?"Ka@$O3gFKM[(?RF=EGR%Xf_
%&oe36PSP6(Kqg*Cm1<DCWC>28%b@o`N-$?J;%Pq<k*\=\#K"iQBA]rh.Gtl@P5bns#$.#)p,>VL&,R6AEp8Ep*P#;_9%#OHedhgL
%3Uq$\[e]eY850VW-VL!P[9QLrs/$%1PBWgbVSsGZIZVgJ*LU`=U_e1s?1*6)VW5=f9Q-4/DX9XB\iMB7h)j$neH.Z:"$*5-!o!t%
%SUKWW6MM-AReh/[?b`_]W+EGp0(OaZSeInIl\ZcEoiss\air\e0nQ.*lt)n$#%DsGZ`(dX32arn@5u%,#9MM-5pi5g[13TiS^:An
%,8^^k8mo;QDK5-@B)#:!iZuP]kOTW<(F?M3K`9Vb2S_Er+"2*hV?Z3]g[_G"NX2aLCOo<n;!0s>:W&CZK3a`j5R%:Qi73s.(G5iU
%km/Rc9Uc;E#8m(i/iG\$",8,TD/pgZnZ-FLEeI@%]&tO?_f1lNCIf\X"/jAOjOfKOjdNE+/[XqPpWu8OX4XOn?0t^W!@E@AJ2:DA
%g>Q;-3\Ce>Yg9"i0^)5VjI;Z4PR59A%7_j2W&o1[KI=5Jq8g#-8G9HfOOZX"XtZ)5.U9A]LN.."=k1N01\M'"B/Jmm2\IRCUYmI7
%=%($E1K=K$gr8sn'jKYt8J7,9I+&/ol2mrs.X;;Ib9r+6f,PY'HktU[XMA-)bWVn";m6@aHsCJ.k1)`6[aYMD!V`bSS7^t_kTZ/N
%Y_rrCZ*95*kTYT@n<m:B7M=WYB$)NX_80L2p=,Uk73NP"NR#1W(s&(Deqbn_DN:ABj,gcI_pM^U$r5jRDC1_ZNe>7n]G!c:JZ(]t
%,<gLS!^k$]_cA8P.F/2D?j.7[q)H3>*hRksi/Z)[7^?)Q/XUn:dRP;#,AK!;jY-U5WjkX5c6DnrMfsoE/5=4a*#*FHa"c5-QSD>M
%X9fAZEiIeC1OqZ,n#1'ESkb('8qP_MkA^l2>M)U29gPku`[928:b87K*0qn^$kZYq]Ko7,$fpibMChVH!qt:7ht9Bha@(I]Vn6FZ
%aKiNXV68i4-o_F((/<#1XZ.s+E0E_k'T*SfQuH'7qfY)in?K7-@B%e>:/cpO:oqRa""5/M^%.o>=gU3/cZ$eP"Kc/,+W2&AOBU)e
%pXm:&0O+u_'A[dRqDDeX>#7`!7*4F-n&XiaHi],Z_bLM[(C=q+!$$AB"O_,tM%ED^3"+toA=tpgTb*Qu5bZ#A:nZ0G\t;]>8F%ej
%j;JBL.(4d[en'FrPp%La!>gM"F##/?he1tM"Q%+@fNj-kLFZ@u5$EK9)'1k\*fe8HT!#kK"(h8F4*Rpl7)Y8HCEJ3[O+47b:fnVX
%2od?d^0ST&92rr43&_U44cYW6D'<s,)dAWR#>Qu`q&Fe?7X?sFS04'LQJ0G7*NT^L;`6C!OVugRPq(pEGJ7_4^ekht1(.Eh-d,bS
%=)!!fSJ7sf'ag3>?#38Y<Vn!heo>/UMJ_G;3jK!CDd'IB;@UO&ogA&D"/C@&Ap[;[pS#!q_6hdc)h/O!pCi:r6d#,Oe%`'`qs(WI
%UGfr-)QZO``JLmn=P1j1kej[[HnHu&Rj^1V%.rj`iHV"0)@%b+Sp&PE8n&0o*8$K5e3S>T=hpoCaXYl'Qj*9K,Yr5O085Xr&9F)T
%\7uAm+#`]SCdjkB\fM2&S63.@m;H6YG!-CF98bS6D<)MfT!WHMXt"qO``Z&0jd-WVb%lSOm`D)d]Vc#(@c;!HL.qO5e+H+\#hMa0
%EZN#ZZ7Kr;>mV_7-Nhu"8A['BQ3jZYSt.BrI*s1t39SFBEPmqP)L_IR9Gh3?aRe?%f7EuZ!Z3!LSQ9aXR]Eh3NS@1c^=jPdZm:Ge
%V$PhS2BPA2<99^C`s+fDC]nb_LVSA(NO9_jU5jCR&+\COakqK<S3Z3EDR(LdXi(umW8K398&m6R;GoPba>g$?P253r^iX+(nlD-Q
%j+*LLGKk6"3ao^U8`8)WZbHs%L<;&P;adJlb=;g7Z&[1mK&X0?+WB>MNeZQq(@SdWr4u?l6ZX<h+tU%4(lpZKBY2[sj@fA0@2Qtj
%3eYAkE:dO_Z)pUQJ_16g(%H1EN?)?\]9D@t<`e./`DW(A4_%=!aKLAV[nR,%VP+5m\1VSf.Pn;&bS0`OEI8a"aX;#:=.Gop9Sp8B
%'aKi0K8iDcj(spA.qF#38"4Hn':!S&)M5'(=<2,Yr]QG3[/kVGm:n>Soju,"_rQ6bi9q8_rAF9:0`q2d\DO&D9a`?.0g?qr)9TPl
%><<=hOmk@^U!iOThRR5k:dYSqZIs_%2B35?7H6\Va<8u7m#idf4?FnYQ?UFBeKL1e;oc%p'!t'%[_W"Ofu$j0[>dg7_==<m%*ILE
%*#D]-1F2cM4R\=TS'FGJe`N?_ATB$`9S,'1Tf!u]k4`S[(l.uaE.X8o:n.f7g"OIN.]Eg?I2bG;Me%7]"*=5[(OK69FgD\-eI^P,
%:(!U5,:q2(<$!kA1T*at3ZK;;M,$e73jJ?JA0Wa2l!=9:HiB)`WqktIm3/l*#8Ptt!C`sI[ugP8%^*6uEC2,D.9%)d]%UDoe4(=B
%&IF;[66^.+WFD9<6tNk\KSrq>aWd:\KIn0>GcfP__5[n;Kt)LV)1(?o`JF>PTkgXDq3DsPo47\V(1_C$W6JC&F/hFP=#<tofmJ/d
%(R+BW%EM-\l#*$DC#[bWb?KX(F:<$U"ja[b`BpjDX)TDqGau9]+a(d7:?t46>"jfQXE!Y]DWT:A\mEQ*+_==;F<Mc\/2ND5,Fa#d
%gs7L/%>-#X3.KGCAN#RCE1,b/15IJU*E+e6Z53N[gb%aDHp67Pc2u%P"N!?ME0<!r)+'\q:'kl\PHX[[(uiHM3\H74+G^Lgkb4AN
%9g?=_(dbBhL>:0VKZO@;a5k37\ATD=0FR]P3_Kkh"qRI8q4rC)'Ih%l7uh>MV+`:./.39gXQ$BPgZ4i</DT,-<1/U7k'X9@B=;ho
%$n!e^'qp_(d?P;"a&DL0OqL/P0UPPpk9E*a>6ZWH,T3!)YM.@1E0GsuQOpun1(9HJb?)%@7:*p]8if:hH$h[f'(c`@iV[2]a6H4^
%6gB_JEt>t2)L?VCA4S9i[U^#Zq+=#>FGr<Upd@iWR*1..@@ZH=X#j0J(6,#($SOK/M6"(,)!i6_64uM<d'/YR-S&#0$9hog._t"9
%s(Iu8MiLIRf3l>6k/$/O31-C"L+;>\UO5C&@l"=#R_rbE*D8ga/S80$i'l?F+)."aDQtZY!eX<i6L]t-&3V"EZQP]QQ&pUpW.`HZ
%6:3em_)7>]bBIM@n1;mDZJCM8&@dD8`g*!DG19oAEj768it0$1=C;8%T$A..p=Za-i2ZA$&b"bdrERR7N%";M/)X(e**k"/f@8U6
%"t7N02.m/UM;32!2<0"'+P;9P\"nu"<T6h5=?9TDl3JcjB=8tg!W.gG_VkqP$7`C3Fu@'1I4/L?_bsTXjFS\:F]K_HqTm4'=[$W0
%3\[F@),c\,R?,8+q/jnrB*Ei#'+P<5Ag$^T_imM!S&AP9?-'-bT[gA9`E_QpfeSf&#h-pO6W^X'BYeBt^/NIf'RB!oUrgU(!!4MR
%mXb=6dnq)pF8-d"`S*n(Om09_$HuON`E]p&_=2cn3dL=`cR8YeL#Ji9?rZ%k?JNM1WaeIS;;u*"FPF\R"HGU(WP_c$\"@B;I,#8L
%)e:P+c&Z[U'!80S:Y.riPUGt3Fe(2!iZ'rQ?_f_/oE9N$Hmhq6/T*u)3ZBH$Js"=Plh/,SD\"^FDka.%2'&)+n=WHN?(N47(;qu<
%YXFi@h(2@D-F=OlO@F$>?mgmXO9WssY]7C^+*R4WWUoN%I.@u^,NL=!X3Zp-StpRU3B\l7K1hV^<I`H&E*o>#GAZB.,a',)lDdKd
%*6XWjdF\F",?VGeZQF80b@'<-3U3Pok?>I0q:.3AFWCdq&mn"!Au6pVC>m=u<bp!2L(bps3K33;MD]7p[NE-D>Osb`=<n%7+m4n^
%f&=J5(ROFZ=nB.2ni&6Npr_[`W'I57b0M9^*usshis5AW(k@;BJ2)<e(Z1tt\D"C(7i``]F\E8n+A'j+K!G.;1A:6#%s_B3\eC,L
%-\cK=,H8,SY$BRe(3k439COrk6h-P]7h<^[GAuW.7VBmL$'e&ies63,oB@H)Q3n/S_ruo?b'OM9Sk(QapFcErSqeH7:n+4%LHn%f
%NTZj+fAdG;:6j`43!:5),P(_-57ZXrE&\n>+AX>"nk'P:iM8/=^7teBhLs6F5)MJ1Kl$mL<NsbQ&F-ttbu&X6f[4aA%X2l:J]^Z"
%%7>.q$stDUFZg3m-%rk`8/E6NP0@V!H@?m\&i"P)Hm![mSs73sbHaRCjEWr2h%gJb$X#$*?nL#%8#@qb]Zfn/b8pbbrHjO)?L]D.
%E=^hsWcf1&9?N@`P2N29IG_VQHF";P)^^8"^Q0hD*(&HKffI!2@P/mRUQ.JT%UXRAJ?^_YA,Vu84JImh2O7#P((T5XNW\&,7R>ZS
%Q>=Z!90Vg"b(S2=>\Y5#1uo$.]#lkMniC!=X,?Mnlq_oZoeP$:"'lGCe8TE(c3b2Q<g./ea98s5E>)CpB]YF_L3i,-/Q;Cq6XPS\
%,!ZpM8^:*U[$Z:3,XMukU.gnD+E1\cEq++hLEW:mkK1aiDQ@7>PR^qLlq*$(Fb^B&^:q^SOOn>pXrYg$\ibZ[PM!cb-u450#$4rQ
%bl*@Fi@,d&!+p!23<:I9VWiTk1I?c7d``7V4QYE0M@Fh^!08,XbKWlGaEpF]k9uD<BQ2Mt-:p>c!-_enUH6PSk$j>d,,Cl)oA@?S
%N/7(u9J_:`_<;/Aa>r5Y*PRMfVWt0U4Hu;3]Ks?O"[[H5PfAb0[(7]nMjXP4oa=)F"%PjnrMbu90V_A$Ko2i<\!>-`l#^1;AZ.B/
%:a_MJ4QB<de/P'%<@i`jShpifOuE,00t,7Fq0X!3ndV@:+N%'C@<fpo72`@gXT450/Qq5Y-ZJ#5J\&)oVgC8F;!70R4<KL)%$Q_g
%i%YLhpDi*WGX7`:4PE2e@5M-.nJ7A2X!fMt#/RgjL!RSH(=EqLep-DB.X#)]L*1HYP<*hqiAMJ.j&H<oE:&;/HEITu>h(,C/jGN<
%d"4pj/F;3a*dL8DNI-V0[mT(UR!MT#B*=^j.+L1Tbfp=.N09&]GpJ#7/4VjK`sqGUj>.VC-9L(^jpccad$?d0A'2<\HpFPMS8>Jo
%>GVs?B1O(SV-.!1arlqfNWM7U+]f]n-e,0^/i^2&+_1sddA8-Wn2*nqm)>;&+WH]%f+WnCm=9prKeT&n:Z@BLCm:_1>m*"Ba_."1
%GnA`X'qLgH5MZu(+YR;7g(09t@Tu%pXj%JtV)5BRXHTFY2G:sMj-sBuO7Bl?.ogCHI$7`1/6PC[(0"nGUJG=l@9fX/rdj%NA!/aq
%JiiA,"BRee%Z8eJ[`25p=n1EfItMrCFehCrU_&qKJn$mpaO5[<&/fl4*To/B34A<E4^B)_dF=A"4PNa1Hd$=-s4b*j;BdsQkj-A[
%ko^*]ZTLao`7F#F+MR>7eT3Rpk$e(!'FC[&I!C[FGJgQkb^UGTHluNc'N`VjXljB^$Dk%-Sm0c&Ab&qa58"ZFbB$lMU,Ki]G\p5)
%^$Td7Kb^s0&;d:SP6[eSog%ir[^rr&Mrid-37,uqWH4Es8kpB(k;us#I`dBJ]oM9![8\Sh%J@4aLG.9AH+JPQTZbBXEFKVhp'%.g
%.FHDZL,:.ul3,ERkIG\GS(LDBno2"LQ3hiPs.?uKgXYB[P5Cidn%_R`5SJE,>RoHlCq*m^`j/uX$0.=(%'VV)8Fm)]p9%c@b1b`:
%YUQlIS&A_&R_d_N<Foe(@BEWD1Q7K=$HXIX<&Bb@o:rmdjq,X+f^^jc'@!io^rE@,!7Wn!lf$N*cF?gsEM-o&B*u@%g@pX]';DTg
%KS?]2H6'8glb"p$LgP.M5=tKer]K='_\-_2I\lH*C`pA11%.4\2:bo)Tq"qfEIS:>2J`*k/?E%cP&St"bh>U8C<TG,X(&C9]?6GI
%aS/Gu)>V7C:98VV9d2udLR&f9h_hjagbi6"Q^log*u^l\"-k3WAnXp1BW\[g<dYV``]Zib?Xj,1a>I17&QX#,gi8Q$+rc$V`ns.L
%e(H0AhYFfZbVcV]ed`SgeO.P_^LXtGWDI@"V7Z0B"<O\`T22YZ#jB/YI!YK#D;=o.r(F2TIF]2f]'Z&"6m^Ahiq<2B_^^_]X?@6$
%YV%Fq97+esSQZpl$%V+Yis%IWU`cb?\2(0,>.Ie("L.4=GT=AC1`gBA[:qWie2Ol3nJVX%m#Pf7ZH+X$/Fu.$O%[hjjnoh]$a[Mt
%l.me6$0d:.j+2f'5<ka`//::*CjO[74P[jt$uG;L\#^f(St"fgH9BZaUHOB<le92C@>O`FAOX53$.#e^B<on@C*[E/cos\_Mq?eY
%mJN'4N(XF/M0&$=JXLC:7@09e7,AHYCK4t[0&Nn;.MW`'-HE&TN'qcpqfB9(?Met?XIIH"Gl%*K5/)9mJ3O4mV\k[pG<f_G'E,g%
%4i<j4l2eVks5B:<HbOBs5G1+!'5:nt)j*Z=_/1$.URpCB&<qgK)0#$?*`QBVg")M:2%2jHirLKXTQC.N*Ei5MM>m#)JUMq9Vuc4P
%)!WdC0QEN%le*pS@#kik%//^Gh!oj:fBr5/4+jleJ>F_Jq+AJaP-PXS\/Q/^1g[tpJhUTC(cgc*:;R9L#coP"d9Z*p8^'*%3.H3`
%%T]\aY%-<dH'K;18?PaAOLk$nmg,EY[!.i)Jtakt/7?T2Sg>(>ATQn^2;7Gm!K^8dM6pWU`0F#D72r%0NYMeso9OF0cj5('W/gCo
%GObTENEs]M7XNOqIm>*=[i6eQ96*5K;(],UI/O0UX+"fnM`Ta%:l]j$%Vd<8p=_1"S597J*GPu6_+9ou)]0`MYbnE4cPb^^]^k^Q
%%Fa*Rn7mh7dhTK.5Cms:1;rH!X/7TM,d5=^Vg^O5(VH%e769>(qs0oJKaqp/*NJF;S+5amFrh"eE6n'US++q*J4Vc3!L1!h;.T_!
%U?u8DoC).kJ+m5(o1rA=-BX"<%<*,[kD"[jEu(2D<(\<o;)o>r+;6UjO22T3W5_q#$rSBY7"/(MX)$/rc5U4@l2)3,W_0%Pm:bL<
%65=0rN?qb>XlrjEntr(e54-4;Y:E7^0OS&l>Lnk"XbYPu7!!Q6RuW*:/>OZ-AAUdP[Pf/>lHQUh9B:8248XK\Zg;-2)!=H'-5F%G
%U8nf-1of=@6Vh7/_no#DdhYX1Y*rj5o=?"?iC0)]I*fs3AJRH^HF;$fi_.'c)Y5m=ChO\@-A"@I!q!jN4o8@"eBaa?fnr%1>giV`
%5#*kIc0r8D>"nt()'[a.Hak[T*&aX1GhY7?a24J#.a&-33/[A#W\FIdPtXV_6c+j=ajR=jTt`4<j:Qn/UTh>57'K*E<6o>pBo-]r
%atK7E7E^,W-7*S[UArF2peGT@2:@aC"kb9X)-nJ-X31FW_PU:IKQX7n'.B.qUp.`TXDgat$MWeM+\?n'@8`nV]Ul^98K.RC1Q&.-
%iA?D-]i?$sYAOZ);l>>*Nem+E8X#Md[Hhn0;jZsfp@825+_A9Zob(><mObN.4:CPOQh0R7_&)U4IW\\Xd9U6=MC=tt+_5OKWk(=l
%]M%U(]'dX,?^FCDrYej&/fg;>>Uf($J_<@R/_<K@ajY:b_Uk?1G84LKFN2LAHi-ig#6c$rep2u\:"?e7/E7j4q4q<L<=Nq2gMSPi
%lM[S3?dhL/pkH'*;falXK,$VkFo&0E'9O$4pf>p5,9YU1?>V2i%\/ud`Xl:Ll)cG;g#C>eWLO]up%H<G(@D!N$/s$<J5j*H#ib=a
%3A8'ppM]r]^=S.['4tQX9+4=)oa1N<onWriEmt06>;f2`]]cbGGS4<fV6n$W6./?W8?+;*VQK,?PT!5HNIJCRHmus_:1PY%j-$n`
%(_H.RP?"=`XW(L;mS>)lp[K`i.5'F-Nl"DPlQ8^F]&L;mO/\<UNdAmB2,jI!IJ@h6CFZ0FCBRM_+gZ(n.Nd\DRFC\o2X?r/J'hIH
%.]b,+NHk-!J@leF*rFu$9[aZ44LR<WZJ`'lGh$NcJ!5i=6S?Di(b_5[%O;qLecT`h[OUrQBn_Jibm><"\$0%S^-.6b$XmBa<,ZcU
%o"i3.G]JHVbud%&pSqb)%SPJ0F8YlP&n0'88<i'86SO3_GFE.[Fk'u(8a!4:I4FjDm-rhl/ZB^SlmI^6VZ(nB1cfGbMl5m#!;!//
%7a`itAO+m!e==urgi!lQ%m9>Vn=LLY6R*a*5>4(ujD_U\omBcLp,%Cp;)H4^RuQd,]&Ik9IK-"g3$0L?m8d+LG0t8)V*'4R$S(*G
%MfAIXg9r^/Q]/PQ)%r@8VHH7feP%;(/Uf`7>?&t4A:Mj/JocoVig$:i9tap?/!9N0Sk4$<VO1Y"M2bASN?:bk&OeB6'nP334\G1?
%m3`A?@"C5nL*"7s86B%6_)Pl%C.!t;e(l!@7OGXYBI$PQAp]4pDrO">'?@2F?eCOep@lfl<s$tY`AlsLD)6`:\hTGO&`4fI#Irh#
%-`R,o]Y]1,1K\d%7`D5M/4FS[6q;rPcq@p@%b/f+Rj=q<*aiDD[9U<'co_U]2QVB*R+/r>d;#<ZD=]k&U,+%N13GTb+g55-LV11K
%*?%HP5'Ldi54)tVKni,qD,,G34TOBrK@`Gdg.d6GjJXMEahrVo<7>T]h[*Af#kX<AisWG13D,0032`rh%jc2I,K602b(2$cRhsB,
%93^Dq[SOcT\ep<h]aC'@'S0Dlo(LF)EmTBa6b,;9B;8:`H1D$52A@N@:;^nF/f\n"'-RdX"FYJ1#jEc[dthO]A+48tSROL^/W$^g
%68bjD'IoHb8(B-k?Z59D:Q_JGg!CqCbBIpqTq3e_8.^+/]Nkqch6m$N"c2s*2;n+;L_R+ZerMC[\XRi<DMQI(4[$>&D!B+*6nClH
%3NZbl_Z[=iY#V;/a=hAt](,&8Z&$dn6eRN[InA(,D2=lY%u]oX5#X]G6K`i`U%j2QRFh!!01Sl=H!YZ0.Sf/(bkTj4&ciAEA_i\r
%*V??"S^EuB:;qsK+ZuHcK&^".BFRHbq-@5JeRU\UU'c$qr>7pp*31*mMhVD&[Cm9AQZ#O<UW.g$;$MO]a=d#WA1W*#V,`p?4]^;e
%*@imKD<G'RaZZUg^geCE/GWc8,EcT_EIe;,h<#lW]W<24Ks,YE_Srt.pk3u:YX5`$S/fbA_/#Am!o,fY0Y-^KEUe'K<+)oW[WgoI
%lGn*DHubNdmT]N48$/6FOb_]Whu^*E<+9a42VRE;IWbqMZ,LT[>kJ]dFfD(+TcHffTDP5Y^hiUsENEr^[P@9uG)qQbH))9N0cD2X
%UiD,AgMVMr>.f1U`@](8b7@OE*l5h!!j;^O]UsGk*F!cW7g"fshMfLJG#\^39i7W'@%!I`)\fk'fGK_UC-$A!;KgE'ZsE"@A/u=F
%pXRuLa`eag5ZuQXNb%OKOcMNh"^`(sK.gR\cKk(.HelYjb1_cE7hmiKq:a"=;gccTCN$5806g`K3@H>Po6fqZ"'Kqs^@i=jPP+b*
%RjB6+?ELo8O00:701n4C;oH#M=+X%i4^390^[A5@ZaH.eE%U8,=F5m4.F7[sp6';-iTp<nWtI1KbGVbW/f-ph>^N/rO*,UGZ1p'W
%AE<8ina5[hlANWjO@GZ:g#<Cq<aG?FnJ1kV%D^HPMigZ9DY1ugpT<<PQ1=oI!)*44Xh>Sm;LeM'CN$@?\fC?VG/liq54GI]+H'U!
%?`b1_7&BNbJ`5VL7XJ<rEXbA#Mfl)]Yk<HMj#B*en['3l96$TN?7_Z:CDDGL>\C<d4NhiJa$eo[5)]'HG0>-Ge'HJu%sb2,Z^Smg
%TZV09]Y`.cTcRCHnM4UD=^WqU9o6MsGaUS<b5&DsU#N<K]6CpDdC5[ubKbC\NUOOP-<\0O=%b2e6uBV>HDs\FhSl&-SogdfqCgD'
%P)hBiITf#MAA!5]=D>:*.-8@PUt(?r>09tP[>KA>r7]hr[BrWhCrE-QB,OD(*XEP]=;3uE>"EdKf]T6+4)!S9MuRo".kaq;7--Q'
%T<79l[eeS7^ZrM7GhOUr):*Kp.4?'PpV'$7&AL(/WVLkT6=j,ccaGb;+6-\*@kX(cm2rOCmU\V4qagTr.7<piMYqb%=k&RngCgU+
%FtPM+1s,7&U%QH,'bLaZ$lfbR*KcO2*Kn_DD#B)EWKs^u7D(!P+E^NCN677W*.+_dFB$Eh-`Nc4Bhn6FiQ+c`HO2,c`Y"BLWTBG#
%L:18eFW7S/\9:?-`s#!)-hMY<BYE#P!jRV$(>Q*_iho#UK+sK1+6Ts?P%q6']R(:o<J;)5jDCN[d^Ao@qVDOM`XZa_pp-@S1`Xrb
%[)+^WOQ`Z-btJV0,`sI<#3UOa6R6S151ig;k5LK-@[JJ0%Q.-DBnU4'.dGA#/0T"fZ^<%p8gnF[GTdSPK?H6e@^8?F;#^(@D=ONj
%(-[qqp_J:29kmQF;T-$),@s>KEt7jD2jo`J\W09@0(#P[Rj$iCJ"037cTpb7fH6U/pOK<Nb:OiZE+hC,(Hqa;,U=CP*hVhM+()\(
%_,VDb@6(aklm<U%CK:/nl/s,(o5)#0,9H=EkllONpuB]V:%VIJJ,IG3b,:'on,Mh5s)7r%J,d:_e,Sr^J,f7mpRaYKhuE0frmquM
%^L#enJuIhpAc)Ms?U"MaJ#$iXH("OVk.59V\$(3d^97=8lU,spg1Sh7s7>.H^]3\nIeoE2rj%R_iVJ'!VgnNGs7uL5s8HZ2g?VsS
%r/XYEU6)!dhmd9d?[2!gqWInT?iKjCrp`5QJ,f)sT'fl+e-$gFIToV+2nqX=D-Bj.](<<frI9::HfXd3s5uWFo9Xt)l'EL9J+gN`
%rBo[rk_IUTD1ha3#D)(1gV<E[T(&4U-2jE"b.m[VddQCnnp?t4r!%;"q\J'\+6";ui?)+%D_mX&"%nIq#OL#R%l)Ch8sg+q6u$`f
%P=3;s,Hd6O(9],r>c/-Tj"NasVUA&HH@c*hc,[s6.WCR%ajtA#4k'\BaIq8>[2)@g($/[\*aTf*A0Z6='b7'(Etu"bg-XI((mV%u
%`/g'AdKF&&EYRIQ_G(JD>-B>&qPG1VE,bmX?rDc&SChJOGQQsR[T-W)Pfg739iYgs%VH>jaaO]a9>e/>gF[DUY'2KN6bYh./[UM'
%pTt)&ZE;gQ\=8R^d.XaRhm8dm%StO!Ppe&?'/6Q[<c<HdqYod6\\3oC_s9GP?ZbLGPO_1=I/;IL'@I4b.@1l$YZd+66J#iJL4s2g
%IOYt-Gq=nm.6`T:fB9,p#8^`H\>URiN,_-/D8c?!mI$`0?si/G^5r`#0;e_u##Uk'8G0-iYsBr>`f$4:_WqILaL"&5O;>VL=eP$^
%K[kMfeTVL&^/cN;;h/4;DAoAL^4A6Vq92/ULuep;ME:)/L,\]QnESp=paCHo-C]+0[(h'LK3X6[mk/#JI-sh*h%cdMiA7L&/J7^)
%Pe&W%_4Irohh5\:nT=<3QG/<^M"'BJoMZh^5.Fs.c\KSca?A$QMU'Ds&KC`OjW:LDUSnSN&D5-4Vs0ClW67L#lQ"(SEh>r=?5n0u
%&(WC<6cTGQF?7HSU]p%fBkt^883DmtP$qsb$4&[b+05I"3B3mT'ZLRq7eoVSbVcHE8b?22ODWlMF]=(i]3qSDf6LMcj*.0H7=l?F
%?[qp+\,!H'nFbT*U-8a/,uo)De@j@9,LJ;!0ltc!f=Np]P.)^_8Lm!l/a/BE-X/&3Oi(I#IANsZ-X<=E!WX)LKWG3XO(\Ye[c__5
%lW\aC_+b(;<5Y$$&Xo%3::J"15!8tcW]IOQ:tV'8.cC0a$s%caGnRK_!Oh6D7;Se`ggOpFcdLb-c-o"%:.nut`oal4^4t.-%"ZIM
%,a9,(QC_S]E%mGRDJL^CC8^nn@%[=1:=padWtj:Z#d[Ec)f2VVl^4S]8)!^plf`&19=7;hR)lHaqW;?ZrWOL<Y-h)N>1*P,]tU"m
%PdCT.\@e.)&?)/^Z7L..UK8"1'`fZb`b$GaU3<nciaNd[YF#Q+3kG]&FN%je;><#>`OTm;[`Gk4ja)bTR(4%#@49d#iY<W'G0N(Q
%>sYK"2\0O&XYIl/omVC:[-WK2Yc!2PNiWL9jcEmmSd=PklO3$6md_'24Fu6?_6Y!@%T+Q@6,?.FD_La94f,Q[oPCPhJ.(M2HBNr%
%2.pN45,dW):ejVj9^DqcJbpN6\TC^r2"F`r2)8"(F_"[Thlt4<W^tS@9'&-$G]1:AYLmr%/'RZsIoW,uQgW27Oj$5lM:4e^_XD[#
%9GMg[\#L^VS%3a/)A.4bKlW80L+*U/f$d?+)F(6jiT`&<\!6cckgVO3CrLTD*+ia5##f4F%L_PV`Q@afqpbMf#^QBes-ifQ2h%<.
%^1I>O0n?&$:RNK=61.*\9LITCc3C8g^s=!=rY@N?*;MZk5TLIf4p`D^4.S&W6Vco-\:"XO&T%Jp\th>BfXhm7bboFJ>#mg93"fN8
%qA:eF#Jg)FQ4;;-)Ho@\]eS/S"\Fk/ZLZ,h1QLar3]oAjXrG=X4\hk.Q]i/NFP&EG#:VTq_%q="6gAL7Mu77mT7^q"jL/PnYO_Y&
%7d0MRrA[ORqaIi@eSX9K4pHKY(PD=Mp,LEJ.Z3h)!`-/17pHK]jV/pN[I.G2GXn+I=Z@cV337Ni:CLg:H<IbDqIu&-fp.bu9]L)C
%)GJ7?-lQV8&*J*dEmVm51ikLHk?&ggT(ZTM46/Bn/%M6P]/0)m8&d]qEe[_K@]heo[18HqMAa.Gr)&XWJpWec8Zj-+I^:Z527UGE
%poYgumU5g#r[dfZ7p#L4P$HX96pj^tCcRC0UWMiHX(mrq#s;OgH,&p_IpR?]Ha=kEFYO2q1#%s1:=nj;HEb0e(O-tB=+G]LFkt]!
%Y624R]$^qV2=Q9??#[4"+e?*=b#n(n]hb>8&\S:1#UfU3LTR]MJm!bI)]NFY/K,-?/T)66!0]QXaM].B=m_oZcFe95ZRD_P(BZ:r
%A)s>*B"1fmpPtS-'ZSU<F-m2-M;U#Ld5ZKt]7lP#6+VZ@m<MpMdI?V\oh<I"Sh^(*6s-/brjoobKs'F[/aj3#5%*!Z@_85kZ=i3?
%CKPd`n>o_XG1JVrjdj$nWPcStTApDmmR'k/k5)'iD?SNj-H8ALJp:3/f*[NISSVI:bLQ:'d1p?deU&#]`SJ's5#Yf,/NS>=1Qla,
%RH8.I8.!`3OCZ&U[p??_g?d(=I-7YsDJ_G8ZbA;>-14u$h[**O"cjZ7)3iTD+YW0Dd?]l%dhuTt5ne99BG?%k>O[7^RVR0FU+F(\
%HZmL64@r<eJFh!Jd^X)u+4`W+0,50-">Nd^!n0o\;e739:W7OLjj8t/#STSa3LtA^<>7c?(r>;p:%W&0]lVM2JnFCHg'1'F08G4G
%f3.^"^C'No1S%,QD'&rT2U5b_9<F7pk8H3,&p5d]`qAt^nCpo7meW2s/qssJ.V<JjPpM^%^1gAeF8b9Z>t%K`e5o>!#N4h^7fm)>
%ocQtJLUmsYI-lah$I8&.];mIZ86t<,+'[sRAp`^$;]T40]ZnmAZj"*)nQ1FF8852RW^3f$I=SSZ\onmrY&f3<5Lrbp;Bp,C%llVO
%E'E8CDBgW7aJR1ZHB]E`.P/q/U7ObZBEn@:VoZeR?iAJ<*NZHd>G/#i\cO``rpnpO*S3)1_g,B@r_G\7r4N07.pf\C0;U\^>st1[
%CJOD0[3qYQd;i.o*(GN5D6^$I->B?N"F#Iu9Sqo*jeAn^%Kj2MIK9X*]`%"Vo=>muHNrD-\.=?tD"oZgR9h*FAHE\#:BaS"]VW*t
%CS*+m$7S>#X_W/e@W,VeGK7YBb@Ss77ec%%`UM%%BlcCbl*3C:jbj<P1K0CDV,Xp`br&7u;'S^*0kR]%kIGg`BuF7(hj*m9kNu2/
%mi0c!"E&<RFuY(>QW2W@3+H:;C`Q0qKhjL:N^?Nc(oK9L&:I5gBa"$M&K!UAq<IWD5>^f)9fa"LkdHH0_aiF'a%[4%@t?^.-eB#r
%j1Q[\n_o:2HcS(jR3m`Bf@,u3j%M8'^6.:>^#!Cj?HQt&BdsFj&UJjB+0Ppu[h%Y%ZZAof,N4Nj[:G1uTG,1*`(W/[,k;:u+gFe)
%,*$?g2>I*FP!:QhUSjegonWsTh.[9_bQe7dG9PmJB9Hr%+YJ"3CD3e<>mm$*\];6k`D9M"F1V8U!A:9Opq(p@cI-:O<*(PpClNE?
%J5(A\5\kp.WA`#:mPAPBVtLgLCi(t"gGj;uO-T,,-1g=>O>Fk'k@;GOqpo#Kf1:+1[91/rGddqj[C+k@5&\Q0NW,i:"Ip3>G:p*j
%'fkQQ3.Q@J.U6gp$"Z^fb-H:kRKnA7'r@'PK>>>EP!kAlp>/Q0ST%(@MMMd@=K!FfcN("DTZSs3[j#j(3JZYu"emb@1g[9@JHBOI
%i3)d5gfPH>G_TOWaN5HgVd,)W&a]@9E*76d/$Pt\>t6Ms!N1e2CpuXD1N,9"albTt-]akF>].W8$S9`WZQd/L3s<hI?l`+4+@Vsg
%4(PJid9r"p#'4eElgT$0`YC-f4driV2l?Imk)KXq\s=SQjK.C=/L5^i<WYlh:t*l6U2E=objk2OCE,]=4bQ49Si+FO2LFnf,"n#a
%3@W@HP@?`5aap5Jn%Nn_G+;L96]*@m?9t(,AGWqYOgW1ra-DGGgf+H?\kjFO+%1AB7uNDBD[2Q,Ndo77JuJo285Fs(8UtU%-]d4@
%,@Uhsj$)%cG^-Y'[PuLb@7m>gdX;A>Rp+`qXF6+b?Kr]<0[uidYo\mXCG)gbR5WZ;ma/SlgVaN5EGc,B'S@i]_kU1+3MkN_Grs@D
%G,;be]Sg\-]Q7EPj#7LED^.e6;POd8P!"_caqs#7?87J'&gtRjEiH'K[(N1"-.:G/GFk,e3CD1(@c4ZN*df5=N'="9;cKrUL\VJ?
%)\sms\6-Hd5=u5.WlmC`cHc'G(VrXb/O$Kka^C<i%W<tFg6mO.P^>RDVlW1rM7V"9k*jld+B's38]P_t*`5Uad]XXlCj4*aC7L@l
%TonRWmW-]h$3shA2nSc)(Mia+cMFuT).[QUFQrIc/s\pe9*##'^MT"-UrQqt7d/+`-@V;"3lsmt*;Z(n<Sm)f?fC*4(g)7p0CQ)*
%p-,M"??aAdJ%]-=")3eI74t]1JkF=a/hFbW<Q<.\8Q_B)pYM?5!j>VVCN%o_j=^*sPSni-CMumIWLZfgMZSGcaG;)[OE2,Gp[I?<
%AfqT+]!LR$E#g/,0#oIBY;nQE'(9Sub-<0bMSEn:'Hm?c#>)8fb4k_F]Z,ql[-h/!i*;SYh:0Ip0o]VJ^h]E;!gHoD7O;J!7l.Q@
%D'LT;X.u)oGTEF.?IO2ZJp`0B(fON'O\eJ>e/3Q?]Hk6MC2$]!JZ>=8lO>:<LXkb!qNoZ,.;[nW7lEY<.H\0hEKcjZZeg0p<5&T=
%1A)o]e?q$*<7?^%=]A.Oq^@m16]Am$d0IJS_Ej)fiL6X'-D,V9:&kb'm#o^XYHb@13KdM9CtXm-b>"84>TO26C[6Ta)oflC]1(X8
%3><cj_V(&^G?K_HR#NFG=GdTlKn'aY%!qo\Y>Cc;]2XuR$Yj1/b.uNPb?pUTD7d8+faLs1n4.O:O1qFeEi\3ljQhQqq9Pp>5"Ike
%#Dsi"eYF+)r`L\Q(<$pT_Ot!P>i<]hJ>Gf=S5'@,ho8UQ#_-2%2PuOZ>>?9E"/2ugT?'6\^)4Cu-_KdFL+eYj_nETsWQa:UO]9/8
%PA$RM@F8dW/CNG!R*6%]gjjLX%m3erb8IZ`>LC[!*@NK(Y*_AAC!IsQpgtCY3BO`*j`q%RPL8JD4YJ]>iutZ'<)/)<f`)>?6&FGf
%duOqRdLn,9'ujYQg0+-%=--Yd^:5LeNOcp(rJ/[Dh3/p&A7kKdV4=;<<s^fYnF#u0`W]D0QO'ZBI$%0048kj^GW0[Mk>sNI+s\Q*
%ma=8J7dE#KAm@Bm%t".5R8&*hbA/Z\lu',_oCYm]Z-m.>6tt[%q:<,U?Jm\$rj.pNV!=Ie7Q6l>W[iL\`N8tGo/b.71MG6!j+3[H
%$H>kcG2RYp]PPWLhb1<L%8k56%,.Cl=Gc(:8n*2++Mj&,_AF7mS@"T7\lKos8Q+=A*))K:0j?og0:Ean!VRZNBl*=n!D@UE'Nsod
%qpQQT0OGF7ElbjPE<QU_7Hk)P$M.k,VUObi55'$((E*7LF!8T4mUPH[3VY@\.rAq@WVs#5dY9Th*!1ke/&,tYE?4JL2Qq^9])TK,
%YqZf:SiuS*Xbk%57P-gG>$6u#Z%.i7H[WCiN[06NOK:1VA@%nPbo?WVc683,Qt@['T\;V+.\JW[%>ZtK,DEoVDEiW/iA`(UOMjB<
%*d/c1Z?U\S[n1;+,P=pdn6PP!BfP)i>AC*@e%a!,<+%H"D<e^]3$RdD+Bu;:JL1^0fIcp>V,TMd[uW;2G#T's/`-3,%K?&AbSOT8
%[s4XLi0\XX!W-iZ;$RF\CZ$tK?.B6)38Rja#/,]&D_N8K"XH19#p7SA=1Xld.L7CB/VapGE^_,o\\u"qU__\1J4a2*0CCNC<&Kee
%WZ9!4[%]12a/pTUD?9(YAajAn6>QT#\JJ-&%FU;!*:SbAoq5";6AMC'a#c9UBMGY*e_j-saENj]ZGE)&;7F%EZ=qZ^e]#]D+m?[u
%B68u[R3$l'l]K5u?L5^\\+qncH![<J/NS.Nc<FTM\?]!b:dXQOl[>P/aanSa/$^KkM#ecack2Hfi0\DY[Xtg-U/Xo=8R25,%PG,;
%*=6QX`K>69KujH=1r=E<;1O_hkmcdDX=UpidLI)%G*s/`'m-#ia_ZCd\,k+uIKF2o9EWoD.7i(NZ+?0qhJ.^^>8I7pY:Y_^^6id]
%c2AZ&p+EQ)p5$?O0%^7W"o,b=bW,m$XEm6<=3'FL*ao)*)lU9b+j@pF<^hU'T7CW>rZT]n:\?E\7T-DKHIs:\s3=2tJ>ks\r!L\4
%BtAlhV=!255ms2+lICsq"^ms//0R*9p2l)@r@.8jQ51;"r7!L39j0Hq2+qhi0V-\aY(pVBq?#m?bD2sCeI.Gq"tK(W`!@W(5/OXX
%-uNqu&QbL*Hc$A=*MS>*<:2i(_VnfFkLWJtZ.(2q[ps0kDF3S83@.(M7C@-pq>7anQYs^P@CA/:*[aW(Hj<O\g*<&\dR7\/EopH*
%WP?$EfKPj5?#fT5@]s"p&)8s=iAphOft<diT*C'oQ])s?AYP4U3:J'hp>2S(93;^B]t>\dBMEh4=!^/9We!&))N]5f]aHQf4i_9B
%EhpT.Hj=iMT*"I6Ck>A(LDqG$fuFH8S?8d:&BTKg23%Z#2"0*"[o"9@O(;XFaTuEb';H4/L,MNLfGUc!rsuk5Vd/1Zi%::=hH3oU
%f"ta#[Go@VrsgcQlPrL4.&hoKSU+Ym\"7\/=#uMI0,TuK:j1`&e@l4VpA=X3UuZ\N_aX":'#fP%P+cgnNCt^1?*\cQl=g/n<.ZMI
%;AAmQ2N9re9#Q]KJl(0eZ1]ZQneQ;':%3m5WLLa=h/^d`]1Z3@WjD#%N["3O`jolMZQLnd1=cW2DnXb(/(mIJ?!E]e*hhHJd7Xlo
%.<!>D\l`MBRLcBo0)Km1?LJ@kL;9R#&!2_7MQR]T!>H`r.\X2".la!,XX76*g6QEu=24DEC:Qm2eYUSJC5Yj*Wfr'Od:Ad>7(Tt`
%i0mJ?ot\<#$-.g+1W)YD9">Z9!doFjV":&\fB[d5X6eSZH8dRfA.!q=:ElsY]2>rDA<eha3V2X97D)k`5M&O:<PTQnmmEtR")\lG
%ZCg!fpTJ]=[4a2t*HEF_Q<,Y,oj>A8=:&9$XUA*F/ft+..:dh^$8(<_n_RE9.2?QZ(HJE;Zc\u+02(m,<1J?GmWl5#[A["6k),K9
%KA8n9NRmd(S9*b)7&46Z#>%lgR2=Z)3-Q:3*c]fNgTlt\HWUl;Vi4Vjn+"2shsQtf#_0TE?,<S983)"%lQSWu`_PO@ipB:CPF<*7
%Qg?lWeWThB<fD%2l/j,RCYVelT@Dh>^+IFta:%%FYYMj^+]JVT=!oQRrj4(MX4Rl#,nb2LBl)UlrYu4bQ6^QpMFuU#lt]='U'_kq
%+qHPoX`+Xl%hi6clV^X#qK$i<$5lP&h*YF<YgSVZpT*VL03pM+Gg#]&P1@R*eq&2:8,YFOV/25?7h_3<@W<6Fjk!aZ%FW60O_9eg
%oT])LNF,c.SD_D?n,O?[6\b'm_t>jV$O_7P$bdC<bpd3tgqp6*XiS%W"r1Ng3=8YpeLhcrQnX41X0dNgG-TZ\jNOd=XqB'0$qWlr
%q?4I-^ana"io%Lrhfe[&'-)+>+pL4F)=Te*OU2tniWQ)YJ]NoOmos;jo='/UV:MaTVaD"HhEgJh1uIpXT.][b9K<(G%K%s<^`+m%
%l$Joq'UYam+\oliA&a6?!pd9NEPTPh<%(__H4;9JoFi"fVHu@I^<YXY1G',d2UkXc!:ID&Fb]0]r&`Tm(L^O$.^5Ka2UJ)ZlFTA@
%0?&;1TjibE#krN0`fh^^Ke4?J%n2.\/3PIiQ7J+$O06ll&//Ep'SmE&5Cb"E[]qjkTZB4,G1D)f_,dcs]nI28IQh\^(X;m&dHtjS
%YW@(U8dNOjGujC4\e<XN<@:LoXVOj^osGC](eOjA+O#;B-Bl!ak*o`I[3'1Q?TFi7[rJ5p.d/[KIR!$dj=oN>;(^3nA7[EVN_*B)
%2YYX[(5mVSdNMe"0Jr+DrkE%e;facm/<qp9^bb&6YEKTuG>:sJZ%Ar(F<Xi(TkoaeR$?M1lW[`m^fOE9QG\ToIM@2<13M>(c4gWF
%\>`8Hb&27q5mPn*?(**]r?R;QZFcaMcH``7E3,pE^EsK5CL/+0o/#i1gnB&OPK8=S7r?a$UW:MFi@1&o7>8XZMS;.-V$>YP8M!Bg
%T.Td3Kj7*i>#_^;?Em\UTNF:]JQ)V``D6`if.Dp*b]6(*TdX*'7j_(ur>&/E=b?jk3qh[ebZ,n32dcrRKmIOiI?fqZUu8ZD47'D*
%c^OTHT@*E3N8A6o?Vq2VYMo"tiT*YeMLs<N85f:\Wbe=ZBFcXF+g-#tO9JbILbm-QGcO6gI@!@b)*ZEMX]$'+G+"LOYa1YZ^o$rA
%m+SpnKbJ6)KpT<S,<bFtpk"j&#D)CF0/.dR2QcOe?^aCjZ0QJaErK*QY=h6.f`+9?5p8O]NfEmtWKKHL4WQF3LcF*Q6`gC0jjSe(
%;qoiI.He+22r'<Lrr&n[A*dXR!V];L/[tp5,39@4[c2R%q7:_aG\"mHOg?Sk)qlZJm%UL:l]#I6-.m0u_VuXMQ1EmbE2mC9&pe1@
%MEL%0)?ne_m1_N#(Oc<P1oh6r(-=m;QA[ebXXH\HAL*g[RFS3Qjpu=8#R6@FoLQ0Wr`:@AY#1J\D[CI_61R(O+TaQ%Sp.U(,"\1c
%(IOs$6k)>E";B3@_k]kl1Rk.g0OrM']Y6&IOmF2p..3=/SLSN-VO6LPaDM_kV[LDME-cMi%U<J3/l_D41S9Q<`)btBB,Y]>E)i,=
%,(C-bo[B;un14*;?.VD,ri/RJhkG;e7LOVN[!!&KEOJ:gaB4]Yi*rV'),l%PEm_k2V8aZfaRPA<#SF\G6VLS8N"8sER%tdPfp*Y/
%>?Cg)l*T=_^R$(.BFPsN+Tm1M=C/9C/c3MeTT#o@BMd8IcV$;b-#I)uHl1Y(nM.i!L<l&[JI]so(>^5>YZG:/FXM5['IOGV(<!BR
%AXTTr:TH-=rtc_-fkA8LkCR63`(fF!A<ia#EBI2%+#u/'%>u*kb+0079'k)%d8LK8WZPrp6#e[4Pmf$tPa9<;&HIq6W#6c0Wb4ZQ
%:aep(Yp82KnuKMq-\:mG>L!'rZhe$UjSc5a65?"PVTct]rC]!![+N<JKf)s1j(#Fm1?R+&CpY+#,<MpsTbEAS%n#m)3Mh/%BQf6"
%ij-;CUi=ms4c1\cWa[aiT0j9TW\Hn6-#n//HKlf\h';83X`SEkZIL\idZp'5K`jlQR':#:6V)]8ctCu\amoJdbn#,k)"^57b`lLg
%mD$WT=d1kcQI!*4I6EZ%.>ZHLgLQtXR<mKKX7N.]C!LV,:?O"rL_eh:Q"*3+f&K,9]^!"NjnhJ_:h:YFW9pisi&IK%%9-0hHDATE
%=rSsfX,'U\G)_U\/,/HR3%*"a@)YP&8`=,;e<@q)jKk2>Q`8cHk(>#B^t9>lhoKL!rcs7(`7P8l(0Ukh+j_!SSbF!2PC/?^_CkW;
%kqF$QC(%&H4oJ(L_h^?-+?R-l6hBFtij'YKV`CA-.cu+58Kq*0FrF9oAWKR[]T(g\O/j?tT0fHgpe*aJ1nj9O_Q#30@)-q[csYOf
%caLC&pW3TI*lZY9/toLeS%YfTB`33F?28m=&/[XOQIOn?"6QNCaY"8t-iFfS-;8rD9eelC6!DE*Lo'HN6;6e7k&%(u:H<dAV;:^F
%bYHWX,l1\Pf4'j%R4?WGVkHpkqK1Y!qLSD5>D\jKXRTW)o/h0'>_b3"8UKiH2"]f`b6+iJh:cKfhUq9'S%5-@3OHH+hs7`3&eEL.
%iGpE=UrAt'Z0^ocCs?WmC55FlptA(i-=F]9%n**4A]TljRkdd%:!N&S[VXh'GcXR.E_5>mqoDKNT[k]QbDra'guHW=/aBPCYG%_j
%gf28c6pEnO'*Y)WAqTS8X1:nfj*9DlMmgU0B>s2dV3tV*a;M*7TsB--G$gO[TT,uRkb@qHk?[VXfA:f*i+PqE4pH,;&r-nf,*h3&
%@;WH]lO,@^:5oG0hH_]%$QGcn,.K+7PJu^R_j>!(.Yfe5L77:E#a&oXJ*arjE7p\L8]BFJS+3>c"Y-\^=`A823%TO+N[kG5/?SlV
%Sr:FUQQ?B7V4CB)O7K[H=nYlB]F;?fQn?P'N@Bln_uWg:%MBA]hgb'A)=TL&(B=5eo`s1G*a#[:hN/0!fspMnp&#G68p[1r4i!H[
%;IF42/bZ>1*aX<XHI+r`(L^BK/i?G5`D.,e]Ggm@B3IcD^:3=60m%0'%+:Hg%g1e@R!J/2Y$9oX"86SGT:O./B<V=?<[)lo(j2SS
%/KPV+]gZ.3\5BT):DOIMm>d%2AM"Z6f&P'_Ja\sm_RtKIAPM3V.[(^,TZH?]l]/gg_Vg7.BYIS;",@_)3oc7lM`8Lh_l:P4J=3?l
%(KNEBFiihdBm%?9_^Dm\%%C2iH`(,``,RFZAdpXjO#+UL'\#jhG?mTD+N5,l,4nm-[i:iFD>D!@q:HW9CteI-lpIHlXW-q%=1mh+
%pDu5XmmlD]Z$X\LCa^"HmM<<HEY/Ve)+kh>+AHZ]EWGlAqrPrMCMFa)kBGh1b01ZF*@h11m^[nsGWQ9YXunSE,cU3sf_*Hn\RO6s
%\DohIl)`,M_&48Vi3=mTa$f>;Ym%;CXEm$PFk[Hn@m1?jQt@edYMGO'cfUdHf8dVSHkSR71UVRXRo]D4p>gpu/\>YfB\p4er4U]@
%W\V!:QjT9M:m@Br66lfeXLPb)<5ES_9H5ltR>K9(XX*iI:1h]/mH_>(G(;b%ahgEW.ZOmP`9A+`eT5E$!(XN"EFqXDTl4FVN7cS0
%>k>YI%BDiodakf&Xq\>oOKM4.*K/.I]ee:YE\('jYJ`?2bT@lB4eSVP$a&0hJ_)",I3qPNd=#noOE'uZFk1f[]_&VI.@oW*;p%mo
%lVL0HhV6G]=k\2Y&$NS2S];.]$5QKLV7S2)lk=K.fb1:,%X"lb\\jE+<_(<2Cpp>E@WJCc3Sn)D%kq;%;5fF4gD%DqhTc>([j0g"
%ep/donbSZf>%c+nKZ;JJPhnN92^1gQX]DJ-.%$FiUm5%)7ZY>,0k]^O)`b[(SR>W1VA%gfLR=Z#dG]_@JmtHNo<0tK,"8S/ZB>LY
%6Meh#ZC)]&hP`[\MLS"AQ[..kY`+C(+uZ.;Cn,YsPne@hQn-&\EX&-V"\4jW&3cc&]3kcLPEX?I]s8f>,]Pq9e4QekMO7BG0k?0d
%O5NQA+t6remR.j-2A(7<\![1]B%<MO7bQQN$8!b7faEL:c+E/@:Q\f7><N:N'=217De%\*9M.VV/i22Ni?Y]ZL!Z&8rVU9"I[*Ar
%1@KO>rZ47%^FbtUC@nZhP=4l+5c8(X#8Pah1AJg,^Og35#:V=HnSk)93r9!ekft)&KO9tmL;g*!U')ri5i]d[Yn-25[NN_k^V([W
%G%$'F.#o(MZkFSM2-]\mBZhTC?anVEQcpm=+m=BM">j]6IR+^'MuT+CL`r_c=,U,@m)+mK2:!FZM%PL/a$%I]WCmjHga,-1WQTZc
%&8&n=1DG[Hnc*+GH'u$3b\d/Ba[eO4puag4cH?=d/Y/_]&]@q003IbjX&#[`Jnb-LU:%/!"9W7Go+>UfK$bPJ3QP'ICSDs:Wr*!_
%rKrH`Zt^[R6$?12i;:k\`=f]ug2ipKb"2?T`@!WtJJ=Z(B0`@*QJkfsNcN@<!s2r\Wc"U(1nPcj7r%6F+*;g8&[&/qjt*2P2B40g
%&ilaHLYYm^6j\J[$Pb-.5G[O8XU[stT)tQ.)JJHHK6FLF>F*J7@^iTWH5+]'jEk+:A?r&_f6@Hs)#g3r?M<0$D_)HXesaJJf4-I+
%p9iEU<7'.2&ZBFD+TE>-GNA#.fh$4c^a;M[1`b5!DnKO%RO$%&bG4L<pM$t.j8Q@s],GbEib[!e:9mK6<Sqj[mGp+W:Mkti/=<M4
%+4,NTd8a+CWZZLrXL?LPP?,V^6b;YJVgNf>0^#+0QP&VQjk^h#'\u!Tk$iI!fj,L95lL)98e_NsE+ooa!4:HUB@K\MI<j];00ACD
%.+*[kP#X`FU!\K_/lE<hTj1Bo39+I(=t=Z`PV)#[P,r+JOe+-s*a;FZ1OmAOp?*9=9q,%V:oO<BL5XWjd/dZ@;(U,0;8f7BIZ$f8
%#q`\O=qe?A+&"*uZR&8hU#Y;p?g4V\".%>M<VWU1kIl11IDuYd%HhGr"O6L1'M-Z8`!I'feES.>2%%,t:f1NOn>_2lDT"^2eO/1r
%&EA7do*PC?'mm]\i:8ArJ*/AGiuKV6D[u;]fB5d,@0S+<RS:0UNL</6B047@P_DK""JL!Wh)TjDr6G:b"b5I!]d!)Ia]\QocKE`\
%h"^o?%<r!\Xrk5]-q[W8$`u1B^RS,,:Ec:Q"=0RnWe[F$6sYbc8Cj[VVnBahrWul%V9jgC828$$<bb(eHn]45*1>NoQ%C9riIq'n
%-N+ZK`#h3#*q[NOb(S7Z3p?RYC-bcg+5KXK^:(sS1<QY;R*f<(>q,V\+0)->:J%X4K=(=](Uu/%W<%;1lHmCFM_[VcafZ\)/<32b
%ii3MHCBIUcLrp@+YO&c(H6p*Xp.n]6?<4N*YA:#;ki`g78JDQTfLbMihX=@>d5YONGW`iD;'8SXX@d>Dk^]*G,m6-+cb#Dr0Fc*5
%][lt`]=(q:%6JV1FWQ9<Bi-([V-I$j3m/maN5(b.W"fBl<!GKWXCXV7bZF32nO^Kh^_iQ@5LVu]A37.p=]IT#C90>l]Zm;KlDd_Z
%B%Yb5)XT"K+$CUV>.0T%#r\`nA`I+Y5OWI!qj>1ZcQOOP,A39CM:k@C<d3n%6'\NTctG"rTXfBH&O+9j]-tE_7dr9"^<[b%rpb>L
%2LJ/7$eqYWK=irs`1Of7r'l/?C]CnEAAM5iSJLNaXHpc]H@WE0p:dX=D+TUAQ=;MVGg7]'&-oO0Hljse.N(?Wp5U?9+TGGB/9j#o
%6BG^Y3Rj]5^O./XfS]B[0[WA6+X$(tCu9e6:0ccZE*)ig$+"pjfN:5>+]UVdqg>$o7>Ya%/XNJ8E"oM#oV+3M2>h[N5Q6_eE^jIl
%A]4a`;H,algL?@iUOoN,JA=S0&XI!]85\rtd6eq`'R_JT_U*oN6&:[@O5qM'>rlqjY="L]V\9>pQBmN<iknI_s8@J:k:S.BcMh-j
%2slE/$1"$(_(\,t0Jl@s<aq`tS15?&[%U.7VR:ZI`G=e[Ej?7eYU(/7l&?-lRc3Z"Q#MJ8\:U/kX"oNDWRQiUdMA;S;@[rNqmgfg
%N`2]><>8D@C:`r9bu%/Sf+K6oj\(t5(7t3JMuJ+eiIo(-bQfUDUJ-=Z:_dP!Xb@#27^^<S$7#Dh55N-(F3u*cVah!>02K:Od&$)C
%<Q"\B/"BW<k9qBW(rWSiim0?F+a+&@]mO6UGnsmIT#_L=rHUHsZrG^O?]JJc4a6A.XmLpHL,?jW.T'42ZkNirF/;*fgpJ1;Y4GIC
%_#S.PDU9'Ij<VEQD`8I2(blU'GCmqg8(36k>Wq9#\ekL=9r1]5dMZ/TO_s0lf9C1R?K`IIKOqG?(ERn_FiV1>g.d/QHs^PFdh#jf
%*b$AMYZ#@@h]5fVkCH6>5!#p^k=N;E%l<3C]\FNn*(q2+D"-TpClL<2<CZe@@n@>;p1fuDHj[5n7D]@b\u7QA4p+V7@Q6ZuONokR
%9FO*T?oZ8H:;W;D&jl"_7BJEWF'qQ[&#RLHO-,2;imdHeWLkXG=d8UNU.'4uP(ujVr`S!hB]a7$kAN.4=D7Qbn!0?^m#G]t<iT`?
%Z93MZbpl(LlY'1b68H+rUHR25c73L$1#E].1$&I,^L+1$mam?RP1F"6>r`YQ>=b3V6U`Ei34ETUd)S3S:g+c?.A\,-)U;<?PVapa
%c+\c`-AOq1g@coqGJ:5mX)g?Eka3IRMTJXtpi%b7DQu%[Re-YX9DFMq!4^l\9u8h=h`i[UM]Ju:>MN$m7Q3/XOt3d<lo\\(c>n"u
%j_+<gj+%!\iU6jNq3p^-+URb0(7r:V.!hX15Q+eNrmhM]mNJI1Tj3kDD@oLoY#`,BV8qtVVmqMJoa,b8c'Y!E)ngo#"H0n\b3[&D
%jD*DW'f&*N/ubLa?D"n/%<<VsA7#WT\$tJcfS37l0TIPQ-5NpJO-W)F5dOc9KeJQZ_$raN?br61+F39M`jq=4,#VXq>Y.ijHeYDe
%'S<b`^d[2ddO.+\?B8b8B3h?^662+Jj5Btt)K\G/Je@?I)VRuYfUaHLA[Zi!7M?sN6&hF4nWTk]a`)PM.u,A9g1O)fh;X`.,6bVS
%df"VgMNejc^T_!2PqQKgYQ"-U`kci,A0nGqCuBo@q9W>hgL\O25p;%:("*_5SkEmiUd!4N1f>Yt$J''UX+oY&0>cq1IVdEqQn6mR
%9"ca<ab=#mAW;]]JX<NFV@.J$o``?2ZP@9;YqKc`8Ii(qE'Dq`2[&?i;R0=W$U@4n<thhO8:3D2WMKa.=CH?s^i"E,D5OEr8A0+B
%X5CW^?pd4U%_0]S$5,?Lo!i3Oc+3M>dmdkp4BVD&2FKgT[2`TO*;NZ`>lcTc=d>AeT]m(H@:lcT$&_p=?A$.%!',ha!oMiu*J@nl
%n0"a.Lgg>4[]MT8F+F&\98b`)>sq,c2GuZ"%Cj2oO$]("]\OSZMB7ba-ri/W#@]al>N\%>O3&YS7l:8AEkci_=o'g?"Gn]5*-TsV
%1o>P/W($+mmnV':p/3)tm*kdrjp0mfWop'"Hl`1.)8`/a,K6Rdfq.[pHo(.t;e=N.'pNumUs)B6_/pP=Sa%q<>U!q?B-$M')ke@s
%e@-<tO\2iRaJ3TJ;7*65=4B73.'1OYD6Q,?B'Y$8nMK1`3T7m(1`Di.jlb+kl]pF)8@>-']p6U]UhXrE!emf3.eZqp:^[I*V[M@_
%ZeHfP*6>`A'+l$p@8/MZ_$kWA3Q]!+<N4_0I1HOE*ASB2fPL>B#Pei:K>4t>+6DWe:Qd6jBoc,&<j-_hFPPH*pR9B\.BQj,aVWa`
%r6ahc):_a?.=&2[0[P?jF\SX@LXf@?!t$3U8nLaY2<S0$.>s9m,pG7mrr&:!8:`nkp#iV_kk/.8+B']3m`=!6r'<**_a;F9*oY97
%+>$s>r7ZgW36/\Z#!`-eLT6b6T50U(dX@$NMD2@j<p$6BA(Onn&%jV<kZt)'AX$T^n3qt@gIfV\)Cj*(#(Ac@Y&\j0Y(Gs&W`pbh
%*SrZ%9LVEkHXX&5Le44S%*atSb>_rUrX=$c_\Pm<Udl>QjtJI"d*3'f>$-legXabQC_35WM%bt^k)oKP/ao-E-GAI"QRnW2S=;po
%RWeK^qSd1PCl+QfA&YO7H-09(SgKi/%JZX$USO_t5l4UJIs!\&:%rH$^<:-$A%c&/ooW(u(Ja[_4aCD?Nk@T!IGptOjfPr<F\Y)3
%]P?KQ]kIDG9pqqZqKbH_WMmiA5mT@0<jgdAKEo^&EM7ST$rG&;e<Q3JeZCL/a.t+(TkngY+P2mp+j.:!T5GGElR3@&<kf4m@f^.=
%DVA31p6A<A5JR"T^Ht#p7d\`>J'H7VnF)d95O>-?:?PrZBT&TI)gr\5GD:?pC0pfpaDfQhkdTS]ra?D!i.*pj$9;lEejB$>FqS(K
%=h^#6%@RFTR1FJ(M4\5uLqh'oGpC646O\fALV#Hnji@c+b]c_a"Y%<J/Ndn]dZ)__MS^fh#Mi1mL:g'D>0[XG?@Ci,_U"nYN5q^Y
%7Z#",(UmnFIGHkim:q=Kp@r."[XN^-ULQ/\HbL)sM1q6`^N9R]G=L))?(VopDu#oFaZJhc(m9s.Ke6Nu@n<cFbsOs0AG>^aZ!H61
%B:gJRmcttpMmVP`MD>^5P/UajN'Qsc6D:F6n=YRq2]^j6T%FYb\V#rnlF+%:OR[p7PH#P1+$d1W?V'3.]`^?'%7InTrMTW=TtTE8
%UYj^57'kI';$;`^.qgo)O%OJU%fIa&!8S02eObqrl8Hfbau4ocSY/j)ns']c%OIe"-AN1ce9s5Q3$:l3eYY</3r.HY9!)3RhaeGA
%""D>D"M=CoH2bl8rcECS%k>J7r<*;<87l/6"ueo5"+b$Z\`D\S+fTW,`[t07;SH;*iQVmebuf(3VHiE?IW3i%=qdZs%BKMp3@3oV
%c<#Gh?)^0$VC9=HfCUsTGZ1,nF^e@;3t3'+&3U7=Y]ba(EaT"MA[VY*<G<kY_%A"j@minp:lJt7cqFi%^sae0SO8tg[DZ(eV*]Qp
%$5j+d/=jH/e[EA2gLdpL\<fh1oY-JUi,;V,Q`;"%iGfC8<0'H=knlB"M0(OP!>I+CjHii_p^Tm[0&s*/Y5K8emTR@@JQ:"B+$H:.
%<+aXB&?W+ajGt:(+$Z]*?f&EWQOq21Wj#uYBaB3&p*A,B+&S]i-&h1Bom8qJ8:fjhn.["nV&.3U[W]p-VV,nQ,&f7Ro6@Ne/r7mu
%M#qfIN+h9e=C/*6^=cYPhOR&GC@oT;[bmKDgSs%)-roY"e$`<<3Q[!V/P'i4H?0l1oh88\eN&/+dtbkrRCEf);AKpZ6niLp8@:hK
%G+Bs1ceLUZYEUk=ab&UoPMrt=$a6%"kIRoe77N*Q]*9.^,Ci_f;s47d4Z7lGjTq[3pPO-D="C>e<m]LLcqNu=p7'`m+Ip28FetUg
%,]3YD_!+41^D[pW4>+_od%ABQY'*:rODFCf6)mfe+=^1Xp`&aiI6-,aL2GZ>+]^kDE@=dFA*%Ut0npC4Q5U]B6$mR%b%/p^0Q[r'
%\D>t:'#U.6h+emA*L0P#X]VS!7]7]Z*a;36S_A$JA^aHjrD:j!Veqm2'0?jV)ZpNXPr(\Icqq]+EuU7=;#KQs]+FL:)Z.uQ`e$#j
%o<UgXY(DImJ+Sc@3<ddPFN%H0`PI+'Wua$%72e!TM1i`b^1A-eWOlI,oXlpFY=.]55=R04m#i+!Q8JL4'LuHK^9T\6BfdF)E(hhg
%<+Gl4)@jaMV?RFlHL2<^!<"2dWO-rTP]hNd79OO<.Z+gn3:VDZ+(rnhj#__u.[XS7/K7^`Z,:G<U#2dk.Er/;9h6l'+RL`[MU0<7
%b?E12SM`,7R"m;m2,+c-B"#*WD`1/lW]-pSj`JCo20o%oGZstkR&&Hf(&53QPSblAcmB6LQ->,dRKr5jMIYlnEf:0(iAh%Nj?KL6
%okLrZb#o6cBp*%5?91,QLRPkM&45nHb;iK/3&Z[^.RQ#SqaL\laBjS5Cd#[.#oIM".9]rp1V"#(P[+m+o5q/`!BPjjm"r0#=G]iH
%"C\hU-bH[kIbk`rNNDU5VCKYTk7Acc=_<s9*W9G8I/A`$Pr^tun7PU!Z8L=>g!Euia4CeaF[\U"_cL#N+/<Z@GY"FW2>XPN,?@[3
%H>QMSZo&PSLNL*+o%F3RZc+X\8p+:MZ;j)tIWttkq([':VGC?2,,iG+eI;n`4%0+@hKku9%gB]Zn&;IUfc/2Q#";c_6FX#M9DH;1
%_b!$G`K?W<;$ZBncfYT3g)s:>5^5['Zdo<pIVk1_WkBFLgln:S!:J.$"3Ys^%AY:#90;[4c&mELaU,$p]/&bfm#W(kjR%@[<\D[l
%-727H+&2A_f,1h+%)j.ClZj"TUlaE^V-+[3V<_"KDpeotVq`c2(5%(Wp11s%=9&'"KFX@Xk/"Kk1;O=?,(s70)VRuK^fNp0TqI8u
%.o\i:?t0=F!4$;S1fsJEG-Z18,iG51SP,5/kn*g$b,.2dORi+;+4%^$V,"\D2WakhUHqq'eR)O$R1q1aO/m%Wa"/%Ck>'-5"fkV'
%m-(7rS^^$[qcZX6FQ^GOJt]^/4VY*)1kd@aAZU/m!SXsFGpL8E"fl5&k9K]ni;WH2dYfcW=3f#bM6IZ>_\38,X>Im*K,%SrK6=[/
%>npPcDRuFT]Q[c7;8FE0#?FJ,-soJ+6-Ij2@+`,>FN1:LN="]OX<jJIgHld"nbM0A<1D^JWHCJU!3E0pdOst2$PE$C($M;OJ*Y64
%UZbAY-"%E<g'AYP?53B'\rgN,)9ick2W/E+=i$mGKdD03%k[OUNIQFBI`75S@S>TQ6r;?Mo8P/f[l3O]=4Mji"rlo4rkRZVlmhf7
%mlEka*;<_pZQS+H=fTZl/uV:_5DY*KS/CDPjT?$he[:s8:/[\<^=&uu3#!?TJQhB:*Fp,!lEA<;XqC/r3ZA]L/\qg'%t?_\fZ<I,
%1/_d/eJ29L^f1MElZc's/@dXjlgj5'^LXZ!649!l7Z+Y100Z$4e&9/[qp:Y4S,MAGBh;<B4WXZb=4Z*,r/jPDRJNoi8#OKgaAa7g
%5LF&lh,?H)YXIQmk\Eg($ALA<<[*li-mq4:?qs_c\it2JS'i?iK4&VHr=BCnk#NTQK+Pq)ci3GFoCJdU`+/(PoOd4]T!b^NMKW*A
%/sVP)l_U3=1kY:l=iL&hkd8^s"`$EFWY)qFnoO9_\qGOQ7h<BN`"PI<6-Ws9C\s&_2Je>f[_fs=>C8mSo%MAS^F&L;5u"KZ/ccLR
%!amOFoCZA/>7^![DQG39H+M"nSJRjm0LIihf$bt0'9h^,Jl_QoFtXg1?-2kkH4p"T,j_FY9>^\:?6"V=QDK"ALp;AJ_TP@p:[jI9
%edeXp*ru]P26`TVKa:q@AV<n>5UT$fVB1h6jbGsQeU\Q#YL"-FOg5/Tj<.0+!OopL6@fEo0fBJ;/3PO6&nNZHPCT$t3`UHg3`FG(
%\f]CUjn!XY6I/Xr(e7>sZ=Hl]$fhY;BNT!"Zk@*M.^ufb5%uG)j%qSUS:OFqI3]+td;Z1M)=P3tSt4RGipOFH)WJ_AYUoriR!cJe
%5%0/60sG*3)jo,_j3OchR=Ze3I@>D@I4h(JXR]]h^94$Z?B_bgq=/p)1BaO;i]0*o0^`.n[rs*Ik]5u_$AM3J+7cK^\)[8N;"98R
%ZdDNEXstS60V`tRI+Eimbk,MJ;PsgH_bg<>PZ_7G!?<HA("Nlbefc9KiP-]MaWQ2lRHq]ON%H@O\`'RQ8kO1W-0VH$i]gN&MhLTn
%@'<7;&K2f6Qh,LJbRm?.e;[=!6b!7I7a)Dcm-Z\jg`"`KWc-<1F)].Fm`-Ke,\*&kI<;N&7B6kJA]2Y/kGPLnehXW#+0";"a-ZO-
%PkR#AVt<?*`JIe$8]/E*X@H3JAQBn0_q+cM7>WuB=@M?JD-Uh#?lFG>O#EeFiohWpJTYR)P"*$?omNHMR$>R@9h"'kZR>Y#c>$N5
%nM^4J3j,<Rq.r.[6Q]Jp)i+#R3:gXAJ],ljkooXS_n45*nm9A9<lsZlHpdV$H_'E[3]koC3>sZ8N--bC`;c+DS=ZiZ!U+Tr,\>0l
%9KC]bUateEeSq*l_!M37p1Kt$(+QZXr:DUjm64g_`RnDj9WG^OQq^M)R?9SBCba0%fj+GO&63C.S)I^-#2`ibnXHK`9oeLr]4^tD
%9+phb;(d*1Ar^Z0;<_=c%#^12bTqls&;@Ilgh:8.j:8f.D9!NMUgY23ZZfTrEr1]uYY<WI.uYnlm[>+MIsUFS^.M8tJC*q2>fqOj
%[Ke\Qf<IY.)U1t'a;G.N9jC8Jg%F<%gj\'ZNAh-[fKP-RKZ5O)T?NG3?:W*)GqY"\4@Gh#S0&^+`'4jnj=G&Zr?SF$f//V-&=_iL
%q5gGQakP?ABlt)q\`H)*_sh22&Ug:bjm^0oEt@r3Xt!e4XdZQV59M#r*C<HH5hU4MnPBt?87!FWk]s52IRW)rQ:$'28*\u2"KA9J
%hBlYO<h^WSk82J*2[n8A4dQr;`Xu(W.PI/=T7^Rc/TX\m9c7)a'c0?5GpK(7K)'%q1^*D%DSX#.r&I-A\`-H*BVP]8,VCF<B$5bI
%H$3%8d:tp0\1bYb*erBI$(At3Nsn)b&kgq(-*UAir=i[gXrL5e%4U%$O]pKOC8FrXB^jFVGgU[fS,$>'?1AZlGV/<1^DLk1-"I5b
%.m;^TZDk#7^nuE]$:YM\?"1[!SNfVVncuD-@RsVm6.i:#?j.E5*Hm2s('tFAk4)4OGARRsOoN74(lg`i7<k-&h6`Jh>mY']Au:k(
%g(ZVN7ld%6.hN/pB$*)8,O`VS0qXL4`ZoK`kTk+=pGf-_8SO=KFnSt]]klao5C)=W^u<++8"lOCdnH_OCT'q-r6VH3i`T!\1a7nP
%2^`pO%OS5"0n2>QVs$]\q^%*e8JICF<"f/.=Gf1,`<sg=Q&%89VhX'P%#U(tDNf<s3omlS7'`YVm"ZsbmDZ98+a+_u8.j%Fc7@og
%`d[?R2dc0Gc/sN!(Y2\Q7'0Y>ZKuP[M'C#q@M/dShOC<nlY3TkbfsltD+d;f7\-KVG7ma+<bDAG-\HcR<$Oeo,smqH$bWY6=TbMB
%?+$j$L:AXGMnP:fVtNKA$:!#&U@t(^rh&(olsF1(?Dj?#r_U_nDqcXC;B/iM.MH.U@2]m_Ee%=W"R<U:&dp(gG>76?Mb&:_3gMHC
%m()9(T`TgFkMh;Y1]X\h14m(i>F<,7X9CmY_d"0`PC6<_?%9OUkO9!84)816H-M;DJNgdCk[1`rq]1+TWk#mDIt$/HnbSfk*0eE_
%EM/*)!]3?$>GPK+*V]e8@BAm4aTc`WBTfrm%O/nFBfcco]"5F&nbB[g55pj#q$T.\n#EEZ;ERJ=q3l7`#o?<67)qa20</2&V+hFR
%]3!!k)%sZu7=Iq3&(f<QFUWQE7W`F^oHK[Zi$;@N"WDHDATO:l$CY%Y$7/B`I;&l5E:;6h>`U_J#/p1-f>NrK#k6Q(F"HgFfgHS,
%;p3bH(HTmRUc$0@oHOXSZ9nK<:SS7oSe2:qbWm<cehn7_PY9m31N2>`JSjb^]Dsf03_&gZh:OEodB[,E[/71acgU^L@;es+NXpJK
%I5*diUV0NtVXQ%]UcQ4=@(5-6#MT<o^J:nI=/V]Q1F+C(d"@1X+u)(@:c/1Yi;aVbebRs)%3^en6kF&'e$,+IN[`S6NMLV*Le&bP
%HiZJZgqf&CFW4)sf-=1s@_i8qV1Kje<Jpio*CP1>KZYiB?O+/c^#j$fk215A,S,$_#sW4+(QJ9ok5h"q]6,O?i;LF#)/!t#"q">K
%**,FghGErHX4)8cd7+p_eX!D6-*CS-`<aR*J1]M>O@8M<4b0?B5$Q8rD7Bg+b<S!IYB.VmqAL)9>6rXCJ4eEo'QKP*@^^i!TTtaK
%:0L!BWLnqXRghp-c6.0+r9/m78OCH1kipqQBLA<dBpdoM<Lu(tWtp-@*o3hsXtP*c<3V0/:Ci?T]sd4l8.YeJ;nQ(qPCfn^(TSA^
%9V!;;CYL(dLObiW3jdn")YMcV7IjtM9grab'TuXh'IU.ZTW.>WP(_dN_[<ZlIP*1ZB3eX<''+d)YsA?9[QuA#o;=A/>b:;kBO%A*
%X/))Ms%2"S*MpOIdq0p/@**lWim899HFD^_-D(LKM=kLO[qEW`iaoHPq>*K;%'H^1q>R,A?hD[VNXrDER]8ZZbW.LD30$\/VJd.S
%>.tb=MDkN-okGAM6Qa"...2?%cB`?3Qn2"AdH2)Q#9!3W"X1&6eZr!8UJE-p9e<$O:\f7^7Hth*M_;B4FZ;gu9.EF3);PPlNkjQA
%e4um?`P[eE>1;\#6'+=_d\?K\LVB\QYF?ZaO?e_=;;<kW),?9.E?<j!<MR:s7unLVW_%HQ1@0r)[nP("2[E=4N)+;Kjp*.VFa\[N
%CV8RBk3/l2XLe1hhPhf$`LAX9,c(_k(L<\>I$-mncnb\ee$;F2+]gDQ5c2_>E&$O`O5+._]oLD"7j#BA9E]XZ5$`puJ!DdndGN5t
%#&Hc6(T;RIT`qYBq<Z*NE\A'j7q"$Om9*B$C=7>+:-%2f>u92E`?1@S58QqHD0oSn@VKoKhh8;pUoFMB?mW(YY*01LA;6k&j_&e[
%OraqS*Gi_0>Y6?c)(!Rf1j;0RW.K*U05ZqFi2?201\;BGr%%Vk,mc+CM'gIliq*o79C`6NGm9ii\skCpl86aF6$sjR5,EF#k+O%b
%[aC]gZM7_kFi!!s:\#>sHnhX_k7cPT(e\uYW-8hG><(CkjM7)Qm@YN1LoD_e3j+[c'i74>VQ"l/.m7D_;`]&ol-l;k"-BA?.F;*X
%MI9$3^/oqo*.6tTI9[GDQ":u$BMC$5?sqmdn?)e?NaoSd=q;EY-DWXi:(9l+K']d>>s8pOgS'J(;4-fp2\gnTj`h)\<["i^0gA1G
%2pFm;'.a"3a%PWApUp+Ar[Rj?`Mgjhf7$iY6pEfQ/Y9opfpmrF42o`^`^&Naeao;->;G=?NLtLJW$tBHrEYd67\=9@V]MR:689F5
%^n%pF2b>6D&ohFIeO>]*Q2$gABMBj5ag"eg.MQ+Lma\XXCIRjNKbhP&5[.Dt9B'BnkuX?*L:A^1ruAY1[Cc`A>^Lh,U$m(Bh/"gX
%$7/n=FBs"rMP6=M:-Y!7*r@,'mZoKKUHc31)bp"N,EglF_D"OoE/k#K4mSpi:nX[(-m2A]2%`F3%B0!Omg8=JB!Sf?;t4,B&1o61
%/`.tL4QFYqo@]&L0uHVOTS%m-H]S:;^>gDq5VC9J5&#UPIQfb,j>/BTW3VHWS,QH?AO$>Y$bnB<m\'<S[nHo1[.G[/G<20YAB[PX
%:itDJbM!irWMs43l$"c^5jpWGE"Z`;b:=$@:Mi52?s+EX@1<(6g)'igPVr%NUAI,fhV6ZD8@2;_Zf>tZ4c.!#1&'A9]_[Uc"u"No
%W"4HP$QGq==R[n^<);"&ah_.@`tF.4nM!l)@nO+<$(G*WHsO!6Z_Xt/"Oae1/>jT*RRq4$KCr*n'k]WTHL3I]Pf-Y/5UW7&r4h0E
%X@OSbC:!hG4_<eVC#%Y\2/ojdWaH\%oZh@AAN.9gZ$5="^9P`UEpA]"b[^3sNm*6!BI97&#,WD:F=NHKbbQ9^IJfEn[\&%`CWA>0
%(86r66)T31Y*u?Q_Yd3qgDrJI]=UWVp6o[1ZfM)_k*pbiqXtBt+>VD^Y/7siQ#UWJnmPl98s)s57(p?5&_`hl'Xj!7h"PsO=$pE@
%_bT$1AFbB8bEi0#6[_Z)LdgapdY[)oSK^FofR-mLiC0AEcEXFNl/-mLDjD==(5nG/CT^T0[CVP=,n1kh`U-T@+tgnB&Ur%V(#(:X
%4f+@dA/7jGcG@r`:Pqc3&grmQX>dgFk*[be.!6%k-Iea6mc''<W^*kpbUcG^5\5lmMX3pkGil1jUOGIm2!sfceF4:?`LB5O(2c^L
%J?Gj;2D+bs3:SQ#0uAnn3r5'.o6U?6oF(En'rNY9^[!Oc_b#tWf!au2CZ:jm@RAeC<XY!e+Z1gp>f\jjAW]Qa_MK$9a1!T'Z^?Pp
%[d(JJ#BiCFJuE45Mon"b6-$qHIYDA;A7:W-j=&8>PU]@aHb-Yf;IY?Z8:uA_9`UO)OQ]QG5It.#OOBY.=4+EEFi#$=>bUko:gPuQ
%5SAG4ANjh-E\uK&X[Sb23G`nDZ$FP-'K?Lj+Wf*2e>X/)R:`lWkb_<@R:N/*X;G<^8dp$%0)6>pF!3G8*g]g!f).'RddY:j&<3P[
%AQ6jEU>[P6:Ou/XSHbAcac9-PHK)D[qQ$G50KlU_Ihun\Qf%79_sbe#L>R^:W1ma%RjEe>s,gSVL6b_^&O;Hq;8g,DGL>D.48`9f
%b^gWT^7HscJ>V+.93a-H%p-ncOi$80W-<pr`hSG+YjZX,Ha8#/np,UTTXC?B&=`.qI@k4f+AXe]Ybo/nFCmt1Ajt4VjQkJ:MW0Do
%G&(gJcai+NOJO>JU\R*,0=5eajtF]s`eS>i.5M^(T\o2qLTb>0[)8Y<&Q5*tM%GGGY4"^aQe*W0n_;=8>o'CcNP_K?DY'uoaFF!H
%RHlLecInPrAf2NN`WY6ni25Ynn:`G0O`J6p2DO.\#t%%sqb2]T*P(;VaY:A.!0bt,Mtj=X/66^"d]+lTW;k#g6.8q>.r9[MCK%c8
%&_dPM@hjnN#V@_DD_2O1C:AQk=6=n-BsQTEAk"4qf1ea^9mc6XAE;!Xde#IFP3U)Tk5CFb1o\FGV!r6Wn0A;aYSYXW%h8?GdD,R@
%[@hb+>m"80]@FR9"!=\>]lAUd((rM^?XpGife?o!guuOP3q1[E1d;bnY#(8QG<b#O)P+Yd!M^1<8h>`c&aO/F:0tO8%eI!)>-S4M
%G-6+)8NFh&BngLfE81!Bb"2r1?+VIEmEPeX+"`RHdMgGsNf4)/Q"F-(JTpuTk^AkV"Qh`<X#>@Yi."98]6B1tSfX_pjkV5(FFAl[
%lFH5`Vi6*Am9eM$%L[fK"s3U,5KIMpP$<)eI7'Kee3Y,tbA^5o?_,3@9WjsF0XL,P"X8=^?bdUW]+!rf'RB#Sp5cYF8:Z#;QsDlB
%]&:eIX0^g\786*TqY_<N1E"fQP/96s>etf,HEM%Y6bS\qM\VP5nJrT?\FsGANppB/9GLUr*YQe4Z/$mL#P_I`>d@KODXPoRUAHs^
%+`2/WL/(E9Eu>>i2^/c5r/F8h.gNS1pdKe<I:"Nor[&"l$TuM.cL!"feIc2i4f0Xs0FS/`!n![!iW-U']F@@!:n6T#Mt'usSL7Sj
%07QaB$@]4bH@4o-qDmOQVU^rjMfE8]4GNrKs",pOU.&Y'jaQ)Qk#]Q<dfu)kqjPf8@lm@AUr,=s=6k&tQIn1AiinY+hqKXh72kC<
%$;<N^2o\CjpD;d$-cWmCW-.JWeQNn8FaNdB-[Y<1G*l9V1r'QmpQsI.cNLS$&nJ''1BhJsR@rk<W@[ic,QP11f7jdhWib.WJD"&-
%S7BR@4qo-$Q,\-=Z<KCtOCZX!jd1;/]_)mm.ZO."YU=&77,:JK5J]O2mHQFG6uuH7k8C,pekblX@R-]@P4_D*-RfZJ^Bk5YRk-05
%@h(SW3OMV?cP80EflJtf2q8#%$1IQRq!l2B<5%IT*qFXJjJ`/fD4_bKn(3XY_V/'dWI4GMgfMd?23a8Wh#s*AdYbSN\jMipW.5Xa
%P]"V\dYtX24n6`qc7CgYEsm*c0\B\fDIAM[bmkG<h@D;LX?M%MjA.$okc[np-n=SehK)C_J<]ie.*V:lV4'78#Z_MA20s#)=,m"F
%&(A4:1TY]kfl[:M[d$K0N[78@fS"RVhHV'OR3re<]G\ohknidfm5_gtXZ@nOrif't7OOXtY3bh[bk;MN:2i#DY?X3o]<K3t[@u3p
%.!QQSTd)%cT]2')nK+VX\ZZU0]=`"1s&.oi:9Z:*D&Uc._<g/Gr_N7Um@J1A5$@hHL/+7IaeBJ"Y',u9dn7ZA,V"rl01BY6SCu6p
%:\+!\@<:H&cH0+YY8cM-PBV^K6;+cR-9e$=".=7(QW%JH+^i?i4XpE6n$FOC&`-tq[cCK1^pVPk)](\e$on`^$uB2>P,s!i-ObU\
%C,Srq<!k*'[8\k<YD\[moB<X^cin:n^5$AiGVad1dqPL!(<+H&HY'ej\/$1,H>\JC2=72POD(UN^93M-#'`AX-];W`B]7cbkN*U(
%%1N7B+.lEVk*Yfrg/AFNlNs5^(7-GHL5`K^(g)CpgS`Pbfk5i^TaILXVK*Y^8J8b*J42@-")Hj&T#JcM26sS(1TPYM.&XVMC=[8X
%A7E1F<_n3&<qV%%$V.oqit27Aq"sW?j6qTQH`mOP'o]%8r#pCW$BrWu/Gs"\iDb;t$1#-.k2%"oN@L,gV7F0a>4BZQ0%Y!6#L6MO
%*1mQK<Y(_YPD/uSRK2*Y)kmEgC@n$p'_E.8+Gq)@],Z&MNd=+doudQ6_Ah(#)@\f)@RKr?^4>eq(0/Wa?KA(nXW"K*Nc\mtEB;+[
%o*h.hKYuUcqSIX<4O8j7;m&V2Vc-]un!q(O9K4dKTb;K*SoJ'enN;)_E%%5Pc]@C==nTDN,QH_hVlmes5\Gq,T]0Or=ZQ.Ji8%hX
%)])VIj9AT=8RS.MC^bK.H"iR@Fm;J##JS.p3n"=K?oFt#L/0Mek]DQ7^qFY?4H+F;=tH@68QO5dM?m#gm2<pI*_^>#eqfts$U#Fl
%)#>JON+n186-C!,7mHe6IcYCL28<GW2$C@1K.@?6I-5U@?R</&!g@DLT=<n)B)h;hWp=_=cW8?V2(:]c&pUMo.lk,Tm(ftn<j`;\
%BB-EE7DXgeD2;68N6W;:et:kPj9_[LP@uSaRVoq_;N:gVAM0,#RE\'s)>B/uDnL6Np]Z[h>pEFF%_#l8pQZug2Qg[>MkCUrlWS22
%8HA2p&Cc"2D:ILLndj^MiO;9Ii-su-W[Pa5=Jpu[Z$!J/8m\*]2<N)Js$Hih)*=4e=se#1;*b")n<D?WquSa:XT0m!@Y&$J).;,D
%hR6qeC+Upc*Ar7Z(k>ai7YVoIJ>&j8qR:X^<K=DO0g_1RGC>c'm*6nc,P,l&^rm=tH7aNP33Jbt(u@U-LT:?uL'Wpqn5MbJ&$q8]
%Bh=c$>D+Gbpa0R=j7^mHH/LN;I'B;:omGs1aEjK0VSudn*.@2N@a[>@"l@-qS*C1_ht^f<*AUn<cJ9?p(jWNAB=.1]OSY&Z)PKFf
%6,B"N-c^'/C(\0IF'cu5\8jZ<k3+DN>cs@oO-Wa4\8a[f+Zkc\YN;Io0Z'L[K+tHmLH^:R9WtI1R.o+=@Q%l*i+p^e\KRL+Kp>Za
%h\QdNB@9L_GU>/J<8A.%oV4%)aQn(cCt;fWGcNlNi>'H>Im#D?\A9*S<L&),X@PLp40\&+d0fOCYQRr\'iNLWZ"#%r>J$1B"KS(t
%_jrB])NE,=kWSB9e]hdtK'p#Kl]=9;oGfls->BOUHYSMfM@M7YD>A0TFY37=%!fSJ7_Qb391(a^Q)Zus284G/TM[@W0R*<<osC!Y
%8"X:;c47dm_$O#N$1,j9Gr2KB;5iaR7"-__jlpiTp#'"\"h(tf"FoR&f+ZV#bXgX7*k,0U^8B(US/;sL@%He'H)#LcanF*`l`:=r
%kEAtID`Q:l>+/khZh1aHY>IukdB5;(#K_rSJa'Et@)nf\Lb.lbc!!OAPqM0<KSAP!+5BJdR?[/r?L<cJl=(WWI$!!H/56;FQ-S]Q
%$[nn355S4@.rr,UMTb2UWbl'#jECtOI><p-_hP[obRAocZW*5'<kgHIW1Ej^L^@FF6bsD?*']Z=_];t8&gkMY9!ODP>!ZAl6>dJr
%N-LQ4W]7^Z2^)kPa!3nqgPm3S^*;G[9gKcM(3XHsl-if4E?"?t5b_M_SAaBSTdSl.qo7t#mE['LYo8;T#Z`_2-W_LW;sU4&HTEM4
%$C!2HlO48^/n$E[Dg\kD=AC0=G%_j-Q;+0Wk),i\FSnjse-WV,Ar8^SXYlIWf-X6mOM0pb]dW!,*[IF'f2>aI:nbr=X!!nOOLtQs
%0g#!/\,.tLP>[S$3b'Fi>.&@peWe:\er$3!Qu-K`3sWkdanod&nmjsUR6)PJNla]GWf-@n/u1Nc!kf>Ip8"JC]MAc:ao)s$Y!=Q,
%"CWufC:9.R.I>t8S[>7g+,;58LR6Arr`]+[g>@.aY7fhYM"#MWQ/@-)pFRK.ME3"HGsp^E,[8VolIA7l=<H;$,2K/;'XCo'H)Hs,
%3?\.,WH?b"!+ZJ1Ani,N1i!^]pJf*/Zm)F%dC6B$1KANj,ZU#pU%,PXkk)3a-0T!:C_C1_4I.It^+_^:1JiJ2m'D"_bq"iEG(hW1
%Kq]4eet`^,la'`+r7kU+h9;2;b2c6Fo$f,T@L-_KD3EGWr+p]A)/U^9i)1lWA/RI<Lo+Mq*VXpT%sHEO$R`3ng\E_DBA?l,Ha-s#
%Ppb+@"MNUA2ATV9)g]&LOHsMt@dWbD)a_6pSt`bqQh!hGAlc0'+@bE(1FHA[j/'BQ5^i#rD7HIO`R$#5q.l2PfgZPK3fb&B&LbT_
%;FlK2!")nkXJM+nc6_UM^-DS,jKku6es%jtn5O(>Q@abkTSI"->?^Ok^fqMl(QT*W$"tk)7"(uV%#4FJ$O#PUW&#78*#[SA5)?Ck
%kZ!k0)YpEg?Y_f9V&Id1cZSj3=*G\*_$(;rCB[%K&1B1LKD"AW15S)NQ`("_0M<B^g,U5[OI8O*I>5l/d!tM$1R94@bTMVKlK+5b
%DGn6E?f?XjF0MhB!`_DALd1>jg[],2Hd.%t&X>]h:1Ymn:lcFp_>a$io)6EO4uIL@;%rNI3jN_X0A>r=UVC^[M/Om-<s_V(+53's
%]3/](?@6^5!KQQ6N?)pRGZ(HcjWj*%U>,#.;rG2in<'JCdJ#!"N?6itehm1q0"<![dStO?X$jk+(KM$J>GK1^6M5jC6n!%Y6fYQ1
%ef^E@9C^WYC`IgU@&:RHDlc_;cB+r';Q:LbXgt/u54C#ljkP+)Ea"(!Q!.htf^cZm?afblpNf>1.X(G88ZB>Rd:F6D'nHb*5+-[]
%Q7RT^qkKH2GDYIaP1eCo9::'t:C<u)Nk+)e?[J'MT0_UO/RVgdg&XYBqAa^@dC*,;RDg&!'3T7XSM0BaoBsC`G>MTBL2)]_eu@1u
%N6+g(WRh,'a`JLQ\]IEnSS4.g>VTRs5Xha=lq!jS9VUF`Qe($5X-S.dm,-Ug^OJ14M@:f(*Nl#[7eh$RN[9HaKf9`%gEH9B)J#Qi
%rt`_^.C2Am]fTrTb^&D5eO[Qf;"W2KrOrA$$^MI%T.H<r&S;fk#`)-b/&mTJl4haBVW';o[7!ja"[eijZu1b9&8*(W#a'&Oo!;Qk
%Te"(co"&D+qEV[jb-I,,,8e>$iWLQ`3W8lg<N)LX5$G_O=PnFNqFq]PauNfrc6\T@KS*n4KG2C#bc*hG&]F@^A-t,5-g"1Vf+Pq9
%$#EU$_=+Z3B$P!G'^@s+mdiEEQ?a:=jlLJV,mg&+SQYJ$P^^H&2[Ai2,MjHIV<i)OiW:j_/5"LBR4T:R/0sRnP&0;dLFVoljhJM)
%?`'t^g/HZ???nM@qBbWH+'K`UlQ>?8S#QaM.^?eRX=ms3NiNHsl7g4^bacOj2k)<jFgW*'<@\8]%]_PgRMW^($-DcrLbk4,59=K+
%rij@RVA4eRQAom:,#&o@ifp.rK>O2-E8_&=B"J3`9Y;p"ZU;OF\$tha&.XU>dJR$!nVqtUY[NdKoJQ?bE'MQ\be9AUFhJRl7FTb"
%"IO4Emi;QJ1fq$TL@A3kC%;I$6t!J9ggfN[m`FonC8]4N.V4]=>Wg2CNZI*]>dAbSqAJcA2QX]&T<fesT+RVgjD:WugW\<##[AT4
%M_IblmQ`@E)!2DR8ho1'NECo(k0KZgr=RK3dfM?-S%CARE703,_RhD6^g#F[hQ1Y\Xm:q)7[3aRbaW8'k@gEXU)b:.*dd]lX;,M0
%34hZh=%8;g`C7c)liRV7oD\X0mb-O`#MdFP@,h__ckB-##2Rf^)sSIMA:=S-6j:#%mWTLJLXR3'(NWUDh8+#gL$q7a>]skV*4*iZ
%DOm0:DN:J5>i=u/>[5sU#jai8mMp+38f^#uhn=.-chZ:*6#<bd?21ELGMf&r\GPFR%@<g***MX&Lc=d*:K&'AO)#YA(G\L&Q:(d:
%4i"%;ELNYNh(r;BpD@)iG9DdSkIHa9`HQj9;t$uBaM5MG*S!0%EPA_J]Lc)jEsF\fFt_#g#1E\g1+^7$,_2Y]=NfJfU4Fo+al(Vs
%D)Lh6*DfnFJGj!X]^![)@"uO4cZ8OTIsYh[UW8L%l$EO3&%jXT)pVE3B?o=8R"Ybf]\]oula^2<.:S$6MAf;0)>s5ucT+j@^WgXn
%C/Srt$Nmu5U9!.Nb0S.b'B`1>8S1a1D8[T]jjOKQP7SE:ZP@t&($9nt#Z*C;,54&5oAR7qZ3O=u,`I.t^/a]efsW*":k<(Ee42_c
%X9%NYFhC%s,@N,'@[*h4QK?';MZnZBmtY[Gq.4"<qQa]"+c>##frA'iTaQX?C6!3LdY[=!Y/3P9m"`u["QH<`&HE;^7o36d.+\2%
%[<hk*%NK$r)38sAc0stRO72GYJ%n89^!nm'g,N2/,O30_Y/j^<$+aYWk-g[[>dmV;JhsA-CU.;!/gi`Fqinh3gTD;,c8ZY)G]RrD
%I1U32+%;W*LfbIB5u/-PQ)'Kb%ETr8^<1A6%&lVuT&'D]+,#WimRV?Q-Z\nZ>h^WMn:M5FpU&=,VcfF90Xq?R$/)=ImD7q!d>.?o
%#H];PT,%5*-s.X_(*pRCX%jA0((Cmkc.M:Llcu[Tg7A9Do\69;9GOjk5RQ4T2Iu:KA<XuEDeG(g:K2s=aU!nPC7dTp&R/W-Sfu\A
%h.(9ga0<-P<p<!Rs/./ei</0W/h"ZP.]5Qm4HZ_*BdO:4=L8Pc$hj<;5288VQ@2c`G)29?Ek1IfIF]ku(tlk-<)%*/:MRm\l#.&W
%n'cSc!frXhHN03aMFn?YO"tiEmn:NZ]/r%>GNV7el=#eR:R3#ta2M1,JpD)k(!4%bTg-WirM>RkO'4;Zj`!f7ik(oCnP,COC)ej<
%fo@B$/#^!nQAr/D5mc]R4@%ugnnAP50k"p'K*SBe]*^e:D%)3>.CQ!@V&SP@=ndcK3<937QMC\%8ID`.ifpDR'Z$_sS51MhDM\UC
%:]5Cf+3l6V^sKCSZ`:0,=k^IBhQmL%frgCmrL#,tPXp\[7f&c$-.*$=;MipZ9<2I26'='`Yk89[$*IQN92u+U1iU1?rD5APb^>T-
%I62!$rP!N[gE&;69]aH8p#])C:5e"_\bC,]QE>J-6<7c1b-klXHa&c_Sm@2uSmT'*WjA\+BT[o7S*kGg5.6*jgfLa#WSD,!`ggY8
%hc:p:7s4I/X$\om`(MOI.]IdROdh,?"gO`%U-I7JDXVS`&lh=&#[%IcJ$KehK.EJ&9IZ_-6_!7O;NMTrFAOnuU.$IMnPR3BbdUdD
%]gdJ3?KSSo(d[>*(%aFnc;hf[18j3;92?c%U^S2?Ps:l11EH=':,N)Y;D6iapts/paJSP22@0`G`4e^$D*rgbXmi'iS\qfANXi%/
%@uAHSS-&fuFo:Ba,Q!;I>N%DmRsKR0'["u4B?HMTbi706Rn2$9L^iL4F6m*%=S\tfmVBF)m^rnt:4nV29*)=i_Rds,ZZ\hT7S,$6
%M0.F*Ver&dC=jO@@$g#2K#[D=V!umZd.%t&HK]m()]k7)_uqIVdmQ(,bp(#dCXR=q`cbmpDfBKJ8WTdVI::n@(QF^snFKIXq"?<@
%(jK#d!eYfXVPjLL.p\a<Kg_81HlGXcD7uhsg#u-r>/dl'+WCiG#Ni0G!"Di]a]5Dobr1:DANNdR)tU.EKIa-^;3V)<'F,1Y<V-*f
%/+3&`,7baW2U&kXH3telRkSJ*At8"#6Qa!10A6;VJE'U;dUCk'&LO5VRIX!fCY5_n+BCNTGS]RN[cMXS]@L,QJ_iSQO!.[NBq?>J
%@kLFD[bA/s[bko$0pl(5'bK4#`:!>.gFDcLM0YT-PfFb073OV-q?.3\n1M#G0$OK<[5d;dY;O&-*jo=eR6&VJ]05'@*O[?CUR@!8
%aWpp[gn)jE]3[\udRO1o2h+D9?X?Z<hT%X^O'4/bf^ebJ>WMEjl!NPYK161%EVA&lhOqbf5!N[%-e(B(o'!Oe_4C,ea9/kUoO*`Y
%N&ZBo%SL-PZ6]r^c:^O<#)>qV&<ID`:VF\$]H;]p9jZ6X=/*i<Z<WNdb)W]_SG#B6I+l2Bg8LR8&Q3>b<%\,I]M8oI@A]8E@]9>H
%@UFe_HVjcOCJ.Sk$EKV2KjAPdf<',4857iNjlrWqm3W_6<0g_?b4J8bFn&-aYt0cPL3I!'DLS99_g,Z7CVDs2P1-:SH1thq#+M*s
%S:?h'IS[W.BobAk3$[0bU%1:)Lo8-P;<$q-Y/CEIKF'i&j;oY]4f4Im)=([,WKY,Q*5T=C=X+>j=['DF.G\i&\jA19.Ma+G8.S1B
%)@%7+k;YSSat@\q!<"<Mo7.";;kgXe*t@N,+[+_%MDJ_7.?7>b.'IGY5dsCEgt,/Z4h6]V??$ksT&5aD_?\]QOOib(:^2=@>p%3m
%D-Im<-]h%abjH_MU1eBW92pck-NF0%\mV\KKR9t0UM*_K_.ed+KuDKla(<\OHI^`,=_'P:gT:>(F</9)/Tm*q1:Db(d_n4>KL6Y%
%hp9.j?4<6gTW,S'!%lJs\Z_hn\Z>EP!f\hJ$H;RkLk#+83b5:-d*O@_Y=niH-8hTM=kMJDf=A",3Z@)f5QSeN/M2R_K^e,k%^c6"
%==TP+PhEAI-?J%11Jr8@)4F/"<WJe&q1(@e8Og%m'</Xbi08&@i`s/3$_K1+gI(6RW=HjO'W63-OjAnj%0L(p7oZta_jK^@\!?MZ
%Qd8O_,VR"<krB)%7Gp(\ETZl?8#Y:m*&H3FUIi@%<X_u@jfEZ)<gHUcMm,Ze'Q'iO8R&_,Y-hIWi/ao37a@KWProI)+>PO&07^[1
%U,lZF3-<^U4*'U8(fhmLQR)pgi'$2(E82,@5-*=/dG?*sEZXUG7+uF5D$GZb^b`=mr/Q52l:0k@o[kCUU_Qil8[X1H9Y:=tjup(/
%of+JQn8,%`R*4GVC0<Md!!-+aS/C57P'YFsI.7k=jTH2<K*(S,cs)p\0Fh/\">m-ZL#*I':gI6,kH6kX0'j<4.LdOY5=dp0BW9SM
%0UmXY^DIlK/peDq"IA_H,6TC7lhb&Jj$>]ia`%3"Bbs$tP@^Sa0q#]mONrjj@BC,>W_5;q#Z3Vs[5$iZN\_&Jn]B08#o'G7%CB;]
%5_;7RMGU.a.q(.^VTKKl61p6V4fW.5;%U3$>Cn)9NBN#@:YO$hFV-5O>X"1bU[MD%nV$J-XAe(f#X/66aH3.SJ-hkRGoKk6WU*1C
%a1PT2%Ns=RK;)Z4eT\e,6Y$&G5A;6%h+3t5q@>6O^OGbJcX6Y52ns_<qUJreHhj/gr8Yt%J,8d20a[PO9\=iEq0eTYp%$B%0Alb5
%>`5ud*l%GTGYYBu^A67DQZ;h@n!3qNlK.KkI!pEKHLgCZ^\RlBbC9KReb?8=^]#=)IK&ookAS)L\b$uXrV"N@^AdiFs8D[nhjltk
%6t`srIJj+kp%A'/ri$_3Qg^Q]rVlX.pR[1[lQ4M>hF`8[QPKPnfrH3$rl^q+s+Og-rq?.Hho24kDnT>KhRhkkT>13uoujiEo_b2F
%5Ou/DcTT^&G;[!&(LD^,7hITo[LD$W!"2g1IGF/eW,ad3]!ke/lKop:ICeI^aAGI!',+iFT"BT3!!sVk(V/1SoU'_;I'SGJ:T-"%
%?#o"X'#X`TS>D[l6c>L]S1bll'r4[Rb?C$M9.6V^RsT!bL.S*Wr9An1iE[G*_aRsi_3IiW9(Ic.NQ@Y$-WiA-b:,)Ia8[7@KK,cr
%c75V(b4QQI\.Qh:ZFmm]dWQWP#%/d[+b5pV1&R4h32[JLR%Z;`7"rU2;UN1Z9@e#@X8iEro.,#HjYKqYhM2t,]>O?07/M=^1;CR'
%C@>^E40+l9+)1GIbD$m,<U!qVAOrtSQOllICe_hpfZ(!?)9`]jSK.,lc,"1kC+-Wo@Ok.I@oO5f2#IfJH3N2DOWe.N0*Ul*p*9,_
%]oM$F#Rtll8ZjIh$mg[G[2ptI"m<F6,;',i(+H*(VAWc6jrVV6![-'<cc_Xrj5c\[N;J81/3dJke3..rh0TV/=V:9?1cZ_iVHFb^
%rpJTZ%`5og-b"gNDV'`<kF5JRYf+8OidAfQ<#3.Mf?8`<mq8L9J*fedo72*UdV%LlB5-CXbCAuo5&N(?kDMrH74fD78#A_-Ju9Zl
%"e*0%;N*2/Ogl"s,!K65'rQ-BYYGHrO+`ES<5fQ*01!e'/4Q.;ob:SG?)Zc(qlLO=@YTIB]*'?K0eTqO4(=!q.e4d^=`Vn&LQp%g
%_.8aVNA?5P7'JC@L0SPi\rK\N*oXQdAC\*hNcFh)"RV*$4lrr.H?8iO@]C[;WkM@b9hbF(3W2.RQQi$R^il6\#5)ZOk1%A4[m)5\
%%MMUDnr(iUBEj.J]T+t";LsCkVM<hU:%@R4HCorhPdJ:3Z+o$VNR]\k2he<sU+$9hWi]a'8q&(A9kSh+HFZkgbi(1`<DIWK]/$8N
%aJV"H#\/m3pZfjm;4TIcl*aCSeZFQp'Zr>aS8@NiA4=A*8)-42]Q[BV(f%X\UdNfc1f>:WdU*H+MB:oZ`J_l,&^RMBKEP5X)ehS_
%371C5gqF35+]suJGqtggX`()dIFIPhY%gqoX0i<HN[&5^1o_DSU82R2e2"(P2GT?CkucFpK;]`GH7!bnW4u>B2@oR>hqe12O'ART
%1L:;h!+q.C(dP*PLgcUOGaIA/elE?Z,qhJO*3LZ'%1sJ3\$oLN9"qucn/SrTEVo),7^=\=UcB5@)pIkG4UHg)?6%gbIZiV\f#1ON
%WW_FC30R=6Uekt?"t3Ph/A\qe\Q,S'=k31K/at]U<u0D@baJ#9fp[J[J7kop&o<:kA"7*gpNV"XUtk:Q9No]g!u3.Pcp/ut&ebP>
%0&M&PbHhNE\[.&mNC50dLO'De?@#F*oVUBL&E`*Fj`@<cL6GHDHFQ%P_aoB&rJJrsh0Z5e.gRlf'\5Bu,V'0)IQ\81N1&!QlcQM0
%qb<0l6Ppt$00tbr]Y+(5UcHW\Z6OJP0Z>Z/=XCZlRX:fd3Ht3h+#iHV3su#G-,Muh7\D=(G;7:,ZQG#g\89mb8b$#@d_J4_L2MQK
%NqBGi#'DH-jh@W0g"@dd?5DE7naJ$6'q)+.?lVV=fYc(ri)1OB6og<MRINpLArQ)AEm4;-+Ic!^bg=9Xi.7*S4GR2T2UGB,$FbkA
%NM0'&ZcS%a.2,Y1C;K1;:<kiWAa[7LlmsnL`La:SNob8K2pqkam;hZeJAp*q:W\ZSi1)RcR_k`=`*9;.ki!<ia6Ueqat/j#IEbXr
%2t`2B0.S)f;cUI=4Q39bFftH[e$*CjM?HOYDR?s7YdNQ+Br87!VlR.&l?gVAF;1]Io9E>k?PFk'&[Z6XNI4*X\,Y;o['^sAmK:k-
%&bt3jIFKO.f/ar)k_0XW3N[F04B`Q-\(Y$&QICeP@h"EANLuXm?<MtG:1f/6_grJF+QK2C&9A9/fa_4Yl,K\Q9qDT:9MgnK:k-A`
%NZ9!dYpYTLSdCB'BDoJbg*9U#7Vl:$n&j\JDLr(5nq#mkE2jAt.V^Xj`DPA]Hk1&h5R,BdCNH$&hO'YAO$;j:6V9\dYKel>>Gh0R
%HQ4VX!(?K"Q)Dfq8rlZk*%Ie]>g-],gQkJUDS)^$eC=&)QF)5`;9:?oc]b4[T.!#5>,0ZtZ%PD46F:j(.a?L_LDK3VJT,8GI/9Li
%C7hcBO"Ef"]=f=Pl47sdK'nZ?5Xh5U>L"hdKVamg'S)N!4IVUa-1^eX:02&F>P\q)BqanGE*86&Cj7<T]VUi;*:dUbJ-r42f@?T>
%>871AI%F!AA<rBIo!6cOT-X2*%G.]gVNDIMlf$rbA)0Cs%-,a=WZFu=\EnW/=oRRQenhLfY--VGiMnn.[q2Il)04t$]@,4B9h2W,
%GL*TL(j5q@,CD]UB=:D,9+/'UaI3sqRoeY13!,binP-tp0#,f1g?m\8QbKuaD4c"l7@goF=d^'rBF,YlDM8dDQt=J,Zq6$>VJa@]
%5R\oR^=)Bg%o'o,M*_]c6.pl(69<Qo>u%S8YsJA4pihE9$^55(b^3JGV`CC<Y_;Y3EH7l%GDRp)02PR)W*mD5)GdMO-]IogZj6%*
%3%^l?qN7`3'ER!r.G$V`)s0SrA%!#sFb@N7Ol()r].O$HA)L8fq+[6&#&BPLM$%F<6BDLL=4Zd."1Dr&Ff&TB?<fPqVA>UrQ#JiI
%5R6,e5n.raq*?#V8Dnqf%nMc>Bg78r[>K)j6:[qnLaVLo#Vh4J'oqr:,X-7gYSTMUHbG^F(EEN5>J+5SO<SIG1oApX<N+!!MlB9]
%LI0$]>XaIVCT5J)2VE/N;"cB=.nnkuYr'R/81e=9`OAJ-19Q7And20C6?#U=i0R-;Z0+hZF(u?RTh=U/?A=ggJL3ZMpp:Nf\r8!\
%),m9&"-uT_XG/1<MFsqeBLk7`Jq=R1\J"uFRnX,JFjNSQBHUpiJ'lpqe[ZZQ3bjf*M!dtBP4h;Y/+rF-nSGUV:a^2)aeH2\gqi"^
%&=X.RB!tnX91#'/.:f9%+kN9jdZI\V!5&9B"9;E5.D>Jhnoi3D13$EO$o>\$Q`+e(Fhm6OR\k-k=Hu:pG$Z@fNbNu]gl&V58lV^A
%9^<?UTubj*[").bWnK()N1ZWQe[J_oLoCabDc#i&GT1"`)H3%RU[6R`@MRIhRNHQ7""d<Q,>I%R?43/2#Q20FM:k/M_DjOohK/qN
%T24/PBXqHq`k0^no<0I'itN"7m6s,@M/rjF[2sipf`+3JU+/&c!D#e04KXg#4%]*Q5!cLu(Y(IjT^"gjS@hm"EA6J:N/H4h-dtP=
%aOsP=YO?h/?NqHhVoX3,<sbTT<<do/Q/.;D&:"]=ZWf>=)(d:^FnbjcbPe&`-=BOPWHOR(rklnqh`iJSIQO==<sF'N+1^rcT"J(D
%hsS8Q(.dEQJ,eYdkHA6@rEd59lLI/eqq!c6mm$a940n&25.JE$MnB933.C4J^O?"AjkE!^s8(8Q^Us<lEeRT)](g`m_F%ZnT.Pne
%C]Z3dTsjm.#CSl6g$e#!DE$_(HcGT<hjo5U.G&6lLV<`6J"u>AIXYMWrf6#)Xd)-9h=:Z0-C:A""gB>g]F'QBl'68.5M68\6%b(D
%4#k<j$<4(j(kBn:,uqW!4Mk1B=\H+lqa%!?Cq)>#StGtc&5A<#cH;3%Tm72n=Huuqeo&h_$Wu7((Eis`,U8FNG\q436d.NGeF#5n
%U6Wcq*/?Lm[KR]d*$naR*SI%\IXIG]AL6($3pC$t2mOX(e[&)kJDG083LF9UU*gf4kM@hQr?j$Win\_!-!L3j!RcT&48otP2gU3.
%2##+UQeq-N"ApAU`KY]A)_qKkBhZP/GB))nM<n0"_V92Z%r;IeAI6^+s)[XdEcu.NoPpbsY0cMBnq0:Up)$r+E$Dj>`Fn)f>(W0\
%Bk:lIU2^\m<3XguEb4uef*;>W7E$&<1%;1RM0LqOpkd'_YD7r:389Q>=-`p>E?VjFE2Q.lfSAPB.o'5OKfPua6&Kd]h$k.:Wp:Fl
%hmRXrfK$+&_ZpTh8dr4)?D$b]"/Rsa3p]>S,V_.eU8e<J%Q7FkC=#g*)4Y/$H3sK&iAr8GER1!M6jH$C?IBY@5osY`H^pA=JD's+
%(1LE[crm:KTMrHq'pG^EX5J$`W0gGt]haEuapKDn*N:+W_.SJ%K#<V'(EpD;(54u!;)g]#YS,gDU6&kZ3'bR?doTntRdcu@VuXj(
%ZlU/Bk9kFg.Q/`jdBT8FhJ8(-_"t^DnQ&UkeR[[<]3C>S&?s1XB%mt2K(gV?aUWqglT1jW'pE`BMntIQ's4Hh8%!E?5/D;B6D\()
%E>D&uV5s0=HOIpsI^)N^>Jgia??lTlHEKVZ+'&NRW1%0i-BiW2Am<aT.&&IR07+]qACUI//X7`IJcoIWM4kn;B^C]ae\!G6qG,+F
%R`/Aa@l+]Vd,E>!S?l5SL-8s9Z&I-]$D;5^n%QQK1*(c`Wg[M.cCM]Gi.qIT5MPrDp4+3sa<;!TnDBhCc&B?:BZQ%4URoj_p^`:W
%VHW_EZB>"]_/26/IGU*&!m$19\/0eZSYI;1<:Bq$Y8;29GoTGU$@:"#4_4S@O3h66'Y`sO1>lbPppYrl)-87Y<*ALE%3@u@j=6Fo
%Se83.J5Nl?gO>lTp3O/:qpN'S,2M"b#MLGHp0Xl;eZ)G;*"o/bP9"kd`0QuB7i\&;4UBuI?36A#0$ZVbq]]4P">4F@]5H]$2;sV$
%-AWXu2*n"+2*o_c=q`;F]VhgEPXXQkb7oe((Vu5l.'UpHO/HqFISV4BQ0nIi;3e@bUSnG.>oZiUI06sTM(E2H:3C,",D3(FF!6*6
%0Kl.-2^LrlqDp1J^H,$([^K-:Ch:cd/fs)#hXj`LO?]Gp.M6-0"r*/a'IVj(U3&Y,]d=qKgKdn!<=k/';j#<9?4$:2ilhiD3-[uV
%q(:SnmM,"_'8Lqa*a2`-FG]`p#;H5\Y1qp,p\En$q050V32EaUN(lSE?%H.+lD=mrE\RZ)+BF#h[2p*#8Uttdb9SU$8U6**9UG$$
%DJIJlQFi3"G*,nh54G5-6^-IP3np.$e9/0@hX`q7J"d>aY-%[/g:Ep'b4n"lHErq_7XQ*aR8)Dq=IWRiI<=h?6'1KnaG:t_*eOT>
%Al1m+k]b0eqAK4aH[B26\Od[7<a-?16;uo%`.*)1lU-eNZLW?Kkt>aSLII2'$9q$k98LCIGfUIe3f'e@-A8(O'#T][(WF)1a&tBY
%3aU`J'r"f8RAWKtAR0udQ%[dU<3F#&NaL7#8-j'S\WCs"gSGLCCQR0\gOQYa0[1XLP`u\3)9[-B:T7tnE8jG&280oj]@^\PJ$GS5
%_@>(hrV(Y&qV;rQe66KDlKW)HC:q#(XGT.1;/(No<^FlU%S<7L-?8K;mC6gOb2``9#nEdG(KQ]cNBL'HBW3N*XC<jEEC6jtDfBmc
%c3mq/gAa!7WB\h290ATK!F^Y0jsC_&;>X1r*7V_&i%;O]c"*aee2.>#Y^!)`M4:rX0=IuH@G+(Y0_DS7$M[TNi)?pZ,_Ztt!q)NY
%rcWeg`&XRV%LtX2U'EIZPe?9PX&VPsLjN7Q&T_X<;J/gcMm(:!.gK:D9&K%PCjk-VkUK;/:=`>"#MMKqB(-4.&W9hkRgaJg1/Ogq
%.W>h^1k<T+ad<68I*\2V.7Tn:90)!K6qk@3X^E`+S#5\WmR89X;THtTUd,]/;>(?Mo3eG?8c]9f_tUP)#Pgn&Wlob1IAqUi^YkJh
%)-Ya>e0i4>4[MpkErQk(&#=B7q:@Wj`DeF64J?,pcSW`GZaN[`htrd"UO/U&;g\6n&>K,$S,[!Xp,$$1RcF0)CldjRZ;Rib=:V+U
%MBW`#gQZPY:`6LGbFl)jDL$5^R(N*^JApe!"\G17TbrM*=EWG%'>]L9=*2lGP&jb&cju#*XR\-^22:2t!#9XE\oBf^kEBC29aYDt
%#\FBd3P_iiQRJ:&=Z3r[[Jn6RPq6d2=-A:pTbPcih(M.gm>,]+m$"eM\(9P=>MX2F8&_(+8>U5&DnrU1JUUWF8[k6[/>HC(*NlRs
%9C#WQ<m"An_<O"DS$k@d'?MiHlGZIV(%;E(jpS-iW*Q8a/KfTcbgI?U>-/RX[A/mNZ#\/Y%5\i$BUY1#e_EXOnLK+EB\GGO:/0$K
%:%;>r_3(AAZ5cI@75_RO)8oIT9d%G2(P,u]X.6;bAe91,*7o%M[nRsR:Vdnq[3Kfs_^SlVom7pjd4'kBZ47?_;jg\S"rV,D#PEVV
%<D_$k\fds\6(`tjU7[>Q1g3T5@I,us*?q@m4i[XD@^<6m_m$5-i]8?2"eDqq."oj#1O*#-&L%6!^WV;_T\)*P(c%p;+V?%Y$(.pO
%/j2Va+[[dU9[\ZG!t>A3:O1\Of6(<2hkZ=eUKX*iM:NR3`53."P>?=)A(<$Q3`BHuNA3f-g)Iur[:q^0H,UD@D(W-6p!<"Mglq&Z
%o)E(QIQL6LCi]G0mLkGPP]\TCI*6VWK.H9L<H!?Pnj.KRj)OtV5[7-,?KDJs1bn.S/ZtM9\8=HIe^126WLQbol;4UGpuo;GN8$Wa
%MjB;QiQo2/3IOh9V]hgp`NBQ6A??KG=XR[@n\Kb;$]irLW"YD0V/mGXo8%a%^HK%q(^'HN<bkW>@+,LUF,:?@`LYMtQ`tYJ0LnAY
%beo[20MrX[D^[$T6mhl*4C5WGV:42PdtQPA?<8_)[uDK=M\@g).le>;'7=;*S!HYS/#HLP3_d<`2#P!+er^$5i2S%4Ksb-h.(e9K
%Tco\&>^2p>LoDt!:m2/Km-Pq`E.frCS##(qpLoYbbO&Yl:Ecr5"m"WE/sC]ur@@g#KC[%oc[qi8l`$kb\1/"j6=CUp_H))$M<HF0
%'*XGe^d.0.H+!\9b!2sj=V;2arKt08p]R+_?eo:.XTpsh\b!>?GTrh`LN8$A%j;p:eaDmKd,XQ"&CYjL']@uoT$sEC9OX+59&+)4
%:VCA&<(nN.5qOr%W4d.LbrWXs']3lNWE;+tQ4.q(h0Shs&/!SKJX<6:J'\!ITsI^n;^O:.Ml>$>)DgdaEZ[HW=.?maK>OUR;1g8R
%/Xp@0OYm23NjY[(/kF0H?SdNBVG>F0$Gim5:#5qI+WakIColot^#(Ko]<g+G?n5KI%A),jZTj8m<qXP.2AH`&:)_['>rDJLhYAp7
%kZ[D%Sj4Ut)g>Vo$?h"E@et^HB]pWo0U5A4Q9rsoT+pHf(o3WiJm%N/*;so2/j5/N]+J.O-/4ju$1Bn&OuOtkne-%S3!E;[<$YrV
%U.SnF#KR"\<NHNeo>#dSBPRq#*"ok1huPdu):Rdn/*.b`#?qr?V@(Ru!d0X\W$FlT-A44o8H?P;W((#R$gaef4i/lK">@T<Ghd/\
%%u*GB+d)X!_G]1U\CK[D:ec%e/uT=[?MH@W=.A#]#cG(fOA;+NVLnLrcDf@Z&Jo'?+_5=OF`R%I?6;R0-;uAUOjQR(5.Qd*cpUck
%C^Q@A&h4nor*!e],*mAIo*<sZM2`i4RoPa*g*&EcQ't_<;!R9U<3'J[REN)Bd,ri6c`&*0P=]aKac1f/BOS0[GGX.[/e$-HdH;kf
%s&Nc;V,Hc$@AZkSWf'i0kRa(u]4puN^%;&dObUZE==[[S&nQ%b8\CsO&>fLD`"f@c%Yci&+\e5O8:'8"ie-#kaDT5Qo$0HZ"o?&=
%VaL?Gg)\$p0_EGaOsrA4N+Wl50`L!r4\GJ'Pc98IgTUPFM3F"A<fok[!lWsI>aIsEFgqTS%G+&Jj"FY8je0@k;Me+V-,#b;qC/R'
%DQkjR3tMja:,q`uBJs_d9bEV<h;*j9lGnC3GaOSPGl3ufkV4[AZ;0-#/@(LHT9M_)ng$Y$ieDWfTTR_pC1L9]Rl*,-q[eT'h^A0-
%!$%2(98XY`6U;^c\ij&eLE:1_6#(Z=Kg$>ReQHPGj,;2F=".B8c$PgKS:/*a9P/6S(_Si";**FLb*N@k;sdt>mJ`B.Un;8-GGss2
%H6b6<m:.FV;[/62IAR/Aq@m4HOds0E!79`SR12>M+kkaRqX!TsMq7VG>:._Rl'Nn3^@&irToYZ_>\^iY3P.0Mk,QpShV8L48^]d(
%Wa\%i1_8q#d,=sDVOpg-$YY=:1&/M_\C[#1J4*dMh'tYo$l!rcLeN`KinBVKo6bti+;dtu8pR8m<9NH713.ECM2c6I3FHGL3F&!?
%1sH8&=BW9bX+"JP;*hReC:pTp7]8P/eo2hA&V_@BGDa`(1-g[AcqE/m$>aIgfc1TKDVYBaH%h(9dnBcr'D'qr$%>[VX*[8t);GWc
%FVmhKOX?Bk&G=tESA$m=BE75_HZ)*-[<?/A["<4mYY0^/&Kou=Bf_,nVc>q5[CaEP]!WT=]D#_>&o)'J_I-Zn6!b]`Su=TV$8[hs
%kamue"h0;KF&P7ueU.BgU(\Z-?@iZ<6Nc?!MR[3,<_>6JmenM_1(rq^@0>M]$9.-_4slg$dDF,lb)30U5YpZse1+iU;m@L9[U^:Y
%%aK,t)0qZPi)s1$h1de\5@0%HN@abr4hH14e5%-_"8XJWOJ2Blft#*5ikG%EG?9%anbK#>kX1c5#7J!1o.\qA4:_\\a2jZ"!-P<W
%DW,]?VUI`)a#RHZdqW7#\]0k(NqO.$r6/fD>Zrre]#bcS3[-6,$+k3SOplok.Aqb$LiZf^+QAgSQJj5>*Dh,lWT@0Ih!)F@N_.Zs
%I\dH3rH(^G\^u:A,YBG]8Hk!nW6(3CKT9h'>>R+AApF;"ncp#DK9tDVAPDJn&PQ>(+U`rQPd8;"G4\M65iQnn:*$2-#PX9L-t_@9
%'i[_DQ7oJ425f4sL:]M-pVIN"i?2/iJg0Hj?=uAY;m^H[aVcB;1&Y/`e.r:#2$09g:4g=n[mJB<D>FCW)(Mg-&RD:s3)gA.?WL%f
%;Jg6-/6O2TM7"(jF0ti$oYm@bqp[?A\',q9lf*/p2`KM_O,HWUPA,EL2Mnol!1;i8b9TJ\l]M<io0FKOQBB&CLpQ\/>J'+AYuV><
%9lYb&V?70sL;&lt,taL2LQb+AFbG^*$"#hP!7ETFA=ZCn9T0)#pB_rB#+a%MlIdBO=;M7eVdT)iaS)0*)8r?"ZG(@JOTd&Ql>/W2
%P/OM$+Fkc7r%*AlieHMo>I"m)X=`/qJ5DEKSs"e-Zbh/7aq:W3\tr\i-7dtse,3<I7rlfF?IsVrP4J,J(CkLdbZ["uFO>Q(oJGYE
%;<0d;XFU+FB+/Hc`Y)gj5^+Qp,-2u2.0L]]4Xt`lp56.HS+)AtW0"rG&o)kWer\FeVkYZmF>RM<F0'iR[n5;f1PB/?WtdAD07-[=
%XPLi)R:)i9[*&-T6K.Xi^&-STTT=,QOf]Bm]I6(Qgds'hCAZK&H+e3jhG$TJB28V'[E3@+FSNM"23$bYqB?E(-*(>T;^).!C#m_W
%a/86V!q./t[CI[<'21b'!2`3biM@Vfn8`t0l=o@lG@)aZPUc\k(WR[e:dj3(psJ$CbMm4C3cq![A8P"'3d6XR0]@N(PZQ-oo:fW3
%$!=uJk_K=R@UI2gQ3CjQ*Y_D;U5$tQpU/jr&Uga4*G1SmUK#[?j]9:Vm@hicV^Y/T=ao-!O7jIC,qRKbd]Q0kSfB=^KZ!d4H8j;U
%!X_`0oV2%9-O@-kZ;@5TOZC7g6<uF%j3U0/XNto.AD<7tZ+t$LG<82saEE@t!Hc@ik^/-f[Od`8]cq[_n$#CUPH(/?(9rr9%ldMN
%E9I*^33=:/Gi:qS%1:OZ<mIVFfYi+=iABhbQ!+]^E+3R@f'O*dG;c5$P*9]a%j;4aGg8_D6pb4\U@Np5?b38k:n>8<A-lY\&duZa
%9LHE5VSSiqJP#QUT+Gk<%UMtH2gj6n;'mq)+]>sBK6P(g@FK4WAAue0*X1:]><\1Mg6j[`"ZmCP)/cTN;M1`HA\m*'HQ.[g;8Q5!
%opF<M<jcJOZ@l<0RN0qQ/:ZV4cWhq+\[`Lhc?cdt6263!LjBuP#'7k,mt-s7ej2I-f]<V;%qj`^;2Fg/*9ef;_&ap@R,i/Or0<"?
%)Tl-PI:lN,:B,k#?At0gB7t[>+&?q0?LS+iaKl+1hB#)s@nK%AM?KpAZ771dQhLW4&Wf<TXbjRui<oM'lO,(6(m_^8.RM&\!H8?/
%44Wb*Y'Xds]j[8Df2XgS#9JC^8,Hu!="M3\BIAJ.(dCbQUdHlf/Bt^T^LYQ0-_/A=[7,`MXZ/)GOM`Y<RrXEbX[U#fio&?q/<8[7
%D$jEma3`/rL#-ErNXl&LpmUY+l2*N?o&b4]MqA@)FOXsQgS'SNG\Y#%W1teHX.nmHM]GNo!A._YJ^pH!K=Vq93kY)Md'm'Y"[6"k
%ro*t?_)hmP26IW(?RSWR?-"`Tff,_LGIg_:A/U:Tm>>"*0,LoI;8m)_aqsL3+DfPrb&InlH[_'Fr/8lg'Mr@eP,lCgV,A)/#B:93
%i,Mn@U]Zr(Ane'B@(X)`Ql(]JFR)3?.15fK26knT0+n\U%dq^F+poS4%.Pfgkbq*SLZA=r-@Hg6&^qBP$e4k1DEn(f6@CLjD3Zbj
%,P>N>h2Cn4\sLQZ'iN6Nb)30VgrDTb8M[^6#e)IrOHTg@iM\sb%e07&EGS\RP]<V%#_@M-X+E*8;t]q'a_cnq?u;LS7+)_6&c%1p
%(33ne.Tp3;\OIR&aSeo\s$T[PQG\KHNe;.H<Tm6%8[A@fZV1s#ldHESIV*@K%S).OhEqm=3(^8Wl;!O,C>d:Y](Z]"!2rPua@XP<
%@YG24<UII&c1+@Z%3\=u8SV36M;jLj!C:4Q.B=p@'@c79F%o?dQl8tpF=J=Cki"KA.6Pa^0?fa6J,sWoGW>6!bI"mJL&PKWf:<3%
%HL'MM?R&q3de&RHL<d//.R$e.gddmj>*/B6L3EFWJuEZB*ajg$*,"[^Bua^*:bq%-Z0o!aU\8FRcH2)E04kX]&f[0-F]pL?q=LW8
%=lNTG5[c$um*/U<r3B(7=qZmqY(;RFaoP5NCHIY6*FY+]XR84SFCD&JE71];l7*5cl_*PL5^4Rb_?Wad#sG7iI+C"9K&Gmp,'S40
%CW,$YE[.Z>dPI@nm,&2^,i*fe[me47_G.AR)5J;$<7<7\I(QfCCY$Pn<c=fsT#Il=(Q%[DT_ZRLR;mIc"RUhW5>d*]$mbC*>R\M6
%\(bVB6gTS\rE,+@:Zc-ApML<+E8!BeBC1iQ#g21J"HtE(g!bL%]_e5+lSaT4a<Wh'YsN1pjNB9n<iA$`g8\cERB>5#L]pjhop?rs
%TTF;?1&hs-)q/Q<jbmr[pB!N,HP90J3A)oVIZ+3r+_90PWR*Vp("j<+5SL!;F"pu9X:@A/DUUcYAXc;7GR&=s1X]rm4X:?<=,5/\
%?ier+`It9:+/Yg8.'oV=dODcLp,)E'Sm.R#KPd!=^4E9uDBC2F_4#IlOHiF9nj5h__n,Y?Q=+")lFGDjoMSJdo[#<R8`*fMmMm8j
%0=\$]X)i<p36@6qZ]%thQ)BQ;gVE$J.&WcUpuEXaWr3l8$W6;g'SR*6*VS^VUrM@[d4R,[n"$1t^be]fB+?+)@8B0(J>B%E\r$uj
%%A]N3B`/MpOFg'F2$&<qd4UAY+FC5flX=bYaS=jeT<MEYk3meZl(hukTt+dPBna95#Yg8WW,r#26jZP;j4^Q]E4Y"%#&qB4brO's
%K8@Zum%^GFLFgu)EE6r9nDb\81QXE%M9U1H@$O>rJj;iT?"/,AF728*31H)\=As7nDWo5hU[/q7k@O,J>^/4_3N4-.cGW\op_1/&
%P\;0EWq"+VKC5bF#\-8#]]7k*#0GC91PAb77.+NOB;)OA'Rd*+G)45aVAon&oF`=T)>,C#?]7tt$#4Cm<Ok9HY/40d'@@tkHHO?(
%:Duu:*-+QkCh'a\'9j`dQ)gLH,f-AW7I3YLU$G7Q/pH9?XA.Mo1D'%[7t0?;HP$/8"1=$dLdt9b:=::n$`;HEY_U_oJ.,2@T[ZG>
%%48'Jj[Km%iX_<KJ&+&)EoNiVZZYPK$fQD0d?Lul;;8/+_;[s-00?kPc`;i[Yb8XdJDRReCG?,+KOmFIL8@HJ)<W^.Qfjc>)WeW(
%I#rT:<-!@i-2^4?."HJ!^tg@5j]fDi;]rAtl`=c!V"%PgequMY@OmgX&p4`n_2S"pbN>hB>/fkTQ7qe5R$rg96jJJ8a:f%'4IL5L
%&k&$'iL^Jq<f"3"XF$cnV0[-CBlSU><24o,%8o%nJ=6,R@QqhtAsc%(!^8UrYD\h_SgpgQiR[HDFDk04H.;Gbi:XWqWU>CD9'T7p
%6=I"E1fu,P28f\V=UIG"(ObY5.$*)bRP><<e@8="(WeZ[K"Q!1qje5npd&j<(AJ2619??[C(>QgDqsklVRbiJ@R`ogjKpZ09/^K+
%g2-_RM3LqYL?$D`$DWuGmb4,Tq0G4+3[!@2=)W,J?<k8:Bb^KT\hA!'Xbj,%>s73$'^qb<]NEMSIXTCcIc/aDU)!+'hhU-%5L&gr
%`E5R"jl]J=WuPrf3'W2bT5$agB7CEEs)7q`GMg.6lhBj(QN(E1s1"?]a)hQ8$-N:'I_Z]]56QVn5Q!O3s*R<7;5o9HM?!V?gUH'&
%J,M(Xrs([Lpt-@,&GuJp52u@)S'o?+`prOFb9->-s(MW:5&%4!3g,C&PaGe.nJ?r3Cms,G"Y\"O?^lrIJGN\Y#q,*dP7*([GUiP&
%*/f4G`E*%d?l6@B38CW=?ne,qaiFgo%tY+#>;/4u7MUb8+XRA'K;7Ff+/<&V<uGUVX2m8dfDJ2O8c+RAij-EY-)*iFfh7")jE\(B
%CeFF<B/A<3K@80-gse=o\OZf>DF<k_HcS>=8AVm<dY6uo9Gr&Dn:U5kVhnaEa+#*$r7O=$5Q(6Lm=50(c.C:5^O,eMl-jME]75;/
%VjIG[pA(aP.f]3\rq,%<+'q-VroOZNI/0--V^Ht?qsqAf^O?"Ma`i76p><,oe)c>!qn(bap]'rrJ+N[?9/X>V~>
%AI9_PrivateDataEnd
